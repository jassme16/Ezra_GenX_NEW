# -*- coding: utf-8 -*-
from openerp import models, fields,api
from openerp.addons.hr_payroll_ezra.parameters import constants
from openerp.exceptions import except_orm, Warning, RedirectWarning,ValidationError
from cStringIO import StringIO
import xlwt
import xlrd
#import openpyxl
import base64

RECORD_STAT = [(1, 'NEW'),
               (2, 'CREATED'),
               (3, 'EDITED')]

FORMAT_STR = [(1, 'Breakdown Report'),
              (2, 'Non-Breakdown Report'),
              (3, 'Daily Rate BreakDown Report'),

]

REPORT_TYPE =[(1, 'Merge Branches'),
              (2, 'Seperate Branches'),
]

FORMAT_GROUP_BY = [(1, 'Branches'),
                    (2, 'Position')]


BREAK_DOWN_REPORT = 1
NON_BREAK_DOWN_REPORT = 2
DAILY_RATE_BREAK_DOWN_REPORT = 3


class BatchBillingInformation(models.Model):
    _name = 'billing.batch'
    _description = 'Batch Client Billing Generation'
    _inherit = 'mail.thread'

    name = fields.Char('Name', required=True)
    attendance_id = fields.Many2one('hr.attendance.main', 'Attendance', required=True)

    def getUseridName(self):
        return self.env['res.users'].search([('id','=', self._uid)]).name

    @api.one
    def generateBatchBilling(self):
        model_billing_main = self.env['billing.main']

        model_customers = self.env['res.partner'].search([('customer', '=', True),
                                                    (('name', '!=', 'Public user'))])
        model_customer_project = self.env['res.customer.setup']

        message = "<span>Generated Billing</span>" \
                  "<ul>%(li)s</ul>" \
                  "<div><b>Generated by</b>: %(user)s </div>" \
                  "<div><b>Type</b>:Batch Billing</div>"
        list_view =""
        for customer in model_customers:
            model_customer_projects = model_customer_project.search([('customer_id', '=',customer.id )])

            for customer_project in model_customer_projects:

                if len(model_billing_main.search([('customer_id', '=', customer_project.customer_id.id),
                                                  ('job_id', '=', customer_project.job_id.id),
                                                  ('attendance_id', '=', self.attendance_id.id)])) == 0:

                    rec_id = model_billing_main.create({
                        'customer_id': customer_project.customer_id.id,
                        'job_id': customer_project.job_id.id,
                        'attendance_id': self.attendance_id.id,
                        'name':  customer_project.customer_id.name + '/' + customer_project.job_id.name + '/' + self.attendance_id.name,
                        'supplies_amount' : customer_project.supplies
                    }).id
                    model_billing_main_generate = self.env['billing.main'].search([('id', '=', rec_id)])
                    model_billing_main_generate.generateEmployeeBilling()
                    list_view +="<li>" + customer_project.customer_id.name + '/' + customer_project.job_id.name + '/' + self.attendance_id.name + "</li>"

        if len(list_view) > 0:
            messages = message %{'li':list_view, 'user': self.getUseridName()}
            self.message_post(body=messages)


class BillingMainInformation(models.Model):
    _name = 'billing.main'
    _description = 'Client Billing'
    _inherit = 'mail.thread'

    @api.one
    def _getFilename(self):
        self.filename = 'Client Billing for %s.xls' % self.name

    @api.one
    def _getTotalDetailsInfor(self):
        total_count =len(self.bill_detail_id)
        self.bill_detail_id_count = total_count

    name = fields.Char('Name',required=True, default='/')
    customer_id = fields.Many2one('res.partner','Customer', required=True)
    job_id = fields.Many2one('hr.job', 'Job Title', required=True)
    attendance_id = fields.Many2one('hr.attendance.main', 'Attendance', required=True, domain = {'attendance_status' : 'approved'})
    state = fields.Selection(constants.STATE, 'Status', default = 'draft')
    subtotal_amount = fields.Float("Subtotal", digits=(18, 2), required=True, default=0)
    supplies_amount = fields.Float("Add : Supplies", digits=(18, 2), required=True, default=0)
    subtotal_amount2 = fields.Float("Subtotal", digits=(18, 2), required=True, default=0)
    vat_amount = fields.Float("Add : 12% Vat", digits=(18, 2), required=True, default=0)
    grandtotal_amount = fields.Float("GRAND TOTAL", digits=(18, 2), required=True, default=0)
    has_13thmonthpay = fields.Boolean('with 13th Month pay', default = False)

    report_format = fields.Selection(FORMAT_STR, 'Report Format', default=1, required=True)
    remarks =fields.Text('Additional Information')

    filename = fields.Char('file name', readonly = True,store = False,compute ='_getFilename')
    billing_file = fields.Binary('Excel File')
    approved_by_id = fields.Many2one('res.users', 'Approver')
    posted_by_id = fields.Many2one('res.users', 'Posted by')
    bill_detail_id = fields.One2many('billing.detail', 'billing_main_id', readonly=False, copy=False)

    bill_detail_id_count = fields.Integer('Total Record', store=False,compute ='_getTotalDetailsInfor')
    @api.onchange('report_format')
    def regenerateReport(self):
        if self.report_format == 1:
            self.generateExcel_Breakdown()
        else:
            self.generateExcel_NonBreakDown()

    @api.one
    @api.onchange('customer_id', 'job_id','attendance_id')
    def getDefaultName(self):
        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', self.customer_id.id),
                                                                     ('job_id', '=', self.job_id.id)])

        if len(self.customer_id) > 0 and len(self.job_id) > 0 and len(self.attendance_id) > 0:
            self.name = self.customer_id.name + '/' + self.job_id.name + '/' + self.attendance_id.name
            self.supplies_amount = model_client_billing_info.supplies

    @api.one
    def generateReport(self):
        if self.report_format == BREAK_DOWN_REPORT:
            self.generateExcel_Breakdown()
        elif self.report_format == NON_BREAK_DOWN_REPORT:
            self.generateExcel_NonBreakDown()
        else:
            self.generateExcel_DailyWageBreakdown()

    @api.one
    def generateEmployeeBilling(self):
        model_attendance = self.env['hr.payroll.attendance'].search([('employee_attendance_child_id', '=', self.attendance_id.id)])
        model_billing_detail = self.env['billing.detail']
        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', self.customer_id.id),
                                                                     ('job_id', '=', self.job_id.id)])
        model_detbill = model_billing_detail.search([('billing_main_id', '=', self.id)])
        model_detbill.unlink()
        self.supplies_amount = 0
        self.subtotal_amount = 0
        self.subtotal_amount2 = 0
        self.vat_amount = 0
        self.grandtotal_amount = 0
        model_workhourtype = self.env['hr.workhourtype']
        self.bill_detail_id = None


        #Create First all Employee in the Assigned Projects
        #Initialized the Record
        model_attendance = self.env['hr.payroll.attendance'].search([('employee_attendance_child_id', '=', self.attendance_id.id),
                                                                     ('is_reliever', '=', False)])
        intSequence = 0
        for employee in model_attendance:
            if employee.employee_id.job_id == self.job_id \
                    and employee.employee_id.assignto_branch_2.customer_info == self.customer_id:
                if self.report_format == DAILY_RATE_BREAK_DOWN_REPORT:
                    curr_detail_less_day = employee.regular_days_work
                else:
                    curr_detail_less_day = employee.absent * -1


                intSequence += 1
                dict_save ={
                    'billing_main_id': self.id,
                    'name': self.name + ' ' + employee.employee_id.name,
                    'sequence': intSequence ,
                    'employee_sequence': intSequence ,
                    'employee_id': employee.employee_id.id,
                    'is_reliever': employee.is_reliever,
                    'employee_reliever_id': employee.employee_reliever.id,
                    'details_less_day': curr_detail_less_day,
                    'details_tardiness_ut': (employee.tardiness + employee.undertime) * -1,
                    'details_straight_duty': employee.straight_duty,
                    'details_night_diff': employee.night_differential,
                    'details_overtime_reqular': employee.regular_overtime,
                    'details_restday': employee.rest_day_work,
                    'details_overtime_restday': employee.restday_overtime,
                    'details_special_holiday': employee.special_day_work,
                    'details_overtime_special_holiday': employee.special_overtime,
                    'details_legal_holiday': employee.holiday_day_work,
                    'details_overtime_legal_holiday': employee.holiday_overtime,
                    'amount_contract': 0,
                    'amount_allowance': 0,
                    'amount_overheadcost': 0,
                    'amount_govt_inc': 0,
                    'amount_thirteenth_month': 0,
                    'amount_incentive_leaves': 0,
                    'amount_less_day': 0,
                    'amount_tardiness_ut': 0,
                    'amount_straight_duty': 0,
                    'amount_night_diff': 0,
                    'amount_overtime_reqular': 0,
                    'amount_restday': 0,
                    'amount_overtime_restday': 0,
                    'amount_special_holiday': 0,
                    'amount_overtime_special_holiday': 0,
                    'amount_legal_holiday': 0,
                    'amount_overtime_legal_holiday': 0,
                    'amount_total': 0,
                    'record_status': 2,
                    'parent_employee_id': False,
                    'has_a_reliever': employee.has_a_reliever,
                    'sequence_float': intSequence
                }
                model_billing_detail.create(dict_save)

        #Create all Reliever in the Assigned Projects
        #Initialized the Record
        model_attendance = self.env['hr.payroll.attendance'].search([('employee_attendance_child_id', '=', self.attendance_id.id),
                                                                     ('is_reliever', '=', True)])
        model_attendance = model_attendance.sorted(key=lambda r:r.create_date)

        for employee in model_attendance:
            #Get the Employee Sequence
            model_billing_detail_emp = self.env['billing.detail'].search([('billing_main_id', '=', self.id),
                                                                          ('employee_id', '=', employee.parent_employee_id.id)])
            if self.report_format == DAILY_RATE_BREAK_DOWN_REPORT:
                curr_detail_less_day = employee.regular_days_work
            else:
                curr_detail_less_day = employee.absent
            if model_billing_detail_emp.employee_id.job_id == self.job_id \
                    and model_billing_detail_emp.employee_id.assignto_branch_2.customer_info == self.customer_id:
                employee_sequence = model_billing_detail_emp.sequence
                flt_sequence = float(employee_sequence)
                model_billing_detail_sequence = self.env['billing.detail'].search([('billing_main_id', '=', self.id),
                                                                              ('parent_employee_id', '=', employee.parent_employee_id.id)])
                # TO GET THE MAXIMUM SEQUENCE NUMBER
                flt_max_sequence= 0
                for sequence in model_billing_detail_sequence:
                    flt_max_sequence = sequence.sequence_float
                if flt_max_sequence > 0:
                    flt_sequence = flt_max_sequence + 0.01
                else:
                    flt_sequence = float(employee_sequence) + 0.01

                dict_save ={
                    'billing_main_id': self.id,
                    'name': self.name + ' ' + employee.employee_reliever.name,
                    'sequence': 0,
                    'employee_sequence': employee_sequence ,
                    'employee_id': employee.employee_id.id,
                    'is_reliever': employee.is_reliever,
                    'employee_reliever_id': employee.employee_reliever.id,
                    'details_less_day': curr_detail_less_day,
                    'details_tardiness_ut': employee.tardiness + employee.undertime,
                    'details_straight_duty': employee.straight_duty,
                    'details_night_diff': employee.night_differential,
                    'details_overtime_reqular': employee.regular_overtime,
                    'details_restday': employee.rest_day_work,
                    'details_overtime_restday': employee.restday_overtime,
                    'details_special_holiday': employee.special_day_work,
                    'details_overtime_special_holiday': employee.special_overtime,
                    'details_legal_holiday': employee.holiday_day_work,
                    'details_overtime_legal_holiday': employee.holiday_overtime,
                    'amount_contract': 0,
                    'amount_allowance': 0,
                    'amount_overheadcost': 0,
                    'amount_govt_inc': 0,
                    'amount_thirteenth_month': 0,
                    'amount_incentive_leaves': 0,
                    'amount_less_day': 0,
                    'amount_tardiness_ut': 0,
                    'amount_straight_duty': 0,
                    'amount_night_diff': 0,
                    'amount_overtime_reqular': 0,
                    'amount_restday': 0,
                    'amount_overtime_restday': 0,
                    'amount_special_holiday': 0,
                    'amount_overtime_special_holiday': 0,
                    'amount_legal_holiday': 0,
                    'amount_overtime_legal_holiday': 0,
                    'amount_total': 0,
                    'record_status': 2,
                    'parent_employee_id': employee.parent_employee_id.id,
                    'has_a_reliever': employee.has_a_reliever,
                    'sequence_float': flt_sequence
                }
                model_billing_detail.create(dict_save)

        #Update Report Type
        model_billing_details = self.env['billing.detail'].search([('billing_main_id', '=', self.id)])
        for model_billing_detail in model_billing_details:
            model_billing_detail.write({'report_type': self.report_format})


        #Update Amount for Daily Breakdown
        model_billing_detail_daily_breakdown = self.env['billing.detail'].search([('billing_main_id', '=', self.id),
                                                                                  ('report_type', '=', DAILY_RATE_BREAK_DOWN_REPORT)])
        for model_billing_detail in model_billing_detail_daily_breakdown:
            curr_thirteenth_month = 0
            curr_incentive_leave = 0
            curr_supplies =0
            curr_equipment = 0
            curr_amount_uniform_allowance = 0
            curr_govt_due = 0
            curr_allowance = 0

            contract_amount = 0
            daily_rate = model_client_billing_info.daily_rate
            curr_thirteenth_month = model_client_billing_info.thirteenth_month/2
            curr_incentive_leave = model_client_billing_info.incentive_leaves/2
            if model_client_billing_info.supplies > 0:
                curr_supplies = model_client_billing_info.supplies/2
            if model_client_billing_info.equipment > 0:
                curr_equipment = model_client_billing_info.equipment/2
            if model_client_billing_info.uniform_allowance > 0:
                curr_amount_uniform_allowance = model_client_billing_info.uniform_allowance /2
            if model_client_billing_info.due_to_government > 0:
                curr_govt_due = model_client_billing_info.due_to_government/2
            if model_client_billing_info.allowance > 0:
                curr_allowance = model_client_billing_info.allowance/2
            hourly_rate = daily_rate/constants.HOURS_PER_DAY
            hourly_rate_without_cola = (daily_rate - constants.PER_DAY)/constants.HOURS_PER_DAY

            if not model_billing_detail.is_reliever:
                model_billing_detail.write({
                    'amount_contract': contract_amount/2,
                    'amount_allowance': curr_allowance,
                    'amount_overheadcost': 0,
                    'amount_govt_inc': curr_govt_due,
                    'amount_thirteenth_month': curr_thirteenth_month,
                    'amount_incentive_leaves': curr_incentive_leave,
                    'amount_less_day': model_billing_detail.details_less_day * daily_rate,
                    'amount_tardiness_ut':  model_billing_detail.details_tardiness_ut * round(hourly_rate_without_cola/constants.MINUTES,2),
                    'amount_straight_duty': model_billing_detail.details_straight_duty * round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate_without_cola),2),
                    'amount_night_diff': model_billing_detail.details_night_diff * round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate_without_cola),2),
                    'amount_overtime_reqular': model_billing_detail.details_overtime_reqular * round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate_without_cola),2),
                    'amount_restday': model_billing_detail.details_restday * round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),
                    'amount_overtime_restday': model_billing_detail.details_overtime_restday * round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),
                    'amount_special_holiday': model_billing_detail.details_special_holiday * round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate_without_cola),2),
                    'amount_overtime_special_holiday': model_billing_detail.details_overtime_special_holiday * round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate_without_cola),2),
                    'amount_legal_holiday': model_billing_detail.details_legal_holiday * round(model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),2),
                    'amount_overtime_legal_holiday': model_billing_detail.details_overtime_legal_holiday * round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),
                    'amount_total': 0,
                    'amount_supplies': curr_supplies,
                    'amount_uniform_allowance': curr_equipment,
                    'amount_equipment': curr_amount_uniform_allowance,})
            else:
                model_billing_detail.write({
                    'amount_less_day': model_billing_detail.details_less_day * daily_rate,
                    'amount_tardiness_ut':  model_billing_detail.details_tardiness_ut * round(hourly_rate_without_cola/constants.MINUTES,2),
                    'amount_straight_duty': model_billing_detail.details_straight_duty * round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate_without_cola),2),
                    'amount_night_diff': model_billing_detail.details_night_diff * round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate_without_cola),2),
                    'amount_overtime_reqular': model_billing_detail.details_overtime_reqular * round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate_without_cola),2),
                    'amount_restday': model_billing_detail.details_restday * round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),
                    'amount_overtime_restday': model_billing_detail.details_overtime_restday * round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),
                    'amount_special_holiday': model_billing_detail.details_special_holiday * round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),2),
                    'amount_overtime_special_holiday': model_billing_detail.details_overtime_special_holiday * round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate_without_cola),2),
                    'amount_legal_holiday': model_billing_detail.details_legal_holiday * model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate_without_cola),
                    'amount_overtime_legal_holiday': model_billing_detail.details_overtime_legal_holiday * round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),
                    'amount_total': 0,})



        #Update the Amount for Monthly Rate and COntract Amount
        model_billing_details = self.env['billing.detail'].search([('billing_main_id', '=', self.id),
                                                                   ('report_type', '!=', DAILY_RATE_BREAK_DOWN_REPORT)])
        for model_billing_detail in model_billing_details:
            curr_thirteenth_month = 0
            curr_incentive_leave = 0
            curr_supplies =0
            curr_equipment = 0
            curr_amount_uniform_allowance = 0
            curr_govt_due = 0
            curr_allowance = 0

            if self.report_format == BREAK_DOWN_REPORT:
                contract_amount = ((model_client_billing_info.daily_rate * model_client_billing_info.factor_days)/ constants.MONTHS_IN_YEAR)
                daily_rate = model_client_billing_info.daily_rate
                curr_thirteenth_month = model_client_billing_info.thirteenth_month/2
                curr_incentive_leave = model_client_billing_info.incentive_leaves/2
                if model_client_billing_info.supplies > 0:
                    curr_supplies = model_client_billing_info.supplies/2
                if model_client_billing_info.equipment > 0:
                    curr_equipment = model_client_billing_info.equipment/2
                if model_client_billing_info.uniform_allowance > 0:
                    curr_amount_uniform_allowance = model_client_billing_info.uniform_allowance /2
                if model_client_billing_info.due_to_government > 0:
                    curr_govt_due = model_client_billing_info.due_to_government/2
                hourly_rate = daily_rate/constants.HOURS_PER_DAY
            elif self.report_format == NON_BREAK_DOWN_REPORT:
                contract_amount = model_client_billing_info.monthly_rate
                daily_rate = ((contract_amount)/model_client_billing_info.factor_days) * constants.MONTHS_IN_YEAR
                hourly_rate = daily_rate/constants.HOURS_PER_DAY
            else:
                contract_amount = 0
                daily_rate = model_client_billing_info.daily_rate
                curr_thirteenth_month = model_client_billing_info.thirteenth_month/2
                curr_incentive_leave = model_client_billing_info.incentive_leaves/2
                if model_client_billing_info.supplies > 0:
                    curr_supplies = model_client_billing_info.supplies/2
                if model_client_billing_info.equipment > 0:
                    curr_equipment = model_client_billing_info.equipment/2
                if model_client_billing_info.uniform_allowance > 0:
                    curr_amount_uniform_allowance = model_client_billing_info.uniform_allowance /2
                if model_client_billing_info.due_to_government > 0:
                    curr_govt_due = model_client_billing_info.due_to_government/2
                if model_client_billing_info.allowance > 0:
                    curr_allowance = model_client_billing_info.allowance/2
                hourly_rate = daily_rate/constants.HOURS_PER_DAY
                hourly_rate_without_cola = (daily_rate - constants.PER_DAY)/constants.HOURS_PER_DAY

            if not model_billing_detail.is_reliever:
                model_billing_detail.write({
                    'amount_contract': contract_amount/2,
                    'amount_allowance': curr_allowance,
                    'amount_overheadcost': 0,
                    'amount_govt_inc': curr_govt_due,
                    'amount_thirteenth_month': curr_thirteenth_month,
                    'amount_incentive_leaves': curr_incentive_leave,
                    'amount_less_day': model_billing_detail.details_less_day * daily_rate,
                    'amount_tardiness_ut':  model_billing_detail.details_tardiness_ut * round(hourly_rate/constants.MINUTES,2),
                    'amount_straight_duty': model_billing_detail.details_straight_duty * model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),
                    'amount_night_diff': model_billing_detail.details_night_diff * model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),
                    'amount_overtime_reqular': model_billing_detail.details_overtime_reqular * model_workhourtype.getAmountRateAmount('ROT',hourly_rate),
                    'amount_restday': model_billing_detail.details_restday * model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),
                    'amount_overtime_restday': model_billing_detail.details_overtime_restday * model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),
                    'amount_special_holiday': model_billing_detail.details_special_holiday * model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),
                    'amount_overtime_special_holiday': model_billing_detail.details_overtime_special_holiday * model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),
                    'amount_legal_holiday': model_billing_detail.details_legal_holiday * model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),
                    'amount_overtime_legal_holiday': model_billing_detail.details_overtime_legal_holiday * model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),
                    'amount_total': 0,
                    'amount_supplies': curr_supplies,
                    'amount_uniform_allowance': curr_equipment,
                    'amount_equipment': curr_amount_uniform_allowance,
                    'report_type': self.report_format})
            else:
                model_billing_detail.write({
                    'amount_less_day': model_billing_detail.details_less_day * daily_rate,
                    'amount_tardiness_ut':  model_billing_detail.details_tardiness_ut * round(hourly_rate/constants.MINUTES,2),
                    'amount_straight_duty': model_billing_detail.details_straight_duty * model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),
                    'amount_night_diff': model_billing_detail.details_night_diff * model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),
                    'amount_overtime_reqular': model_billing_detail.details_overtime_reqular * model_workhourtype.getAmountRateAmount('ROT',hourly_rate),
                    'amount_restday': model_billing_detail.details_restday * model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),
                    'amount_overtime_restday': model_billing_detail.details_overtime_restday * model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),
                    'amount_special_holiday': model_billing_detail.details_special_holiday * model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),
                    'amount_overtime_special_holiday': model_billing_detail.details_overtime_special_holiday * model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),
                    'amount_legal_holiday': model_billing_detail.details_legal_holiday * model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),
                    'amount_overtime_legal_holiday': model_billing_detail.details_overtime_legal_holiday * model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),
                    'amount_total': 0,
                    'report_type': self.report_format})

        #Computation of Overhead Cost
        model_billing_details = self.env['billing.detail'].search([('billing_main_id', '=', self.id)])
        for model_billing_detail in model_billing_details:
            #if model_billing_detail.employee_id.id == 10046:
            #    raise Warning(model_billing_detail.amount_allowance)

            total_overheadcost = 0
            total_overheadcost = model_billing_detail.amount_contract + \
                           (model_billing_detail.amount_less_day + model_billing_detail.amount_tardiness_ut) + \
                           model_billing_detail.amount_allowance + \
                           model_billing_detail.amount_thirteenth_month +\
                           model_billing_detail.amount_incentive_leaves +\
                           model_billing_detail.amount_straight_duty +\
                           model_billing_detail.amount_night_diff +\
                           model_billing_detail.amount_overtime_reqular +\
                           model_billing_detail.amount_restday +\
                           model_billing_detail.amount_overtime_restday +\
                           model_billing_detail.amount_special_holiday +\
                           model_billing_detail.amount_overtime_special_holiday +\
                           model_billing_detail.amount_overtime_special_holiday +\
                           model_billing_detail.amount_legal_holiday +\
                           model_billing_detail.amount_overtime_legal_holiday


            curr_supplies  =0
            curr_equipment =0
            if model_client_billing_info.supplies  > 0:
                curr_supplies = model_client_billing_info.supplies/2
            if model_client_billing_info.equipment > 0:
                curr_equipment = model_client_billing_info.equipment/2

            total_overheadcost += curr_supplies +curr_equipment  \
                                + model_billing_detail.amount_govt_inc




            if self.report_format ==BREAK_DOWN_REPORT:
                total_overheadcost = total_overheadcost * (round((model_client_billing_info.overhead_cost/constants.ONE_HUNDRED_PERCENT),2))

            elif self.report_format == NON_BREAK_DOWN_REPORT:
                total_overheadcost = 0
            else:
                total_overheadcost = total_overheadcost * round((model_client_billing_info.overhead_cost/constants.ONE_HUNDRED_PERCENT),2)


            model_billing_detail.write({'amount_overheadcost': total_overheadcost})
        self.subtotal_amount  = 0
        for model_billing_detail in model_billing_details:

            total_amount = model_billing_detail.amount_contract + \
                           (model_billing_detail.amount_less_day + model_billing_detail.amount_tardiness_ut) + \
                           model_billing_detail.amount_allowance + \
                           model_billing_detail.amount_overheadcost +\
                           model_billing_detail.amount_govt_inc +\
                           model_billing_detail.amount_thirteenth_month +\
                           model_billing_detail.amount_incentive_leaves +\
                           model_billing_detail.amount_straight_duty +\
                           model_billing_detail.amount_night_diff +\
                           model_billing_detail.amount_overtime_reqular +\
                           model_billing_detail.amount_restday +\
                           model_billing_detail.amount_overtime_restday +\
                           model_billing_detail.amount_special_holiday +\
                           model_billing_detail.amount_overtime_special_holiday +\
                           model_billing_detail.amount_overtime_special_holiday +\
                           model_billing_detail.amount_legal_holiday +\
                           model_billing_detail.amount_overtime_legal_holiday +\
                           model_billing_detail.amount_supplies +\
                           model_billing_detail.amount_uniform_allowance  +\
                           model_billing_detail.amount_equipment  +\
                           model_billing_detail.amount_vat
            self.supplies_amount += model_billing_detail.amount_supplies
            self.subtotal_amount += total_amount

            model_billing_detail.write({'amount_total': total_amount})

        self.subtotal_amount2 = self.subtotal_amount + self.supplies_amount
        if model_client_billing_info.is_project_vatable == True:
            if self.report_format == BREAK_DOWN_REPORT or self.report_format == DAILY_RATE_BREAK_DOWN_REPORT:
                self.vat_amount = self.subtotal_amount2 * constants.VAT_RATE
        else:
            self.vat_amount = 0

        self.grandtotal_amount = self.subtotal_amount2 + self.vat_amount

        self.generateReport()

    @api.one
    def recomputeBilling(self):
        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', self.customer_id.id),
                                                                     ('job_id', '=', self.job_id.id)])

        self.subtotal_amount = 0
        self.subtotal_amount2 = 0
        self.vat_amount = 0
        self.grandtotal_amount = 0

        for employee_billing in self.bill_detail_id:
            employee_billing.computeEmployeeBilling(self.customer_id.id, self.job_id.id, self.has_13thmonthpay)
            amount = employee_billing.amount_total
            self.subtotal_amount += amount
        self.supplies_amount = model_client_billing_info.supplies
        self.subtotal_amount2 = self.subtotal_amount + self.supplies_amount

        if model_client_billing_info.is_project_vatable == True:
            self.vat_amount = self.subtotal_amount2 * constants.VAT_RATE
        else:
            self.vat_amount = 0

        self.grandtotal_amount = self.subtotal_amount2 + self.vat_amount
        self.generateReport()

    @api.one
    def postDraft(self):
        self.state = constants.STATE[0][0]
        self.approved_by_id = None
        self.posted_by_id = None

    @api.one
    def postApproved(self):
        self.state = constants.STATE[1][0]
        self.approved_by_id = self._uid

    @api.one
    def post(self):
        self.state = constants.STATE[2][0]
        self.posted_by_id = self._uid

    def generateExcel_Breakdown(self):

        styleTitleFrom =xlwt.XFStyle()
        styleTitleTo =xlwt.XFStyle()
        styleTitleRe =xlwt.XFStyle()
        styleTitleDetails =xlwt.XFStyle()
        styleTitleAmount =xlwt.XFStyle()
        styleColumns =xlwt.XFStyle()
        styleData =xlwt.XFStyle()
        styleBottom_in_name = xlwt.XFStyle()
        styleFooter = xlwt.XFStyle()
        styleBottom =xlwt.XFStyle()
        styleLeft=xlwt.XFStyle()
        styleBottomLeft =xlwt.XFStyle()
        styleBottomRight=xlwt.XFStyle()

        #Alignment Center
        alignment = xlwt.Alignment()
        alignment.horz = xlwt.Alignment.HORZ_CENTER
        alignment.vert = xlwt.Alignment.VERT_CENTER
        alignment.Wrap = 1
        styleColumns.alignment = alignment
        styleColumns.alignment.wrap = 1
        styleColumns.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'

        #styleTitleFrom.alignment = alignment
        #styleTitleRe.alignment = alignment
        #styleTitleTo.alignment = alignment


        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        styleTitleDetails.borders = border
        styleTitleAmount.borders = border
        styleColumns.borders = border

        #border Data
        borderdata = xlwt.Borders()
        borderdata.bottom = xlwt.Borders.NO_LINE
        borderdata.top = xlwt.Borders.NO_LINE
        borderdata.left = xlwt.Borders.THIN
        borderdata.right = xlwt.Borders.THIN

        borderdataBottom = xlwt.Borders()
        borderdataBottom.bottom = xlwt.Borders.THIN
        borderdataBottom.top = xlwt.Borders.NO_LINE
        borderdataBottom.left = xlwt.Borders.THIN
        borderdataBottom.right = xlwt.Borders.THIN

        borderLeft = xlwt.Borders()
        borderLeft.bottom = xlwt.Borders.NO_LINE
        borderLeft.top = xlwt.Borders.NO_LINE
        borderLeft.left = xlwt.Borders.THIN
        borderLeft.right = xlwt.Borders.NO_LINE

        borderdataBottomLeft = xlwt.Borders()
        borderdataBottomLeft.bottom = xlwt.Borders.THIN
        borderdataBottomLeft.top = xlwt.Borders.NO_LINE
        borderdataBottomLeft.left = xlwt.Borders.THIN
        borderdataBottomLeft.right = xlwt.Borders.NO_LINE

        borderBottom_in_name = xlwt.Borders()
        borderBottom_in_name.bottom = xlwt.Borders.THIN
        borderBottom_in_name.top = xlwt.Borders.NO_LINE
        borderBottom_in_name.left = xlwt.Borders.NO_LINE
        borderBottom_in_name.right = xlwt.Borders.NO_LINE

        styleBottomLeft.borders = borderdataBottomLeft
        styleLeft.borders = borderLeft
        styleData.borders = borderdata
        styleBottom.borders = borderdataBottom
        styleBottom_in_name.borders = borderBottom_in_name

        styleData.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleLeft.num_format_str = '00'
        #font
        font = xlwt.Font()
        font.name = 'Arial'
        font.height =120

        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', self.customer_id.id),
                                                                     ('job_id', '=', self.job_id.id)])

        #Creation of Excel File
        workbook = xlwt.Workbook()
        if self.job_id.name == False:
            job_name = ""
        else:
            job_name =self.job_id.name

        sheet = workbook.add_sheet("Billing - " + job_name, True)

        #Get Company Information
        company = self.env['res.company'].search([('id','=',1)])

        sheet.write(1,1,"FR :",styleTitleFrom)
        sheet.write(1,2,company.name,styleTitleFrom)

        sheet.write(2,1,"TO :",styleTitleTo)
        sheet.write(2,2,self.customer_id.name,styleTitleRe)

        sheet.write(3,1,"RE :",styleTitleRe)
        sheet.write(3,2,"BILLING - " + str(self.attendance_id.schedule_datefrom) + ' - ' + str(self.attendance_id.schedule_dateto) ,styleTitleRe)

        sheet.write_merge(5,5, 1,15, "DETAILS", styleColumns)
        sheet.write_merge(5,5, 16,36, "AMOUNT", styleColumns)


        #Columns
        sheet.write_merge(6,12, 1,4, "Name of Employee", styleColumns)
        sheet.write_merge(6,11, 5,5, "Add'l/Less Days", styleColumns)
        sheet.write_merge(6,11,6,6,"Late/UT",styleColumns)
        sheet.write_merge(6,11,7,7,"Straight Duty",styleColumns)
        sheet.write_merge(6,11,8,8,"Night Diff.",styleColumns)
        sheet.write_merge(6,11,9,9,"OT - Regular",styleColumns)
        sheet.write_merge(6,11,10,10,"OT - Rest Day",styleColumns)
        sheet.write_merge(6,11,11,11,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(6,11,12,12,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,11,13,13,"OT - Special Holiday",styleColumns)
        sheet.write_merge(6,11,14,14,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,11,15,15,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(6,10,16,16,"Contract Amount",styleColumns)
        sheet.write_merge(6,10,17,17,"Add'l Less Days",styleColumns)
        sheet.write_merge(6,10,18,18,"Late/UT",styleColumns)
        sheet.write_merge(6,10,19,19,"Night Diff",styleColumns)
        sheet.write_merge(6,10,20,20,"Straight Duty",styleColumns)
        sheet.write_merge(6,10,21,21,"OT - Regular",styleColumns)
        sheet.write_merge(6,10,22,22,"OT - Rest Day",styleColumns)
        sheet.write_merge(6,10,23,23,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(6,10,24,24,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,10,25,25,"OT - Special Holiday",styleColumns)
        sheet.write_merge(6,10,26,26,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,10,27,27,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(6,10,28,28,"13th Month Pay",styleColumns)
        sheet.write_merge(6,10,29,29,"5 Days Incentive Leave",styleColumns)
        sheet.write_merge(6,10,30,30,"Allowance",styleColumns)
        sheet.write_merge(6,10,31,31,"Overhead Cost",styleColumns)
        sheet.write_merge(6,10,32,32,"Govt Inc.",styleColumns)

        sheet.write_merge(6,10,33,33,"Supplies",styleColumns)
        sheet.write_merge(6,10,34,34,"Uniform Allowance",styleColumns)
        sheet.write_merge(6,10,35,35,"Equipment",styleColumns)

        sheet.write_merge(6,12,36,36,"Total",styleColumns)

        #Days/per hours
        sheet.write(12,5,"(days)",styleColumns)
        sheet.write(12,6,"(mins)",styleColumns)
        sheet.write(12,7,"(hrs)",styleColumns)
        sheet.write(12,8,"(hrs)",styleColumns)
        sheet.write(12,9,"(hrs)",styleColumns)
        sheet.write(12,10,"(hrs)",styleColumns)
        sheet.write(12,11,"(hrs)",styleColumns)
        sheet.write(12,12,"(hrs)",styleColumns)
        sheet.write(12,13,"(hrs)",styleColumns)
        sheet.write(12,14,"(hrs)",styleColumns)
        sheet.write(12,15,"(hrs)",styleColumns)
        sheet.write(12,16,"(per mo.)",styleColumns)
        sheet.write(12,17,"(per day)",styleColumns)
        sheet.write(12,18,"(per min)",styleColumns)
        sheet.write(12,19,"(per hr)",styleColumns)
        sheet.write(12,20,"(per hr)",styleColumns)
        sheet.write(12,21,"(per hr)",styleColumns)
        sheet.write(12,22,"(per hr)",styleColumns)
        sheet.write(12,23,"(per hr)",styleColumns)
        sheet.write(12,24,"(per hr)",styleColumns)
        sheet.write(12,25,"(per hr)",styleColumns)
        sheet.write(12,26,"(per hr)",styleColumns)
        sheet.write(12,27,"(per hr)",styleColumns)
        sheet.write(12,28,"(pesos)",styleColumns)
        sheet.write(12,29,"(pesos)",styleColumns)
        sheet.write(12,30,"(pesos)",styleColumns)
        sheet.write(12,31,"(pesos)",styleColumns)
        sheet.write(12,32,"(pesos)",styleColumns)
        sheet.write(12,33,"(pesos)",styleColumns)
        sheet.write(12,34,"(pesos)",styleColumns)
        sheet.write(12,35,"(pesos)",styleColumns)


        #Amount Details Columns
        model_workhourtype = self.env['hr.workhourtype']
        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', self.customer_id.id),
                                                                     ('job_id', '=', self.job_id.id)])

        #daily_rate  = (model_client_billing_info.total_labor_cost * constants.MONTHS_IN_YEAR) / (constants.WEEKS_IN_YEAR * constants.WORK_IN_WEEK)
        if model_client_billing_info.factor_days > 0:
            monthly_cost = (model_client_billing_info.daily_rate * model_client_billing_info.factor_days) / constants.MONTHS_IN_YEAR
            daily_rate  = model_client_billing_info.daily_rate #(model_client_billing_info.total_labor_cost/model_client_billing_info.factor_days) * constants.MONTHS_IN_YEAR
        else:
            monthly_cost  = 0
            daily_rate  = 0

        hourly_rate = daily_rate / constants.HOURS_PER_DAY

        sheet.write(11,16,round(monthly_cost,2), styleColumns)
        sheet.write(11,17,round(daily_rate,2) ,styleColumns)
        sheet.write(11,18,round(hourly_rate/constants.MINUTES,2),styleColumns)
        sheet.write(11,19,round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),2),styleColumns)
        sheet.write(11,20,round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),2),styleColumns)
        sheet.write(11,21,round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate),2),styleColumns)
        sheet.write(11,22,round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),styleColumns)
        sheet.write(11,23,round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),styleColumns)
        sheet.write(11,24,round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),2),styleColumns)
        sheet.write(11,25,round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),2),styleColumns)
        sheet.write(11,26,round(model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),2),styleColumns)
        sheet.write(11,27,round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),styleColumns)
        sheet.write(11,28,round(model_client_billing_info.thirteenth_month,2),styleColumns)
        sheet.write(11,29,round(model_client_billing_info.incentive_leaves,2),styleColumns)
        sheet.write(11,30,round(model_client_billing_info.allowance,2),styleColumns)
        sheet.write(11,31,str(int(model_client_billing_info.overhead_cost)) + "%",styleColumns)
        sheet.write(11,32,round(model_client_billing_info.due_to_government,2),styleColumns)
        sheet.write(11,33,round(model_client_billing_info.supplies,2),styleColumns)
        sheet.write(11,34,round(model_client_billing_info.uniform_allowance,2),styleColumns)
        sheet.write(11,35,round(model_client_billing_info.equipment,2),styleColumns)




        sheet.write(13,1,"",styleLeft)

        for i in range(5,37):
            sheet.write(13,i,"",styleData)

        intRow = 14
        if len(self.bill_detail_id) > 0:

            for employee in self.bill_detail_id:
                fontData = xlwt.Font()
                styleEmployeeName = xlwt.XFStyle()
                #To Check if Employee has a reliever or not
                if employee.has_a_reliever == True:
                    fontData.colour_index = 0x0A
                    styleData.font = fontData
                    styleLeft.font = fontData
                    styleEmployeeName.font =fontData
                    sheet.write(intRow, 1, employee.sequence, styleLeft)
                    sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                elif employee.is_reliever == True:
                    fontData.colour_index = 0x0C
                    styleData.font = fontData
                    styleLeft.font = fontData
                    styleEmployeeName.font =fontData
                    sheet.write(intRow, 1, "**", styleLeft)
                    #sheet.write(intRow, 2, "**",styleEmployeeName)
                    sheet.write(intRow, 2, employee.employee_reliever_id.name,styleEmployeeName)
                else:
                    fontData.colour_index = 0x08
                    styleData.font = fontData
                    styleLeft.font = fontData
                    styleEmployeeName.font =fontData
                    sheet.write(intRow, 1, employee.sequence, styleLeft)
                    sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                sheet.write(intRow,5,employee.details_less_day,styleData)
                sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                sheet.write(intRow,7,employee.details_straight_duty,styleData)
                sheet.write(intRow,8,employee.details_night_diff,styleData)
                sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                sheet.write(intRow,10,employee.details_restday,styleData)
                sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                sheet.write(intRow,12,employee.details_special_holiday,styleData)
                sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)
                sheet.write(intRow,16,employee.amount_contract,styleData)
                sheet.write(intRow,17,employee.amount_less_day,styleData)
                sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)
                sheet.write(intRow,19,employee.amount_night_diff,styleData)
                sheet.write(intRow,20,employee.amount_straight_duty,styleData)
                sheet.write(intRow,21,employee.amount_overtime_reqular,styleData)
                sheet.write(intRow,22,employee.amount_restday,styleData)
                sheet.write(intRow,23,employee.amount_overtime_restday,styleData)
                sheet.write(intRow,24,employee.amount_special_holiday,styleData)
                sheet.write(intRow,25,employee.amount_overtime_special_holiday,styleData)
                sheet.write(intRow,26,employee.amount_legal_holiday,styleData)
                sheet.write(intRow,27,employee.amount_overtime_legal_holiday,styleData)
                sheet.write(intRow,28,employee.amount_thirteenth_month,styleData)
                sheet.write(intRow,29,employee.amount_incentive_leaves,styleData)
                sheet.write(intRow,30,employee.amount_allowance,styleData)
                sheet.write(intRow,31,employee.amount_overheadcost,styleData)
                sheet.write(intRow,32,employee.amount_govt_inc,styleData)

                sheet.write(intRow,33,employee.amount_supplies,styleData)
                sheet.write(intRow,34,employee.amount_uniform_allowance,styleData)
                sheet.write(intRow,35,employee.amount_equipment,styleData)

                sheet.write(intRow,36,employee.amount_total,styleData)
                intRow +=1

        #Bottom
        #intRow +=1

        sheet.write(intRow,1,"",styleBottomLeft)
        sheet.write(intRow,2,"",styleBottom_in_name)
        sheet.write(intRow,3,"",styleBottom_in_name)
        sheet.write(intRow,4,"",styleBottom_in_name)


        for intRowBottom in range(5,37):
            sheet.write(intRow,intRowBottom,"",styleBottom)
        intRow +=1

        #Footer and Data
        intRow +=1
        styleDataFooter =xlwt.XFStyle()
        styleDataFooter.font.bold = True
        styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'

        sheet.write(intRow, 2, "TOTAL",styleDataFooter)
        int_total_less_day = sum(employee.details_less_day  for employee in self.bill_detail_id)
        int_total_tardiness = sum(employee.details_tardiness_ut  for employee in self.bill_detail_id)
        curr_total_straight_duty = sum(employee.details_straight_duty  for employee in self.bill_detail_id)
        curr_total_night_diff = sum(employee.details_night_diff  for employee in self.bill_detail_id)
        curr_total_overtime_regular = sum(employee.details_overtime_reqular  for employee in self.bill_detail_id)
        curr_total_restday = sum(employee.details_restday  for employee in self.bill_detail_id)
        curr_total_overtime_restday = sum(employee.details_overtime_restday  for employee in self.bill_detail_id)
        curr_total_special_holiday = sum(employee.details_special_holiday  for employee in self.bill_detail_id)
        curr_total_overtime_special_holiday = sum(employee.details_overtime_special_holiday  for employee in self.bill_detail_id)
        curr_total_legal_holiday = sum(employee.details_legal_holiday  for employee in self.bill_detail_id)
        curr_total_overtime_legal_holiday = sum(employee.details_overtime_legal_holiday  for employee in self.bill_detail_id)
        curr_total_amount_contract = sum(employee.amount_contract  for employee in self.bill_detail_id)
        curr_total_amount_less_day = sum(employee.amount_less_day  for employee in self.bill_detail_id)
        curr_total_amount_tardiness_ut = sum(employee.amount_tardiness_ut for employee in self.bill_detail_id)
        curr_total_amount_night_diff = sum(employee.amount_night_diff for employee in self.bill_detail_id)
        curr_total_amount_straight_duty = sum(employee.amount_straight_duty for employee in self.bill_detail_id)
        curr_total_amount_overtime_reqular = sum(employee.amount_overtime_reqular for employee in self.bill_detail_id)
        curr_total_amount_restday = sum(employee.amount_restday for employee in self.bill_detail_id)
        curr_total_amount_overtime_restday = sum(employee.amount_overtime_restday for employee in self.bill_detail_id)
        curr_total_amount_amount_special_holiday = sum(employee.amount_special_holiday for employee in self.bill_detail_id)
        curr_total_amount_overtime_special_holiday = sum(employee.amount_overtime_special_holiday for employee in self.bill_detail_id)
        curr_total_amount_legal_holiday = sum(employee.amount_legal_holiday for employee in self.bill_detail_id)
        curr_total_amount_overtime_legal_holiday = sum(employee.amount_overtime_legal_holiday for employee in self.bill_detail_id)
        curr_total_amount_thirteenth_month = sum(employee.amount_thirteenth_month for employee in self.bill_detail_id)
        curr_total_amount_incentive_leaves = sum(employee.amount_incentive_leaves for employee in self.bill_detail_id)
        curr_total_amount_allowance = sum(employee.amount_allowance for employee in self.bill_detail_id)
        curr_total_amount_overheadcost = sum(employee.amount_overheadcost for employee in self.bill_detail_id)
        curr_total_amount_govt_inc = sum(employee.amount_govt_inc for employee in self.bill_detail_id)

        curr_total_amount_supplies = sum(employee.amount_supplies for employee in self.bill_detail_id)
        curr_total_amount_uniform_allowance = sum(employee.amount_uniform_allowance for employee in self.bill_detail_id)
        curr_total_amount_equipment = sum(employee.amount_equipment for employee in self.bill_detail_id)

        curr_total_amount_total = sum(employee.amount_total for employee in self.bill_detail_id)

        if curr_total_straight_duty ==0:
            sheet.col(7).hidden = True
            sheet.col(20).hidden = True

        if curr_total_night_diff ==0:
            sheet.col(8).hidden = True
            sheet.col(19).hidden = True

        if curr_total_overtime_regular ==0:
            sheet.col(9).hidden = True
            sheet.col(21).hidden = True

        if curr_total_restday ==0:
            sheet.col(10).hidden = True
            sheet.col(22).hidden = True

        if curr_total_overtime_restday == 0:
            sheet.col(11).hidden = True
            sheet.col(23).hidden = True

        if curr_total_special_holiday == 0:
            sheet.col(12).hidden = True
            sheet.col(24).hidden = True

        if curr_total_overtime_special_holiday == 0:
            sheet.col(13).hidden = True
            sheet.col(25).hidden = True


        if curr_total_legal_holiday == 0:
            sheet.col(14).hidden = True
            sheet.col(26).hidden = True

        if curr_total_overtime_legal_holiday ==0:
            sheet.col(15).hidden = True
            sheet.col(27).hidden = True

        if curr_total_amount_supplies  == 0:
            sheet.col(33).hidden = True

        if curr_total_amount_uniform_allowance == 0:
            sheet.col(34).hidden = True

        if curr_total_amount_equipment == 0:
            sheet.col(35).hidden = True



        sheet.write(intRow,5,int_total_less_day,styleDataFooter)
        sheet.write(intRow,6,int_total_tardiness,styleDataFooter)
        sheet.write(intRow,7,curr_total_straight_duty,styleDataFooter)
        sheet.write(intRow,8,curr_total_night_diff,styleDataFooter)
        sheet.write(intRow,9,curr_total_overtime_regular,styleDataFooter)
        sheet.write(intRow,10,curr_total_restday,styleDataFooter)
        sheet.write(intRow,11,curr_total_overtime_restday,styleDataFooter)
        sheet.write(intRow,12,curr_total_special_holiday,styleDataFooter)
        sheet.write(intRow,13,curr_total_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,14,curr_total_legal_holiday,styleDataFooter)
        sheet.write(intRow,15,curr_total_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,16,curr_total_amount_contract,styleDataFooter)
        sheet.write(intRow,17,curr_total_amount_less_day,styleDataFooter)
        sheet.write(intRow,18,curr_total_amount_tardiness_ut,styleDataFooter)
        sheet.write(intRow,19,curr_total_amount_night_diff,styleDataFooter)
        sheet.write(intRow,20,curr_total_amount_straight_duty,styleDataFooter)
        sheet.write(intRow,21,curr_total_amount_overtime_reqular,styleDataFooter)
        sheet.write(intRow,22,curr_total_amount_restday,styleDataFooter)
        sheet.write(intRow,23,curr_total_amount_overtime_restday,styleDataFooter)
        sheet.write(intRow,24,curr_total_amount_amount_special_holiday,styleDataFooter)
        sheet.write(intRow,25,curr_total_amount_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,26,curr_total_amount_legal_holiday,styleDataFooter)
        sheet.write(intRow,27,curr_total_amount_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,28,curr_total_amount_thirteenth_month,styleDataFooter)
        sheet.write(intRow,29,curr_total_amount_incentive_leaves,styleDataFooter)
        sheet.write(intRow,30,curr_total_amount_allowance,styleDataFooter)
        sheet.write(intRow,31,curr_total_amount_overheadcost,styleDataFooter)
        sheet.write(intRow,32,curr_total_amount_govt_inc,styleDataFooter)

        sheet.write(intRow,33,curr_total_amount_supplies,styleDataFooter)
        sheet.write(intRow,34,curr_total_amount_uniform_allowance,styleDataFooter)
        sheet.write(intRow,35,curr_total_amount_equipment,styleDataFooter)

        sheet.write(intRow,36,curr_total_amount_total,styleDataFooter)


        intRow +=2
        sheet.write(intRow,32,"Subtotal ")
        sheet.write_merge(intRow,intRow,34,36,self.subtotal_amount,styleFooter)
        intRow +=1

        if self.supplies_amount > 0:
            sheet.write_merge(intRow,intRow,32,33,"Add : Supplies ")
            sheet.write_merge(intRow,intRow,34,36,self.supplies_amount,styleFooter)
            intRow +=1
            sheet.write(intRow,32,"Subtotal ")
            sheet.write_merge(intRow,intRow,34,36,self.subtotal_amount2,styleFooter)
            intRow +=1

        sheet.write_merge(intRow,intRow,32,33,"Add : 12% VAT ")
        sheet.write_merge(intRow,intRow,34,36,self.vat_amount,styleFooter)
        intRow +=2

        sheet.write_merge(intRow,intRow,32,33,"GRAND TOTAL ")
        sheet.write_merge(intRow,intRow,34,36,self.grandtotal_amount,styleFooter)

        # Hide ColumnA
        sheet.col(0).hidden = True

        fp = StringIO()
        workbook.save(fp)
        fp.seek(0)
        data = fp.read()
        fp.close()
        byte_arr = base64.b64encode(data)
        self.billing_file = byte_arr

    def generateExcel_NonBreakDown(self):

        styleTitleFrom =xlwt.XFStyle()
        styleTitleTo =xlwt.XFStyle()
        styleTitleRe =xlwt.XFStyle()
        styleTitleDetails =xlwt.XFStyle()
        styleTitleAmount =xlwt.XFStyle()
        styleColumns =xlwt.XFStyle()
        styleData =xlwt.XFStyle()
        styleBottom_in_name = xlwt.XFStyle()
        styleFooter = xlwt.XFStyle()
        styleBottom =xlwt.XFStyle()
        styleLeft=xlwt.XFStyle()
        styleBottomLeft =xlwt.XFStyle()
        styleBottomRight=xlwt.XFStyle()

        #Alignment Center
        alignment = xlwt.Alignment()
        alignment.horz = xlwt.Alignment.HORZ_CENTER
        alignment.vert = xlwt.Alignment.VERT_CENTER
        alignment.Wrap = 1
        styleColumns.alignment = alignment
        styleColumns.alignment.wrap = 1
        styleColumns.num_format_str ="###,##0.00"

        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        styleTitleDetails.borders = border
        styleTitleAmount.borders = border
        styleColumns.borders = border

        #border Data
        borderdata = xlwt.Borders()
        borderdata.bottom = xlwt.Borders.NO_LINE
        borderdata.top = xlwt.Borders.NO_LINE
        borderdata.left = xlwt.Borders.THIN
        borderdata.right = xlwt.Borders.THIN

        borderdataBottom = xlwt.Borders()
        borderdataBottom.bottom = xlwt.Borders.THIN
        borderdataBottom.top = xlwt.Borders.NO_LINE
        borderdataBottom.left = xlwt.Borders.THIN
        borderdataBottom.right = xlwt.Borders.THIN

        borderLeft = xlwt.Borders()
        borderLeft.bottom = xlwt.Borders.NO_LINE
        borderLeft.top = xlwt.Borders.NO_LINE
        borderLeft.left = xlwt.Borders.THIN
        borderLeft.right = xlwt.Borders.NO_LINE

        borderdataBottomLeft = xlwt.Borders()
        borderdataBottomLeft.bottom = xlwt.Borders.THIN
        borderdataBottomLeft.top = xlwt.Borders.NO_LINE
        borderdataBottomLeft.left = xlwt.Borders.THIN
        borderdataBottomLeft.right = xlwt.Borders.NO_LINE

        borderBottom_in_name = xlwt.Borders()
        borderBottom_in_name.bottom = xlwt.Borders.THIN
        borderBottom_in_name.top = xlwt.Borders.NO_LINE
        borderBottom_in_name.left = xlwt.Borders.NO_LINE
        borderBottom_in_name.right = xlwt.Borders.NO_LINE

        styleBottomLeft.borders = borderdataBottomLeft
        styleLeft.borders = borderLeft
        styleData.borders = borderdata
        styleBottom.borders = borderdataBottom
        styleBottom_in_name.borders = borderBottom_in_name

        styleData.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        #font
        font = xlwt.Font()
        font.name = 'Arial'
        font.height =120

        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', self.customer_id.id),
                                                                     ('job_id', '=', self.job_id.id)])

        #Creation of Excel File
        workbook = xlwt.Workbook()
        sheet = workbook.add_sheet("Billing - " + self.job_id.name, True)

        #Get Company Information
        company = self.env['res.company'].search([('id','=',1)])

        sheet.write(1,1,"FR :",styleTitleFrom)
        sheet.write(1,2,company.name,styleTitleFrom)

        sheet.write(2,1,"TO :",styleTitleTo)
        sheet.write(2,2,self.customer_id.name,styleTitleRe)

        sheet.write(3,1,"RE :",styleTitleRe)
        sheet.write(3,2,"BILLING - " + str(self.attendance_id.schedule_datefrom) + ' - ' + str(self.attendance_id.schedule_dateto) ,styleTitleRe)

        sheet.write_merge(5,5, 1,15, "DETAILS", styleColumns)
        sheet.write_merge(5,5, 16,36, "AMOUNT", styleColumns)

        #Columns
        sheet.write_merge(6,12, 1,4, "Name of Employee", styleColumns)
        sheet.write_merge(6,11, 5,5, "Add'l/Less Days", styleColumns)
        sheet.write_merge(6,11,6,6,"Late/UT",styleColumns)
        sheet.write_merge(6,11,7,7,"Straight Duty",styleColumns)
        sheet.write_merge(6,11,8,8,"Night Diff.",styleColumns)
        sheet.write_merge(6,11,9,9,"OT - Regular",styleColumns)
        sheet.write_merge(6,11,10,10,"OT - Rest Day",styleColumns)
        sheet.write_merge(6,11,11,11,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(6,11,12,12,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,11,13,13,"OT - Special Holiday",styleColumns)
        sheet.write_merge(6,11,14,14,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,11,15,15,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(6,10,16,16,"Contract Amount",styleColumns)
        sheet.write_merge(6,10,17,17,"Add'l Less Days",styleColumns)
        sheet.write_merge(6,10,18,18,"Late/UT",styleColumns)

        sheet.write_merge(6,10,19,19,"Night Diff",styleColumns)
        sheet.write_merge(6,10,20,20,"Straight Duty",styleColumns)
        sheet.write_merge(6,10,21,21,"OT - Regular",styleColumns)
        sheet.write_merge(6,10,22,22,"OT - Rest Day",styleColumns)
        sheet.write_merge(6,10,23,23,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(6,10,24,24,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,10,25,25,"OT - Special Holiday",styleColumns)
        sheet.write_merge(6,10,26,26,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,10,27,27,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(6,10,28,28,"13th Month Pay",styleColumns)
        sheet.write_merge(6,10,29,29,"5 Days Incentive Leave",styleColumns)
        sheet.write_merge(6,10,30,30,"Allowance",styleColumns)
        sheet.write_merge(6,10,31,31,"Overhead Cost",styleColumns)
        sheet.write_merge(6,10,32,32,"Govt Inc.",styleColumns)

        sheet.write_merge(6,10,33,33,"Supplies",styleColumns)
        sheet.write_merge(6,10,34,34,"Uniform Allowance",styleColumns)
        sheet.write_merge(6,10,35,35,"Equipment",styleColumns)

        sheet.write_merge(6,12,36,36,"Total",styleColumns)


        #sheet.write_merge(6,12,19,19,"Total",styleColumns)

        #Days/per hours
        sheet.write(12,5,"(days)",styleColumns)
        sheet.write(12,6,"(mins)",styleColumns)
        sheet.write(12,7,"(hrs)",styleColumns)
        sheet.write(12,8,"(hrs)",styleColumns)
        sheet.write(12,9,"(hrs)",styleColumns)
        sheet.write(12,10,"(hrs)",styleColumns)
        sheet.write(12,11,"(hrs)",styleColumns)
        sheet.write(12,12,"(hrs)",styleColumns)
        sheet.write(12,13,"(hrs)",styleColumns)
        sheet.write(12,14,"(hrs)",styleColumns)
        sheet.write(12,15,"(hrs)",styleColumns)
        sheet.write(12,16,"(per mo.)",styleColumns)
        sheet.write(12,17,"(per day)",styleColumns)
        sheet.write(12,18,"(per min)",styleColumns)

        sheet.write(12,19,"(per hr)",styleColumns)
        sheet.write(12,20,"(per hr)",styleColumns)
        sheet.write(12,21,"(per hr)",styleColumns)
        sheet.write(12,22,"(per hr)",styleColumns)
        sheet.write(12,23,"(per hr)",styleColumns)
        sheet.write(12,24,"(per hr)",styleColumns)
        sheet.write(12,25,"(per hr)",styleColumns)
        sheet.write(12,26,"(per hr)",styleColumns)
        sheet.write(12,27,"(per hr)",styleColumns)
        sheet.write(12,28,"(pesos)",styleColumns)
        sheet.write(12,29,"(pesos)",styleColumns)
        sheet.write(12,30,"(pesos)",styleColumns)
        sheet.write(12,31,"(pesos)",styleColumns)
        sheet.write(12,32,"(pesos)",styleColumns)
        sheet.write(12,33,"(pesos)",styleColumns)
        sheet.write(12,34,"(pesos)",styleColumns)
        sheet.write(12,35,"(pesos)",styleColumns)

        #Amount Details Columns
        model_workhourtype = self.env['hr.workhourtype']
        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', self.customer_id.id),
                                                                     ('job_id', '=', self.job_id.id)
                                                                     ])
        if model_client_billing_info.factor_days > 0:
            daily_rate  = (model_client_billing_info.monthly_rate/model_client_billing_info.factor_days) * constants.MONTHS_IN_YEAR
        else:
            daily_rate  = 0

        hourly_rate = daily_rate / constants.HOURS_PER_DAY


        sheet.write(11,16,round(model_client_billing_info.monthly_rate,2), styleColumns)
        sheet.write(11,17,round(daily_rate,2),styleColumns)
        sheet.write(11,18,round(hourly_rate/constants.MINUTES,2),styleColumns)
        sheet.write(11,19,model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),styleColumns)
        sheet.write(11,20,model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),styleColumns)
        sheet.write(11,21,model_workhourtype.getAmountRateAmount('ROT',hourly_rate),styleColumns)
        sheet.write(11,22,model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),styleColumns)
        sheet.write(11,23,model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),styleColumns)
        sheet.write(11,24,model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),styleColumns)
        sheet.write(11,25,model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),styleColumns)
        sheet.write(11,26,model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),styleColumns)
        sheet.write(11,27,model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),styleColumns)
        sheet.write(11,28,round(model_client_billing_info.thirteenth_month,2),styleColumns)
        sheet.write(11,29,round(model_client_billing_info.incentive_leaves,2),styleColumns)
        sheet.write(11,30,round(model_client_billing_info.allowance,2),styleColumns)
        sheet.write(11,31,str(int(model_client_billing_info.overhead_cost)) + "%",styleColumns)
        sheet.write(11,32,round(model_client_billing_info.due_to_government,2),styleColumns)

        sheet.write(11,33,round(model_client_billing_info.supplies,2),styleColumns)
        sheet.write(11,34,round(model_client_billing_info.uniform_allowance,2),styleColumns)
        sheet.write(11,35,round(model_client_billing_info.equipment,2),styleColumns)


        sheet.write(13,1,"",styleLeft)

        for i in range(5,37):
            sheet.write(13,i,"",styleData)

        intRow = 14
        if len(self.bill_detail_id) > 0:

            for employee in self.bill_detail_id:
                fontData = xlwt.Font()
                styleEmployeeName = xlwt.XFStyle()
                #To Check if Employee has a reliever or not
                if employee.has_a_reliever == True:
                    fontData.colour_index = 0x0A
                    styleData.font = fontData
                    styleLeft.font = fontData
                    styleEmployeeName.font =fontData
                    sheet.write(intRow, 1, employee.sequence, styleLeft)
                    sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                elif employee.is_reliever == True:
                    fontData.colour_index = 0x0C
                    styleData.font = fontData
                    styleLeft.font = fontData
                    styleEmployeeName.font =fontData
                    sheet.write(intRow, 1, "**", styleLeft)
                    #sheet.write(intRow, 2, "**",styleEmployeeName)
                    sheet.write(intRow, 2, employee.employee_reliever_id.name,styleEmployeeName)
                else:
                    fontData.colour_index = 0x08
                    styleData.font = fontData
                    styleLeft.font = fontData
                    styleEmployeeName.font =fontData
                    sheet.write(intRow, 1, employee.sequence, styleLeft)
                    sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                sheet.write(intRow,5,employee.details_less_day,styleData)
                sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                sheet.write(intRow,7,employee.details_straight_duty,styleData)
                sheet.write(intRow,8,employee.details_night_diff,styleData)
                sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                sheet.write(intRow,10,employee.details_restday,styleData)
                sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                sheet.write(intRow,12,employee.details_special_holiday,styleData)
                sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)
                sheet.write(intRow,16,employee.amount_contract,styleData)
                sheet.write(intRow,17,employee.amount_less_day,styleData)
                sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)

                sheet.write(intRow,19,employee.amount_night_diff,styleData)
                sheet.write(intRow,20,employee.amount_straight_duty,styleData)
                sheet.write(intRow,21,employee.amount_overtime_reqular,styleData)
                sheet.write(intRow,22,employee.amount_restday,styleData)
                sheet.write(intRow,23,employee.amount_overtime_restday,styleData)
                sheet.write(intRow,24,employee.amount_special_holiday,styleData)
                sheet.write(intRow,25,employee.amount_overtime_special_holiday,styleData)
                sheet.write(intRow,26,employee.amount_legal_holiday,styleData)
                sheet.write(intRow,27,employee.amount_overtime_legal_holiday,styleData)
                sheet.write(intRow,28,employee.amount_thirteenth_month,styleData)
                sheet.write(intRow,29,employee.amount_incentive_leaves,styleData)
                sheet.write(intRow,30,employee.amount_allowance,styleData)
                sheet.write(intRow,31,employee.amount_overheadcost,styleData)
                sheet.write(intRow,32,employee.amount_govt_inc,styleData)

                sheet.write(intRow,33,employee.amount_supplies,styleData)
                sheet.write(intRow,34,employee.amount_uniform_allowance,styleData)
                sheet.write(intRow,35,employee.amount_equipment,styleData)

                sheet.write(intRow,36,employee.amount_total,styleData)


                intRow +=1

        #Bottom
        #intRow +=1

        sheet.write(intRow,1,"",styleBottomLeft)
        sheet.write(intRow,2,"",styleBottom_in_name)
        sheet.write(intRow,3,"",styleBottom_in_name)
        sheet.write(intRow,4,"",styleBottom_in_name)



        for intRowBottom in range(5,37):
            sheet.write(intRow,intRowBottom,"",styleBottom)
        intRow +=1

        #Footer and Data
        intRow +=1
        styleDataFooter =xlwt.XFStyle()
        styleDataFooter.font.bold = True
        styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'

        sheet.write(intRow, 2, "TOTAL",styleDataFooter)
        int_total_less_day = sum(employee.details_less_day  for employee in self.bill_detail_id)
        int_total_tardiness = sum(employee.details_tardiness_ut  for employee in self.bill_detail_id)
        curr_total_straight_duty = sum(employee.details_straight_duty  for employee in self.bill_detail_id)
        curr_total_night_diff = sum(employee.details_night_diff  for employee in self.bill_detail_id)
        curr_total_overtime_regular = sum(employee.details_overtime_reqular  for employee in self.bill_detail_id)
        curr_total_restday = sum(employee.details_restday  for employee in self.bill_detail_id)
        curr_total_overtime_restday = sum(employee.details_overtime_restday  for employee in self.bill_detail_id)
        curr_total_special_holiday = sum(employee.details_special_holiday  for employee in self.bill_detail_id)
        curr_total_overtime_special_holiday = sum(employee.details_overtime_special_holiday  for employee in self.bill_detail_id)
        curr_total_legal_holiday = sum(employee.details_legal_holiday  for employee in self.bill_detail_id)
        curr_total_overtime_legal_holiday = sum(employee.details_overtime_legal_holiday  for employee in self.bill_detail_id)
        curr_total_amount_contract = sum(employee.amount_contract  for employee in self.bill_detail_id)
        curr_total_amount_less_day = sum(employee.amount_less_day  for employee in self.bill_detail_id)
        curr_total_amount_tardiness_ut = sum(employee.amount_tardiness_ut for employee in self.bill_detail_id)
        curr_total_amount_night_diff = sum(employee.amount_night_diff for employee in self.bill_detail_id)
        curr_total_amount_straight_duty = sum(employee.amount_straight_duty for employee in self.bill_detail_id)
        curr_total_amount_overtime_reqular = sum(employee.amount_overtime_reqular for employee in self.bill_detail_id)
        curr_total_amount_restday = sum(employee.amount_restday for employee in self.bill_detail_id)
        curr_total_amount_overtime_restday = sum(employee.amount_overtime_restday for employee in self.bill_detail_id)
        curr_total_amount_amount_special_holiday = sum(employee.amount_special_holiday for employee in self.bill_detail_id)
        curr_total_amount_overtime_special_holiday = sum(employee.amount_overtime_special_holiday for employee in self.bill_detail_id)
        curr_total_amount_legal_holiday = sum(employee.amount_legal_holiday for employee in self.bill_detail_id)
        curr_total_amount_overtime_legal_holiday = sum(employee.amount_overtime_legal_holiday for employee in self.bill_detail_id)
        curr_total_amount_thirteenth_month = sum(employee.amount_thirteenth_month for employee in self.bill_detail_id)
        curr_total_amount_incentive_leaves = sum(employee.amount_incentive_leaves for employee in self.bill_detail_id)
        curr_total_amount_allowance = sum(employee.amount_allowance for employee in self.bill_detail_id)
        curr_total_amount_overheadcost = sum(employee.amount_overheadcost for employee in self.bill_detail_id)
        curr_total_amount_govt_inc = sum(employee.amount_govt_inc for employee in self.bill_detail_id)
        curr_total_amount_total = sum(employee.amount_total for employee in self.bill_detail_id)

        curr_total_amount_supplies = sum(employee.amount_supplies for employee in self.bill_detail_id)
        curr_total_amount_uniform_allowance = sum(employee.amount_uniform_allowance for employee in self.bill_detail_id)
        curr_total_amount_equipment = sum(employee.amount_equipment for employee in self.bill_detail_id)

        if curr_total_straight_duty ==0:
            sheet.col(7).hidden = True
            sheet.col(20).hidden = True

        if curr_total_night_diff ==0:
            sheet.col(8).hidden = True
            sheet.col(19).hidden = True

        if curr_total_overtime_regular ==0:
            sheet.col(9).hidden = True
            sheet.col(21).hidden = True

        if curr_total_restday ==0:
            sheet.col(10).hidden = True
            sheet.col(22).hidden = True

        if curr_total_overtime_restday == 0:
            sheet.col(11).hidden = True
            sheet.col(23).hidden = True

        if curr_total_special_holiday == 0:
            sheet.col(12).hidden = True
            sheet.col(24).hidden = True

        if curr_total_overtime_special_holiday == 0:
            sheet.col(13).hidden = True
            sheet.col(25).hidden = True


        if curr_total_legal_holiday == 0:
            sheet.col(14).hidden = True
            sheet.col(26).hidden = True

        if curr_total_overtime_legal_holiday ==0:
            sheet.col(15).hidden = True
            sheet.col(27).hidden = True

        if curr_total_amount_supplies  == 0:
            sheet.col(33).hidden = True

        if curr_total_amount_uniform_allowance == 0:
            sheet.col(34).hidden = True

        if curr_total_amount_equipment == 0:
            sheet.col(35).hidden = True




        sheet.write(intRow,5,int_total_less_day,styleDataFooter)
        sheet.write(intRow,6,int_total_tardiness,styleDataFooter)
        sheet.write(intRow,7,curr_total_straight_duty,styleDataFooter)
        sheet.write(intRow,8,curr_total_night_diff,styleDataFooter)
        sheet.write(intRow,9,curr_total_overtime_regular,styleDataFooter)
        sheet.write(intRow,10,curr_total_restday,styleDataFooter)
        sheet.write(intRow,11,curr_total_overtime_restday,styleDataFooter)
        sheet.write(intRow,12,curr_total_special_holiday,styleDataFooter)
        sheet.write(intRow,13,curr_total_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,14,curr_total_legal_holiday,styleDataFooter)
        sheet.write(intRow,15,curr_total_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,16,curr_total_amount_contract,styleDataFooter)
        sheet.write(intRow,17,curr_total_amount_less_day,styleDataFooter)
        sheet.write(intRow,18,curr_total_amount_tardiness_ut,styleDataFooter)
        sheet.write(intRow,19,curr_total_amount_night_diff,styleDataFooter)
        sheet.write(intRow,20,curr_total_amount_straight_duty,styleDataFooter)
        sheet.write(intRow,21,curr_total_amount_overtime_reqular,styleDataFooter)
        sheet.write(intRow,22,curr_total_amount_restday,styleDataFooter)
        sheet.write(intRow,23,curr_total_amount_overtime_restday,styleDataFooter)
        sheet.write(intRow,24,curr_total_amount_amount_special_holiday,styleDataFooter)
        sheet.write(intRow,25,curr_total_amount_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,26,curr_total_amount_legal_holiday,styleDataFooter)
        sheet.write(intRow,27,curr_total_amount_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,28,curr_total_amount_thirteenth_month,styleDataFooter)
        sheet.write(intRow,29,curr_total_amount_incentive_leaves,styleDataFooter)
        sheet.write(intRow,30,curr_total_amount_allowance,styleDataFooter)
        sheet.write(intRow,31,curr_total_amount_overheadcost,styleDataFooter)
        sheet.write(intRow,32,curr_total_amount_govt_inc,styleDataFooter)

        sheet.write(intRow,33,curr_total_amount_supplies,styleDataFooter)
        sheet.write(intRow,34,curr_total_amount_uniform_allowance,styleDataFooter)
        sheet.write(intRow,35,curr_total_amount_equipment,styleDataFooter)


        sheet.write(intRow,36,curr_total_amount_total,styleDataFooter)


        intRow +=2
        sheet.write(intRow,32,"Subtotal ")
        sheet.write_merge(intRow,intRow,34,36,self.subtotal_amount,styleFooter)
        intRow +=1

        if self.supplies_amount > 0:
            sheet.write_merge(intRow,intRow,32,33,"Add : Supplies ")
            sheet.write_merge(intRow,intRow,34,36,self.supplies_amount,styleFooter)
            intRow +=1
            sheet.write(intRow,32,"Subtotal ")
            sheet.write_merge(intRow,intRow,34,36,self.subtotal_amount2,styleFooter)
            intRow +=1

        sheet.write_merge(intRow,intRow,32,33,"Add : 12% VAT ")
        sheet.write_merge(intRow,intRow,34,36,self.vat_amount,styleFooter)
        intRow +=2

        sheet.write_merge(intRow,intRow,32,33,"GRAND TOTAL ")
        sheet.write_merge(intRow,intRow,34,36,self.grandtotal_amount,styleFooter)

        # Hide ColumnA
        sheet.col(0).hidden = True

        #Hide Columns
        sheet.col(28).hidden = True
        sheet.col(29).hidden = True
        sheet.col(30).hidden = True
        sheet.col(31).hidden = True
        sheet.col(32).hidden = True

        fp = StringIO()
        workbook.save(fp)
        fp.seek(0)
        data = fp.read()
        fp.close()
        byte_arr = base64.b64encode(data)
        self.billing_file = byte_arr

    def generateExcel_DailyWageBreakdown(self):

        styleTitleFrom =xlwt.XFStyle()
        styleTitleTo =xlwt.XFStyle()
        styleTitleRe =xlwt.XFStyle()
        styleTitleDetails =xlwt.XFStyle()
        styleTitleAmount =xlwt.XFStyle()
        styleColumns =xlwt.XFStyle()
        styleData =xlwt.XFStyle()
        styleBottom_in_name = xlwt.XFStyle()
        styleFooter = xlwt.XFStyle()
        styleBottom =xlwt.XFStyle()
        styleLeft=xlwt.XFStyle()
        styleBottomLeft =xlwt.XFStyle()
        styleBottomRight=xlwt.XFStyle()

        #Alignment Center
        alignment = xlwt.Alignment()
        alignment.horz = xlwt.Alignment.HORZ_CENTER
        alignment.vert = xlwt.Alignment.VERT_CENTER
        alignment.Wrap = 1
        styleColumns.alignment = alignment
        styleColumns.alignment.wrap = 1
        styleColumns.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'

        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        styleTitleDetails.borders = border
        styleTitleAmount.borders = border
        styleColumns.borders = border

        #border Data
        borderdata = xlwt.Borders()
        borderdata.bottom = xlwt.Borders.NO_LINE
        borderdata.top = xlwt.Borders.NO_LINE
        borderdata.left = xlwt.Borders.THIN
        borderdata.right = xlwt.Borders.THIN

        borderdataBottom = xlwt.Borders()
        borderdataBottom.bottom = xlwt.Borders.THIN
        borderdataBottom.top = xlwt.Borders.NO_LINE
        borderdataBottom.left = xlwt.Borders.THIN
        borderdataBottom.right = xlwt.Borders.THIN

        borderLeft = xlwt.Borders()
        borderLeft.bottom = xlwt.Borders.NO_LINE
        borderLeft.top = xlwt.Borders.NO_LINE
        borderLeft.left = xlwt.Borders.THIN
        borderLeft.right = xlwt.Borders.NO_LINE

        borderdataBottomLeft = xlwt.Borders()
        borderdataBottomLeft.bottom = xlwt.Borders.THIN
        borderdataBottomLeft.top = xlwt.Borders.NO_LINE
        borderdataBottomLeft.left = xlwt.Borders.THIN
        borderdataBottomLeft.right = xlwt.Borders.NO_LINE

        borderBottom_in_name = xlwt.Borders()
        borderBottom_in_name.bottom = xlwt.Borders.THIN
        borderBottom_in_name.top = xlwt.Borders.NO_LINE
        borderBottom_in_name.left = xlwt.Borders.NO_LINE
        borderBottom_in_name.right = xlwt.Borders.NO_LINE

        styleBottomLeft.borders = borderdataBottomLeft
        styleLeft.borders = borderLeft
        styleData.borders = borderdata
        styleBottom.borders = borderdataBottom
        styleBottom_in_name.borders = borderBottom_in_name

        styleData.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleLeft.num_format_str = '00'
        #font
        font = xlwt.Font()
        font.name = 'Arial'
        font.height =120

        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', self.customer_id.id),
                                                                     ('job_id', '=', self.job_id.id)])


        #Creation of Excel File
        workbook = xlwt.Workbook()
        if self.job_id.name == False:
            job_name = ""
        else:
            job_name =self.job_id.name

        sheet = workbook.add_sheet("Billing - " + job_name, True)

        #Get Company Information
        company = self.env['res.company'].search([('id','=',1)])

        sheet.write(1,1,"FR :",styleTitleFrom)
        sheet.write(1,2,company.name,styleTitleFrom)

        sheet.write(2,1,"TO :",styleTitleTo)
        sheet.write(2,2,self.customer_id.name,styleTitleRe)

        sheet.write(3,1,"RE :",styleTitleRe)
        sheet.write(3,2,"BILLING - " + str(self.attendance_id.schedule_datefrom) + ' - ' + str(self.attendance_id.schedule_dateto) ,styleTitleRe)

        sheet.write_merge(5,5, 1,15, "DETAILS", styleColumns)
        sheet.write_merge(5,5, 16,36, "AMOUNT", styleColumns)


        #Columns
        sheet.write_merge(6,12, 1,4, "Name of Employee", styleColumns)
        sheet.write_merge(6,11, 5,5, "Add'l/Less Days", styleColumns)
        sheet.write_merge(6,11,6,6,"Late/UT",styleColumns)
        sheet.write_merge(6,11,7,7,"Straight Duty",styleColumns)
        sheet.write_merge(6,11,8,8,"Night Diff.",styleColumns)
        sheet.write_merge(6,11,9,9,"OT - Regular",styleColumns)
        sheet.write_merge(6,11,10,10,"OT - Rest Day",styleColumns)
        sheet.write_merge(6,11,11,11,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(6,11,12,12,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,11,13,13,"OT - Special Holiday",styleColumns)
        sheet.write_merge(6,11,14,14,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,11,15,15,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(6,10,16,16,"Contract Amount",styleColumns)
        sheet.write_merge(6,10,17,17,"Add'l Less Days",styleColumns)
        sheet.write_merge(6,10,18,18,"Late/UT",styleColumns)
        sheet.write_merge(6,10,19,19,"Night Diff",styleColumns)
        sheet.write_merge(6,10,20,20,"Straight Duty",styleColumns)
        sheet.write_merge(6,10,21,21,"OT - Regular",styleColumns)
        sheet.write_merge(6,10,22,22,"OT - Rest Day",styleColumns)
        sheet.write_merge(6,10,23,23,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(6,10,24,24,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,10,25,25,"OT - Special Holiday",styleColumns)
        sheet.write_merge(6,10,26,26,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(6,10,27,27,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(6,10,28,28,"13th Month Pay",styleColumns)
        sheet.write_merge(6,10,29,29,"5 Days Incentive Leave",styleColumns)
        sheet.write_merge(6,10,30,30,"Allowance",styleColumns)
        sheet.write_merge(6,10,31,31,"Overhead Cost",styleColumns)
        sheet.write_merge(6,10,32,32,"Govt Inc.",styleColumns)
        sheet.write_merge(6,10,33,33,"Supplies.",styleColumns)
        sheet.write_merge(6,10,33,33,"Supplies",styleColumns)
        sheet.write_merge(6,10,34,34,"Uniform Allowance",styleColumns)
        sheet.write_merge(6,10,35,35,"Equipment",styleColumns)
        sheet.write_merge(6,12,36,36,"Total",styleColumns)

        #Days/per hours
        sheet.write(12,5,"(days)",styleColumns)
        sheet.write(12,6,"(mins)",styleColumns)
        sheet.write(12,7,"(hrs)",styleColumns)
        sheet.write(12,8,"(hrs)",styleColumns)
        sheet.write(12,9,"(hrs)",styleColumns)
        sheet.write(12,10,"(hrs)",styleColumns)
        sheet.write(12,11,"(hrs)",styleColumns)
        sheet.write(12,12,"(hrs)",styleColumns)
        sheet.write(12,13,"(hrs)",styleColumns)
        sheet.write(12,14,"(hrs)",styleColumns)
        sheet.write(12,15,"(hrs)",styleColumns)
        sheet.write(12,16,"(per mo.)",styleColumns)
        sheet.write(12,17,"(per day)",styleColumns)
        sheet.write(12,18,"(per min)",styleColumns)
        sheet.write(12,19,"(per hr)",styleColumns)
        sheet.write(12,20,"(per hr)",styleColumns)
        sheet.write(12,21,"(per hr)",styleColumns)
        sheet.write(12,22,"(per hr)",styleColumns)
        sheet.write(12,23,"(per hr)",styleColumns)
        sheet.write(12,24,"(per hr)",styleColumns)
        sheet.write(12,25,"(per hr)",styleColumns)
        sheet.write(12,26,"(per hr)",styleColumns)
        sheet.write(12,27,"(per hr)",styleColumns)
        sheet.write(12,28,"(pesos)",styleColumns)
        sheet.write(12,29,"(pesos)",styleColumns)
        sheet.write(12,30,"(pesos)",styleColumns)
        sheet.write(12,31,"(pesos)",styleColumns)
        sheet.write(12,32,"(pesos)",styleColumns)
        sheet.write(12,33,"(pesos)",styleColumns)
        sheet.write(12,31,"(pesos)",styleColumns)
        sheet.write(12,32,"(pesos)",styleColumns)
        sheet.write(12,33,"(pesos)",styleColumns)
        sheet.write(12,34,"(pesos)",styleColumns)
        sheet.write(12,35,"(pesos)",styleColumns)



        #Amount Details Columns
        model_workhourtype = self.env['hr.workhourtype']
        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', self.customer_id.id),
                                                                     ('job_id', '=', self.job_id.id)])

        if model_client_billing_info.factor_days > 0:
            monthly_cost = (model_client_billing_info.daily_rate * model_client_billing_info.factor_days) / constants.MONTHS_IN_YEAR
            daily_rate  = model_client_billing_info.daily_rate #(model_client_billing_info.total_labor_cost/model_client_billing_info.factor_days) * constants.MONTHS_IN_YEAR
        else:
            monthly_cost  = 0
            daily_rate  = 0

        hourly_rate = daily_rate / constants.HOURS_PER_DAY
        hourly_rate_without_cola = (daily_rate - constants.PER_DAY) / constants.HOURS_PER_DAY

        sheet.write(11,16,round(monthly_cost,2), styleColumns)
        sheet.write(11,17,round(daily_rate,2) ,styleColumns)
        sheet.write(11,18,round(hourly_rate_without_cola/constants.MINUTES,2),styleColumns)
        sheet.write(11,19,round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate_without_cola),2),styleColumns)
        sheet.write(11,20,round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate_without_cola),2),styleColumns)
        sheet.write(11,21,round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate_without_cola),2),styleColumns)
        sheet.write(11,22,round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),styleColumns)
        sheet.write(11,23,round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),styleColumns)
        sheet.write(11,24,round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate_without_cola),2),styleColumns)
        sheet.write(11,25,round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate_without_cola),2),styleColumns)
        sheet.write(11,26,round(model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),2),styleColumns)
        sheet.write(11,27,round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),styleColumns)
        sheet.write(11,28,round(model_client_billing_info.thirteenth_month,2),styleColumns)
        sheet.write(11,29,round(model_client_billing_info.incentive_leaves,2),styleColumns)
        sheet.write(11,30,round(model_client_billing_info.allowance,2),styleColumns)
        sheet.write(11,31,str(int(model_client_billing_info.overhead_cost)) + "%",styleColumns)
        sheet.write(11,32,round(model_client_billing_info.due_to_government,2),styleColumns)
        sheet.write(11,33,round(model_client_billing_info.supplies,2),styleColumns)
        sheet.write(11,34,round(model_client_billing_info.uniform_allowance,2),styleColumns)
        sheet.write(11,35,round(model_client_billing_info.equipment,2),styleColumns)

        sheet.write(13,1,"",styleLeft)

        for i in range(5,37):
            sheet.write(13,i,"",styleData)

        intRow = 14
        if len(self.bill_detail_id) > 0:

            for employee in self.bill_detail_id:
                fontData = xlwt.Font()
                styleEmployeeName = xlwt.XFStyle()
                #To Check if Employee has a reliever or not
                if employee.has_a_reliever == True:
                    fontData.colour_index = 0x0A
                    styleData.font = fontData
                    styleLeft.font = fontData
                    styleEmployeeName.font =fontData
                    sheet.write(intRow, 1, employee.sequence, styleLeft)
                    sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                elif employee.is_reliever == True:
                    fontData.colour_index = 0x0C
                    styleData.font = fontData
                    styleLeft.font = fontData
                    styleEmployeeName.font =fontData
                    sheet.write(intRow, 1, "**", styleLeft)
                    #sheet.write(intRow, 2, "**",styleEmployeeName)
                    sheet.write(intRow, 2, employee.employee_reliever_id.name,styleEmployeeName)
                else:
                    fontData.colour_index = 0x08
                    styleData.font = fontData
                    styleLeft.font = fontData
                    styleEmployeeName.font =fontData
                    sheet.write(intRow, 1, employee.sequence, styleLeft)
                    sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                sheet.write(intRow,5,employee.details_less_day,styleData)
                sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                sheet.write(intRow,7,employee.details_straight_duty,styleData)
                sheet.write(intRow,8,employee.details_night_diff,styleData)
                sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                sheet.write(intRow,10,employee.details_restday,styleData)
                sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                sheet.write(intRow,12,employee.details_special_holiday,styleData)
                sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)
                sheet.write(intRow,16,employee.amount_contract,styleData)
                sheet.write(intRow,17,employee.amount_less_day,styleData)
                sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)
                sheet.write(intRow,19,employee.amount_night_diff,styleData)
                sheet.write(intRow,20,employee.amount_straight_duty,styleData)
                sheet.write(intRow,21,employee.amount_overtime_reqular,styleData)
                sheet.write(intRow,22,employee.amount_restday,styleData)
                sheet.write(intRow,23,employee.amount_overtime_restday,styleData)
                sheet.write(intRow,24,employee.amount_special_holiday,styleData)
                sheet.write(intRow,25,employee.amount_overtime_special_holiday,styleData)
                sheet.write(intRow,26,employee.amount_legal_holiday,styleData)
                sheet.write(intRow,27,employee.amount_overtime_legal_holiday,styleData)
                sheet.write(intRow,28,employee.amount_thirteenth_month,styleData)
                sheet.write(intRow,29,employee.amount_incentive_leaves,styleData)
                sheet.write(intRow,30,employee.amount_allowance,styleData)
                sheet.write(intRow,31,employee.amount_overheadcost,styleData)
                sheet.write(intRow,32,employee.amount_govt_inc,styleData)

                sheet.write(intRow,33,employee.amount_supplies,styleData)
                sheet.write(intRow,34,employee.amount_uniform_allowance,styleData)
                sheet.write(intRow,35,employee.amount_equipment,styleData)

                sheet.write(intRow,36,employee.amount_total,styleData)
                intRow +=1

        #Bottom
        #intRow +=1

        sheet.write(intRow,1,"",styleBottomLeft)
        sheet.write(intRow,2,"",styleBottom_in_name)
        sheet.write(intRow,3,"",styleBottom_in_name)
        sheet.write(intRow,4,"",styleBottom_in_name)


        for intRowBottom in range(5,37):
            sheet.write(intRow,intRowBottom,"",styleBottom)
        intRow +=1

        #Footer and Data
        intRow +=1
        styleDataFooter =xlwt.XFStyle()
        styleDataFooter.font.bold = True
        styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'

        sheet.write(intRow, 2, "TOTAL",styleDataFooter)
        int_total_less_day = sum(employee.details_less_day  for employee in self.bill_detail_id)
        int_total_tardiness = sum(employee.details_tardiness_ut  for employee in self.bill_detail_id)
        curr_total_straight_duty = sum(employee.details_straight_duty  for employee in self.bill_detail_id)
        curr_total_night_diff = sum(employee.details_night_diff  for employee in self.bill_detail_id)
        curr_total_overtime_regular = sum(employee.details_overtime_reqular  for employee in self.bill_detail_id)
        curr_total_restday = sum(employee.details_restday  for employee in self.bill_detail_id)
        curr_total_overtime_restday = sum(employee.details_overtime_restday  for employee in self.bill_detail_id)
        curr_total_special_holiday = sum(employee.details_special_holiday  for employee in self.bill_detail_id)
        curr_total_overtime_special_holiday = sum(employee.details_overtime_special_holiday  for employee in self.bill_detail_id)
        curr_total_legal_holiday = sum(employee.details_legal_holiday  for employee in self.bill_detail_id)
        curr_total_overtime_legal_holiday = sum(employee.details_overtime_legal_holiday  for employee in self.bill_detail_id)
        curr_total_amount_contract = sum(employee.amount_contract  for employee in self.bill_detail_id)
        curr_total_amount_less_day = sum(employee.amount_less_day  for employee in self.bill_detail_id)
        curr_total_amount_tardiness_ut = sum(employee.amount_tardiness_ut for employee in self.bill_detail_id)
        curr_total_amount_night_diff = sum(employee.amount_night_diff for employee in self.bill_detail_id)
        curr_total_amount_straight_duty = sum(employee.amount_straight_duty for employee in self.bill_detail_id)
        curr_total_amount_overtime_reqular = sum(employee.amount_overtime_reqular for employee in self.bill_detail_id)
        curr_total_amount_restday = sum(employee.amount_restday for employee in self.bill_detail_id)
        curr_total_amount_overtime_restday = sum(employee.amount_overtime_restday for employee in self.bill_detail_id)
        curr_total_amount_amount_special_holiday = sum(employee.amount_special_holiday for employee in self.bill_detail_id)
        curr_total_amount_overtime_special_holiday = sum(employee.amount_overtime_special_holiday for employee in self.bill_detail_id)
        curr_total_amount_legal_holiday = sum(employee.amount_legal_holiday for employee in self.bill_detail_id)
        curr_total_amount_overtime_legal_holiday = sum(employee.amount_overtime_legal_holiday for employee in self.bill_detail_id)
        curr_total_amount_thirteenth_month = sum(employee.amount_thirteenth_month for employee in self.bill_detail_id)
        curr_total_amount_incentive_leaves = sum(employee.amount_incentive_leaves for employee in self.bill_detail_id)
        curr_total_amount_allowance = sum(employee.amount_allowance for employee in self.bill_detail_id)
        curr_total_amount_overheadcost = sum(employee.amount_overheadcost for employee in self.bill_detail_id)
        curr_total_amount_govt_inc = sum(employee.amount_govt_inc for employee in self.bill_detail_id)
        curr_total_amount_total = sum(employee.amount_total for employee in self.bill_detail_id)

        curr_total_amount_supplies = sum(employee.amount_supplies for employee in self.bill_detail_id)
        curr_total_amount_uniform_allowance = sum(employee.amount_uniform_allowance for employee in self.bill_detail_id)
        curr_total_amount_equipment = sum(employee.amount_equipment for employee in self.bill_detail_id)

        if curr_total_straight_duty ==0:
            sheet.col(7).hidden = True
            sheet.col(20).hidden = True

        if curr_total_night_diff ==0:
            sheet.col(8).hidden = True
            sheet.col(19).hidden = True

        if curr_total_overtime_regular ==0:
            sheet.col(9).hidden = True
            sheet.col(21).hidden = True

        if curr_total_restday ==0:
            sheet.col(10).hidden = True
            sheet.col(22).hidden = True

        if curr_total_overtime_restday == 0:
            sheet.col(11).hidden = True
            sheet.col(23).hidden = True

        if curr_total_special_holiday == 0:
            sheet.col(12).hidden = True
            sheet.col(24).hidden = True

        if curr_total_overtime_special_holiday == 0:
            sheet.col(13).hidden = True
            sheet.col(25).hidden = True


        if curr_total_legal_holiday == 0:
            sheet.col(14).hidden = True
            sheet.col(26).hidden = True

        if curr_total_overtime_legal_holiday ==0:
            sheet.col(15).hidden = True
            sheet.col(27).hidden = True

        if curr_total_amount_supplies  == 0:
            sheet.col(33).hidden = True

        if curr_total_amount_uniform_allowance == 0:
            sheet.col(34).hidden = True

        if curr_total_amount_equipment == 0:
            sheet.col(35).hidden = True



        sheet.write(intRow,5,int_total_less_day,styleDataFooter)
        sheet.write(intRow,6,int_total_tardiness,styleDataFooter)
        sheet.write(intRow,7,curr_total_straight_duty,styleDataFooter)
        sheet.write(intRow,8,curr_total_night_diff,styleDataFooter)
        sheet.write(intRow,9,curr_total_overtime_regular,styleDataFooter)
        sheet.write(intRow,10,curr_total_restday,styleDataFooter)
        sheet.write(intRow,11,curr_total_overtime_restday,styleDataFooter)
        sheet.write(intRow,12,curr_total_special_holiday,styleDataFooter)
        sheet.write(intRow,13,curr_total_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,14,curr_total_legal_holiday,styleDataFooter)
        sheet.write(intRow,15,curr_total_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,16,curr_total_amount_contract,styleDataFooter)
        sheet.write(intRow,17,curr_total_amount_less_day,styleDataFooter)
        sheet.write(intRow,18,curr_total_amount_tardiness_ut,styleDataFooter)
        sheet.write(intRow,19,curr_total_amount_night_diff,styleDataFooter)
        sheet.write(intRow,20,curr_total_amount_straight_duty,styleDataFooter)
        sheet.write(intRow,21,curr_total_amount_overtime_reqular,styleDataFooter)
        sheet.write(intRow,22,curr_total_amount_restday,styleDataFooter)
        sheet.write(intRow,23,curr_total_amount_overtime_restday,styleDataFooter)
        sheet.write(intRow,24,curr_total_amount_amount_special_holiday,styleDataFooter)
        sheet.write(intRow,25,curr_total_amount_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,26,curr_total_amount_legal_holiday,styleDataFooter)
        sheet.write(intRow,27,curr_total_amount_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,28,curr_total_amount_thirteenth_month,styleDataFooter)
        sheet.write(intRow,29,curr_total_amount_incentive_leaves,styleDataFooter)
        sheet.write(intRow,30,curr_total_amount_allowance,styleDataFooter)
        sheet.write(intRow,31,curr_total_amount_overheadcost,styleDataFooter)
        sheet.write(intRow,32,curr_total_amount_govt_inc,styleDataFooter)
        sheet.write(intRow,33,curr_total_amount_supplies,styleDataFooter)

        sheet.write(intRow,33,curr_total_amount_supplies,styleDataFooter)
        sheet.write(intRow,34,curr_total_amount_uniform_allowance,styleDataFooter)
        sheet.write(intRow,35,curr_total_amount_equipment,styleDataFooter)


        sheet.write(intRow,36,curr_total_amount_total,styleDataFooter)


        intRow +=2
        sheet.write(intRow,32,"Subtotal ")
        sheet.write_merge(intRow,intRow,34,36,self.subtotal_amount,styleFooter)
        intRow +=1


        if self.supplies_amount > 0:
            sheet.write_merge(intRow,intRow,32,33,"Add : Supplies ")
            sheet.write_merge(intRow,intRow,34,36,self.supplies_amount,styleFooter)
            intRow +=1
            sheet.write(intRow,32,"Subtotal ")
            sheet.write_merge(intRow,intRow,34,36,self.subtotal_amount2,styleFooter)
            intRow +=1

        #if self.supplies_amount > 0:
        #    sheet.write_merge(intRow,intRow,29,30,"Add : Supplies ")
        #    sheet.write_merge(intRow,intRow,31,33,self.supplies_amount,styleFooter)
        #    intRow +=1
        #    sheet.write(intRow,29,"Subtotal ")
        #    sheet.write_merge(intRow,intRow,31,33,self.subtotal_amount2,styleFooter)
        #    intRow +=1

        sheet.write_merge(intRow,intRow,32,33,"Add : 12% VAT ")
        sheet.write_merge(intRow,intRow,34,36,self.vat_amount,styleFooter)
        intRow +=2

        sheet.write_merge(intRow,intRow,32,33,"GRAND TOTAL ")
        sheet.write_merge(intRow,intRow,34,36,self.grandtotal_amount,styleFooter)

        # Hide ColumnA
        sheet.col(0).hidden = True
        sheet.col(16).hidden = True

        fp = StringIO()
        workbook.save(fp)
        fp.seek(0)
        data = fp.read()
        fp.close()
        byte_arr = base64.b64encode(data)
        self.billing_file = byte_arr


class BillingMainDetail(models.Model):
    _name = 'billing.detail'
    _description = 'Clients Billing Information'
    _order = 'sequence_float,create_date'

    @api.one
    def checkEmployeeHierarchy(self):
        total_employee_parent_count = self.env['billing.detail'].search_count([('parent_employee_id', '=', self.parent_employee_id)])

        if total_employee_parent_count > 0:
            if self.parent_employee_id == self.employee_id:
                return True
        return False

    billing_main_id = fields.Many2one('billing.main')
    name = fields.Char('Name', require=True)
    sequence = fields.Integer('Sequence')
    employee_id = fields.Many2one('hr.employee', 'Name of Employee')
    has_a_reliever = fields.Boolean('Has a Reliever?', default=False)
    is_reliever = fields.Boolean('Reliever?', default=False)
    employee_reliever_id = fields.Many2one('hr.employee', 'Reliever Employee')
    employee_sequence = fields.Integer('Sequence')
    parent_employee_id = fields.Many2one('hr.employee', 'Parent Employee')
    details_less_day = fields.Float("Add'l/Less Days", digits=(18, 2), required=True, default=0)
    details_tardiness_ut = fields.Float("Late/UT", digits=(18, 2), required=True, default=0)
    details_straight_duty = fields.Float("Straight Duty", digits=(18, 2), required=True, default=0)
    details_night_diff = fields.Float("Night Differential", digits=(18, 2), required=True, default=0)
    details_overtime_reqular = fields.Float("OT-Regular", digits=(18, 2), required=True, default=0)
    details_restday = fields.Float("OT-Rest Day", digits=(18, 2), required=True, default=0)
    details_overtime_restday = fields.Float("Excess-OT Rest Day", digits=(18, 2), required=True, default=0)
    details_special_holiday = fields.Float("Special Holiday w/Duty", digits=(18, 2), required=True, default=0)
    details_overtime_special_holiday = fields.Float("OT-Special Holiday", digits=(18, 2), required=True, default=0)
    details_legal_holiday = fields.Float("Legal Holiday w/Duty", digits=(18, 2), required=True, default=0)
    details_overtime_legal_holiday = fields.Float("OT-Legal Holiday", digits=(18, 2), required=True, default=0)

    #Amount
    amount_contract = fields.Float("Contract Amount", digits=(18, 2), required=True, default=0)
    amount_allowance = fields.Float("Allowance", digits=(18, 2), required=True, default=0)
    amount_overheadcost = fields.Float("Overhead Cost", digits=(18, 2), required=True, default=0)
    amount_govt_inc = fields.Float("Govt Inc.", digits=(18, 2), required=True, default=0)
    amount_thirteenth_month = fields.Float("13th Month Pay", digits=(18, 2), required=True, default=0)
    amount_incentive_leaves = fields.Float("5 Days Incentive Leave", digits=(18, 2), required=True, default=0)
    amount_supplies = fields.Float("Supplies", digits=(18, 2), required=True, default=0)
    amount_uniform_allowance = fields.Float("Uniform Allowance", digits=(18, 2), required=True, default=0)
    amount_equipment = fields.Float("Equipment", digits=(18, 2), required=True, default=0)
    amount_vat = fields.Float("Value Added Tax", digits=(18, 2), required=True, default=0)

    amount_less_day = fields.Float("Add'l/Less Days", digits=(18, 2), required=True, default=0)
    amount_tardiness_ut = fields.Float("Late/UT", digits=(18, 2), required=True, default=0)
    amount_straight_duty = fields.Float("Straight Duty", digits=(18, 2), required=True, default=0)
    amount_night_diff = fields.Float("Night Differential", digits=(18, 2), required=True, default=0)
    amount_overtime_reqular = fields.Float("OT-Regular", digits=(18, 2), required=True, default=0)
    amount_restday = fields.Float("OT-Rest Day", digits=(18, 2), required=True, default=0)
    amount_overtime_restday = fields.Float("Excess-OT Rest Day", digits=(18, 2), required=True, default=0)
    amount_special_holiday = fields.Float("Special Holiday w/Duty", digits=(18, 2), required=True, default=0)
    amount_overtime_special_holiday = fields.Float("OT-Special Holiday", digits=(18, 2), required=True, default=0)
    amount_legal_holiday = fields.Float("Legal Holiday w/Duty", digits=(18, 2), required=True, default=0)
    amount_overtime_legal_holiday = fields.Float("OT-Legal Holiday", digits=(18, 2), required=True, default=0)
    amount_total = fields.Float("TOTAL", digits=(18, 2), required=True, default=0)
    record_status = fields.Selection(RECORD_STAT, 'Record Status', default = 1)

    is_main_employee = fields.Boolean('Main Employee', compute="checkEmployeeHierarchy")
    sequence_float = fields.Float('Employee Sequence', digits=(18, 2))
    report_type = fields.Integer('Report Type')

    @api.model
    def create(self, vals):
        if (self.parent_employee_id == self.employee_reliever_id) and (self.parent_employee_id == True and  self.employee_reliever_id == True):
            raise ValidationError('Reliever employee is the same with name of emloyee.' + str(self.id))
        new_record = super(BillingMainDetail, self).create(vals)
        return new_record

    @api.one
    def write(self, vals):
        if (self.parent_employee_id == self.employee_reliever_id) and (self.parent_employee_id == True and  self.employee_reliever_id == True):
            raise ValidationError('Reliever employee is the same with name of emloyee.')

        #detail = self.env['billing.detail'].search_count([('parent_employee_id', '=', self.parent_employee_id.id)])

        #if detail == 1:
        #    self.has_a_reliever = False
        super(BillingMainDetail, self).write(vals)
        return True

    @api.one
    def saveReliever(self):
        raise Warning(self.employee_id.name)
        raise Warning(self.billing_main_id)

    @api.onchange('details_less_day')
    def negative_value_lessday(self):
        if len(self.employee_reliever_id) > 0:
            self.details_less_day = self.details_less_day
        else:
            self.details_less_day = self.details_less_day * -1

    @api.one
    def computeEmployeeBilling(self, customer_id = 0, job_id = 0,with_13thmonth =False):
        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', customer_id),
                                                                     ('job_id', '=', job_id)])
        model_workhourtype = self.env['hr.workhourtype']

        hourly_rate = self.employee_id.contract_id.hourly_rate

        total_amount = 0

        #raise Warning(self.record_status)
        if self.record_status == 1:
            if self.billing_main_id.report_format == 1:
                self.amount_contract =model_client_billing_info.monthly_rate/2
                self.amount_allowance =model_client_billing_info.allowance /2
                self.amount_govt_inc = model_client_billing_info.due_to_government
            else:
                self.amount_contract =model_client_billing_info.total_labor_cost/2
                self.amount_allowance =0
                self.amount_govt_inc = 0

            if with_13thmonth == True:
                self.amount_thirteenth_month = model_client_billing_info.thirteenth_month
            self.amount_incentive_leaves = model_client_billing_info.incentive_leaves

            self.amount_less_day =((self.details_less_day * constants.HOURS_PER_DAY) * hourly_rate)
            self.amount_tardiness_ut = (self.details_tardiness_ut * (hourly_rate/60))
            self.amount_straight_duty = self.details_straight_duty * model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate)
            self.amount_night_diff = self.details_night_diff * model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate)
            self.amount_overtime_reqular = self.details_overtime_reqular * model_workhourtype.getAmountRateAmount('ROT',hourly_rate)
            self.amount_restday = self.details_restday * model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate)
            self.amount_overtime_restday = self.details_overtime_restday * model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate)
            self.amount_special_holiday = self.details_special_holiday * model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate)
            self.amount_overtime_special_holiday = self.details_overtime_special_holiday * model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate)
            self.amount_legal_holiday = self.details_legal_holiday * model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate)
            self.amount_overtime_legal_holiday = self.details_legal_holiday * model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate)
            self.record_status = 3

            if len(self.employee_reliever_id) > 0:
                less_days = self.amount_less_day * -1
                late_ut = self.amount_tardiness_ut * -1
                deductions = less_days - late_ut
                net_basic_pay = self.amount_contract + deductions
                self.amount_allowance = 0
                self.amount_govt_inc = 0
                self.amount_thirteenth_month = 0
                self.amount_incentive_leaves = 0
            else:
                less_days = self.amount_less_day
                late_ut = self.amount_tardiness_ut
                deductions = less_days + late_ut
                net_basic_pay = self.amount_contract - deductions

            print net_basic_pay
            if self.billing_main_id.report_format == 1:
                self.amount_overheadcost =(net_basic_pay + \
                                   self.amount_allowance + \
                                   self.amount_thirteenth_month +\
                                   self.amount_incentive_leaves +\
                                   self.amount_straight_duty +\
                                   self.amount_night_diff +\
                                   self.amount_overtime_reqular +\
                                   self.amount_restday +\
                                   self.amount_overtime_restday +\
                                   self.amount_special_holiday +\
                                   self.amount_overtime_special_holiday +\
                                   self.amount_overtime_special_holiday +\
                                   self.amount_legal_holiday +\
                                   self.amount_overtime_legal_holiday) * (model_client_billing_info.overhead_cost/constants.ONE_HUNDRED_PERCENT)
            else:
                self.amount_overheadcost = 0


            if len(self.employee_reliever_id) > 0:
                self.amount_contract = 0
                self.amount_overheadcost = 0

            self.amount_total = self.amount_contract + \
                               (self.amount_less_day - self.amount_tardiness_ut) + \
                               self.amount_allowance + \
                               self.amount_overheadcost +\
                               self.amount_govt_inc +\
                               self.amount_thirteenth_month +\
                               self.amount_incentive_leaves +\
                               self.amount_straight_duty +\
                               self.amount_night_diff +\
                               self.amount_overtime_reqular +\
                               self.amount_restday +\
                               self.amount_overtime_restday +\
                               self.amount_special_holiday +\
                               self.amount_overtime_special_holiday +\
                               self.amount_overtime_special_holiday +\
                               self.amount_legal_holiday +\
                               self.amount_overtime_legal_holiday

            self.parent_employee_id = self.employee_id
            if len(self.employee_reliever_id) > 0:
                update_billing = self.env['billing.detail'].search([('employee_id', '=', self.employee_id.id),
                                                                    ('billing_main_id', '=', self.billing_main_id.id)])
                self.employee_id = None
                self.sequence = None
                self.is_reliever = True
                update_billing.write({'has_a_reliever': True})

            update_billings = self.env['billing.detail'].search([('parent_employee_id', '=', self.parent_employee_id.id),
                                                                  ('billing_main_id', '=', self.billing_main_id.id)])
            get_main_sequence = self.env['billing.detail'].search([('parent_employee_id', '=', self.parent_employee_id.id),
                                                                    ('billing_main_id', '=', self.billing_main_id.id),
                                                                   ('sequence', '<>', 0)])

            for update_billing in update_billings:
                update_billing.write({'employee_sequence': get_main_sequence.sequence})

            get_main_sequence = self.env['billing.detail'].search([('parent_employee_id', '=', self.parent_employee_id.id),
                                                                    ('billing_main_id', '=', self.billing_main_id.id),
                                                                   ('sequence', '=', 0)])
            get_main_sequence.write({'has_a_reliever': False})

            total_amount = self.amount_total
        return total_amount


class BillingBatchReport(models.Model):
    _name = 'billing.batch.report'
    _description = 'Batch Billing Report'

    @api.one
    def _getFilename(self):
        self.filename = 'Client Billing.xls'

    name = fields.Char('Name', default ="Batch Billing Report")
    job_id = fields.Many2one('hr.job', 'Job Title')
    attendance_id = fields.Many2one('hr.attendance.main', 'Attendance', domain = {'attendance_status' : 'approved'})
    report_format = fields.Selection(FORMAT_STR, 'Report Format', default=1)
    report_type = fields.Selection(REPORT_TYPE,'Report Type', required = True)
    group_by = fields.Selection(FORMAT_GROUP_BY, 'Group By', default=1)

    billing_month_of = fields.Selection(constants.MONTH_SELECTION, 'for the Month of', reguired = True)
    billing_month_quarter = fields.Selection(constants.MONTH_QUARTER_SELECTION, required = True)

    filename = fields.Char('file name', readonly = True,store = False,compute ='_getFilename')
    billing_file = fields.Binary('Excel File')

    customer_id = fields.Many2one('res.customers.main', 'Company', required = True)
    customer_branches_id = fields.Many2one('res.customer.branches', 'Branches')

    @api.one
    def generateReport2(self):
        self.billing_file = None
        if len(self.job_id) > 0 and len(self.customer_branches_id) == 0:
            raise Warning("Select first the Branch before generating the report.")

        if self.report_type  == 1:
            if self.report_format == BREAK_DOWN_REPORT:
                self.ReportBreakDown_Merge()
            elif self.report_format == NON_BREAK_DOWN_REPORT:
                self.NonReportBreakdown_Merge()
            else:
                self.DailyBreakdownReport_Merge()
        else:
            if self.report_format == BREAK_DOWN_REPORT:
                self.ReportBreakDown()
            elif self.report_format == NON_BREAK_DOWN_REPORT:
                self.NonReportBreakdown()
            else:
                self.DailyBreakdownReport()

    @api.one
    def generateReport(self):

        if len(self.job_id) > 0 and len(self.customer_branches_id) == 0:
            raise Warning("Select first the Branch before generating the report.")

        styleTitleFrom =xlwt.XFStyle()
        styleTitleTo =xlwt.XFStyle()
        styleTitleRe =xlwt.XFStyle()
        styleTitleDetails =xlwt.XFStyle()
        styleTitleAmount =xlwt.XFStyle()
        styleColumns =xlwt.XFStyle()
        styleData =xlwt.XFStyle()
        styleBottom_in_name = xlwt.XFStyle()
        styleFooter = xlwt.XFStyle()
        styleBottom =xlwt.XFStyle()
        styleLeft=xlwt.XFStyle()
        styleBottomLeft =xlwt.XFStyle()
        styleBottomRight=xlwt.XFStyle()

        #Alignment Center
        alignment = xlwt.Alignment()
        alignment.horz = xlwt.Alignment.HORZ_CENTER
        alignment.vert = xlwt.Alignment.VERT_CENTER
        alignment.Wrap = 1
        styleColumns.alignment = alignment
        styleColumns.alignment.wrap = 1
        styleColumns.num_format_str= "###,##0.00"

        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        styleTitleDetails.borders = border
        styleTitleAmount.borders = border
        styleColumns.borders = border

        #border Data
        borderdata = xlwt.Borders()
        borderdata.bottom = xlwt.Borders.NO_LINE
        borderdata.top = xlwt.Borders.NO_LINE
        borderdata.left = xlwt.Borders.THIN
        borderdata.right = xlwt.Borders.THIN

        borderdataBottom = xlwt.Borders()
        borderdataBottom.bottom = xlwt.Borders.THIN
        borderdataBottom.top = xlwt.Borders.NO_LINE
        borderdataBottom.left = xlwt.Borders.THIN
        borderdataBottom.right = xlwt.Borders.THIN

        borderLeft = xlwt.Borders()
        borderLeft.bottom = xlwt.Borders.NO_LINE
        borderLeft.top = xlwt.Borders.NO_LINE
        borderLeft.left = xlwt.Borders.THIN
        borderLeft.right = xlwt.Borders.NO_LINE

        borderdataBottomLeft = xlwt.Borders()
        borderdataBottomLeft.bottom = xlwt.Borders.THIN
        borderdataBottomLeft.top = xlwt.Borders.NO_LINE
        borderdataBottomLeft.left = xlwt.Borders.THIN
        borderdataBottomLeft.right = xlwt.Borders.NO_LINE

        borderBottom_in_name = xlwt.Borders()
        borderBottom_in_name.bottom = xlwt.Borders.THIN
        borderBottom_in_name.top = xlwt.Borders.NO_LINE
        borderBottom_in_name.left = xlwt.Borders.NO_LINE
        borderBottom_in_name.right = xlwt.Borders.NO_LINE

        styleBottomLeft.borders = borderdataBottomLeft
        styleLeft.borders = borderLeft
        styleData.borders = borderdata
        styleBottom.borders = borderdataBottom
        styleBottom_in_name.borders = borderBottom_in_name

        styleData.num_format_str = '#,##0.00'
        styleFooter.num_format_str = '#,##0.00'
        #font
        font = xlwt.Font()
        font.name = 'Arial'
        font.height =120


        model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', self.customer_id.id),
                                                                     ('job_id', '=', self.job_id.id)])

        #Creation of Excel File
        workbook = xlwt.Workbook()
        sheet = workbook.add_sheet("Billing - Batch", True)


        #Get Company Information
        company = self.env['res.company'].search([('id','=',1)])

        total_amount = 0
        intRow = 6
        if self.report_format == 1:
            if len(self.customer_branches_id) > 0:
                model_cust_branches = self.env['res.customer.branches'].search([('customer_info','=', self.customer_branches_id.id),
                                                                                ('main_detail_id.customer_info','=', self.customer_id.id)])
            else:
                model_cust_branches = self.env['res.customer.branches'].search([('main_detail_id.customer_info','=', self.customer_id.id)])

            for branch in model_cust_branches:
                billing_details = self.env['billing.detail'].sorted(key = lambda r: r.employee_id.last_name)
                if len(self.job_id) > 0:
                    billing_detail = billing_details.search([('employee_id.job_id', '=', self.job_id.id),
                                                             ('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                             ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter)])

                else:
                    billing_detail = billing_details.search([('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                             ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter)])

            # Main Customer
            model_customers = self.env['res.customers.main'].search([('id','=', self.customer_id.id)])

            #Per Branch
            if len(self.customer_branches_id) > 0:
                model_branch = model_customers.search([('main_cust_id.customer_info', '=', self.customer_branches_id.id)])
            else:
                model_branch = model_customers.search([])

            model_brans =  self.env['res.customer.branches'].search([('main_detail_id', 'in', model_branch.ids)])
            #raise Warning(self.customer_id.id)
            model_brans =  self.env['res.customer.branches'].search([('main_detail_id', 'in', model_branch.ids)])

            #Per Jobs
            lst_ids = []
            for customer in model_brans:
                lst_ids.append(customer.customer_info.id)

            if len(self.job_id) > 0:
                model_cust_project = self.env['res.customer.setup'].search([('job_id','=', self.job_id),('customer_id.id', 'in', lst_ids)])
            else:
                model_cust_project = self.env['res.customer.setup'].search([('customer_id.id', 'in', lst_ids)])
            #raise Warning(model_cust_project)

            intRow = 1
            for projects in model_cust_project.sorted(key = lambda r: r.job_id.name):

                billing_details = self.env['billing.detail'].sorted(key = lambda r: r.employee_id.last_name)
                billing_detail = billing_details.search([('billing_main_id.job_id', '=', projects.job_id.id),
                                                         ('billing_main_id.customer_id', '=', projects.customer_id.id),
                                                         ('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                         ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter)])
                billing_main = self.env['billing.main'].search([('customer_id', '=',projects.customer_id.id),
                                                                ('attendance_id.month_of', '=',self.billing_month_of),
                                                                ('attendance_id.month_quarter', '=',self.billing_month_quarter),
                                                                ('job_id', '=', projects.job_id.id)])

                if len(billing_detail) > 0:
                    style0 = xlwt.easyxf('font: name Arial, color-index red, bold on')
                    sheet.write(intRow,1,"FR :",styleTitleFrom)

                    sheet.write(intRow,2,company.name,styleTitleFrom)
                    intRow+=1
                    sheet.write(intRow,1,"TO :",styleTitleTo)
                    sheet.write(intRow,2,billing_main.customer_id.name,styleTitleRe)
                    intRow+=1

                    sheet.write(intRow,1,"RE :",styleTitleRe)
                    sheet.write(intRow,2,"BILLING - " + str(billing_main.attendance_id.schedule_datefrom) + ' - ' \
                                + str(billing_main.attendance_id.schedule_dateto),styleTitleRe)
                    intRow +=1
                    sheet.write_merge(intRow,intRow,6,13,projects.job_id.name  ,style0)
                    intRow +=3
                    sheet.write_merge(intRow,intRow, 1,15, "DETAILS", styleColumns)
                    sheet.write_merge(intRow,intRow, 16,33, "AMOUNT", styleColumns)

                    intRow +=1
                    sheet.write_merge(intRow ,intRow  + 6, 1,4, "Name of Employee", styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5, 5,5, "Add'l/Less Days", styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,6,6,"Late/UT",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,7,7,"Straight Duty",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,8,8,"Night Diff.",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,9,9,"OT - Regular",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,10,10,"OT - Rest Day",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,11,11,"Excess OT - Rest Day",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,12,12,"Special Holiday w/ Duty",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,13,13,"OT - Special Holiday",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,14,14,"Legal Holiday w/ Duty",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,15,15,"OT - Legal Holiday",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,16,16,"Contract Amount",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,17,17,"Add'l Less Days",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,18,18,"Late/UT",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,19,19,"Straight Duty",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,20,20,"Night Diff.",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,21,21,"OT - Regular",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,22,22,"OT - Rest Day",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,23,23,"Excess OT - Rest Day",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,24,24,"Special Holiday w/ Duty",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,25,25,"OT - Special Holiday",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,26,26,"Legal Holiday w/ Duty",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,27,27,"OT - Legal Holiday",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,28,28,"13th Month Pay",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,29,29,"5 Days Incentive Leave",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,30,30,"Allowance",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,31,31,"Overhead Cost",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,32,32,"Govt Inc.",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 6,33,33,"Total",styleColumns)

                    intRow +=6
                    sheet.write(intRow,5,"(days)",styleColumns)
                    sheet.write(intRow,6,"(mins)",styleColumns)
                    sheet.write(intRow,7,"(hrs)",styleColumns)
                    sheet.write(intRow,8,"(hrs)",styleColumns)
                    sheet.write(intRow,9,"(hrs)",styleColumns)
                    sheet.write(intRow,10,"(hrs)",styleColumns)
                    sheet.write(intRow,11,"(hrs)",styleColumns)
                    sheet.write(intRow,12,"(hrs)",styleColumns)
                    sheet.write(intRow,13,"(hrs)",styleColumns)
                    sheet.write(intRow,14,"(hrs)",styleColumns)
                    sheet.write(intRow,15,"(hrs)",styleColumns)
                    sheet.write(intRow,16,"(per mo.)",styleColumns)
                    sheet.write(intRow,17,"(per day)",styleColumns)
                    sheet.write(intRow,18,"(per min)",styleColumns)
                    sheet.write(intRow,19,"(per hr)",styleColumns)
                    sheet.write(intRow,20,"(per hr)",styleColumns)
                    sheet.write(intRow,21,"(per hr)",styleColumns)
                    sheet.write(intRow,22,"(per hr)",styleColumns)
                    sheet.write(intRow,23,"(per hr)",styleColumns)
                    sheet.write(intRow,24,"(per hr)",styleColumns)
                    sheet.write(intRow,25,"(per hr)",styleColumns)
                    sheet.write(intRow,26,"(per hr)",styleColumns)
                    sheet.write(intRow,27,"(per hr)",styleColumns)
                    sheet.write(intRow,28,"(pesos)",styleColumns)
                    sheet.write(intRow,29,"(pesos)",styleColumns)
                    sheet.write(intRow,30,"(pesos)",styleColumns)
                    sheet.write(intRow,31,"(pesos)",styleColumns)
                    sheet.write(intRow,32,"(pesos)",styleColumns)


                    #Amount Details Columns
                    model_workhourtype = self.env['hr.workhourtype']
                    model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', projects.customer_id.id),
                                                                                 ('job_id', '=', projects.job_id.id)
                                                                                 ])
                    daily_rate  = (model_client_billing_info.total_labor_cost * constants.MONTHS_IN_YEAR) / (constants.WEEKS_IN_YEAR * constants.WORK_IN_WEEK)
                    hourly_rate = daily_rate / constants.HOURS_PER_DAY

                    intRow -=1

                    sheet.write(intRow,16,round(model_client_billing_info.monthly_rate/2,2), styleColumns)
                    sheet.write(intRow,17,round(daily_rate,2) ,styleColumns)
                    sheet.write(intRow,18,round(hourly_rate/constants.MINUTES,2),styleColumns)
                    sheet.write(intRow,19,round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),2),styleColumns)
                    sheet.write(intRow,20,round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),2),styleColumns)
                    sheet.write(intRow,21,round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate),2),styleColumns)
                    sheet.write(intRow,22,round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),styleColumns)
                    sheet.write(intRow,23,round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),styleColumns)
                    sheet.write(intRow,24,round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),2),styleColumns)
                    sheet.write(intRow,25,round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),2),styleColumns)
                    sheet.write(intRow,26,round(model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),2),styleColumns)
                    sheet.write(intRow,27,round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),styleColumns)
                    sheet.write(intRow,28,model_client_billing_info.thirteenth_month,styleColumns)
                    sheet.write(intRow,29,model_client_billing_info.total_labor_cost/2,styleColumns)
                    sheet.write(intRow,30,model_client_billing_info.allowance/2,styleColumns)
                    sheet.write(intRow,31,model_client_billing_info.overhead_cost,styleColumns)
                    sheet.write(intRow,32,model_client_billing_info.due_to_government,styleColumns)

                    intRow +=2

                    sheet.write(intRow,1,"",styleLeft)

                    for i in range(5,34):
                        sheet.write(intRow,i,"",styleData)

                    intRow +=1
                    for employee in billing_detail:
                        fontData = xlwt.Font()
                        styleEmployeeName = xlwt.XFStyle()
                        #To Check if Employee has a reliever or not
                        if employee.has_a_reliever == True:
                            fontData.colour_index = 0x0A
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                        elif employee.is_reliever == True:
                            fontData.colour_index = 0x0C
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, "", styleLeft)
                            sheet.write(intRow, 2, "**",styleEmployeeName)
                            sheet.write(intRow, 3, employee.employee_reliever_id.name,styleEmployeeName)
                        else:
                            fontData.colour_index = 0x08
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                        sheet.write(intRow,5,employee.details_less_day,styleData)
                        sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                        sheet.write(intRow,7,employee.details_straight_duty,styleData)
                        sheet.write(intRow,8,employee.details_night_diff,styleData)
                        sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                        sheet.write(intRow,10,employee.details_restday,styleData)
                        sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                        sheet.write(intRow,12,employee.details_special_holiday,styleData)
                        sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                        sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                        sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)

                        sheet.write(intRow,16,employee.amount_contract,styleData)
                        sheet.write(intRow,17,employee.amount_less_day,styleData)
                        sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)
                        sheet.write(intRow,19,employee.amount_straight_duty,styleData)
                        sheet.write(intRow,20,employee.amount_night_diff,styleData)
                        sheet.write(intRow,21,employee.amount_overtime_reqular,styleData)
                        sheet.write(intRow,22,employee.amount_restday,styleData)
                        sheet.write(intRow,23,employee.amount_overtime_restday,styleData)
                        sheet.write(intRow,24,employee.amount_special_holiday,styleData)
                        sheet.write(intRow,25,employee.amount_overtime_special_holiday,styleData)
                        sheet.write(intRow,26,employee.amount_legal_holiday,styleData)
                        sheet.write(intRow,27,employee.amount_legal_holiday,styleData)
                        sheet.write(intRow,28,employee.amount_thirteenth_month,styleData)
                        sheet.write(intRow,29,employee.amount_incentive_leaves,styleData)
                        sheet.write(intRow,30,employee.amount_allowance,styleData)
                        sheet.write(intRow,31,employee.amount_overheadcost,styleData)
                        sheet.write(intRow,32,employee.amount_govt_inc,styleData)
                        sheet.write(intRow,33,employee.amount_total,styleData)
                        total_amount +=employee.amount_total
                        intRow +=1

                    sheet.write(intRow,1,"",styleBottomLeft)
                    sheet.write(intRow,2,"",styleBottom_in_name)
                    sheet.write(intRow,3,"",styleBottom_in_name)
                    sheet.write(intRow,4,"",styleBottom_in_name)


                    for intRowBottom in range(5,34):
                        sheet.write(intRow,intRowBottom,"",styleBottom)
                    intRow +=1

                    #Footer and Data
                    sheet.write(intRow,29,"Subtotal ")
                    sheet.write_merge(intRow,intRow,31,33,total_amount,styleFooter)
                    intRow +=1

                    sheet.write_merge(intRow,intRow,29,30,"Add : Supplies ")
                    sheet.write_merge(intRow,intRow,31,33,projects.supplies,styleFooter)
                    intRow +=1

                    subtotal_amount2 = total_amount + projects.supplies
                    sheet.write(intRow,29,"Subtotal ")
                    sheet.write_merge(intRow,intRow,31,33,subtotal_amount2,styleFooter)
                    intRow +=1
                    if projects.is_project_vatable == True:
                        vat = 0
                    else:
                        vat = subtotal_amount2 * .012
                    sheet.write_merge(intRow,intRow,29,30,"Add : 12% VAT ")
                    sheet.write_merge(intRow,intRow,31,33,vat,styleFooter)
                    intRow +=2
                    grandtotal_amount = subtotal_amount2 + vat

                    sheet.write_merge(intRow,intRow,29,30,"GRAND TOTAL ")
                    sheet.write_merge(intRow,intRow,31,33,grandtotal_amount,styleFooter)
                    intRow +=10
        else:

            if len(self.customer_branches_id) > 0:
                model_cust_branches = self.env['res.customer.branches'].search([('customer_info','=', self.customer_branches_id.id),
                                                                                ('main_detail_id.customer_info','=', self.customer_id.id)])
            else:
                model_cust_branches = self.env['res.customer.branches'].search([('main_detail_id.customer_info','=', self.customer_id.id)])


            for branch in model_cust_branches:
                billing_details = self.env['billing.detail'].sorted(key = lambda r: r.employee_id.last_name)
                if len(self.job_id) > 0:
                    billing_detail = billing_details.search([('employee_id.job_id', '=', self.job_id.id),
                                                             ('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                             ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter)])

                else:
                    billing_detail = billing_details.search([('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                             ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter)])

            # Main Customer
            model_customers = self.env['res.customers.main'].search([('id','=', self.customer_id.id)])

            #Per Branch
            if len(self.customer_branches_id) > 0:
                model_branch = model_customers.search([('main_cust_id.customer_info', '=', self.customer_branches_id.id)])
            else:
                model_branch = model_customers.search([])

            model_brans =  self.env['res.customer.branches'].search([('main_detail_id', 'in', model_branch.ids)])
            #Per Jobs
            lst_ids = []
            for customer in model_brans:
                lst_ids.append(customer.customer_info.id)

            if len(self.job_id) > 0:
                model_cust_project = self.env['res.customer.setup'].search([('job_id','=', self.job_id),
                                                                            ('customer_id.id', 'in', lst_ids)])
            else:
                model_cust_project = self.env['res.customer.setup'].search([('customer_id.id', 'in', lst_ids)])

            intRow = 1
            for projects in model_cust_project.sorted(key = lambda r: r.job_id.name):

                billing_details = self.env['billing.detail'].sorted(key = lambda r: r.employee_id.last_name)
                billing_detail = billing_details.search([('billing_main_id.job_id', '=', projects.job_id.id),
                                                         ('billing_main_id.customer_id', '=', projects.customer_id.id),
                                                         ('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                         ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter)])
                billing_main = self.env['billing.main'].search([('customer_id', '=',projects.customer_id.id),
                                                                ('attendance_id.month_of', '=',self.billing_month_of),
                                                                ('attendance_id.month_quarter', '=',self.billing_month_quarter),
                                                                ('job_id', '=', projects.job_id.id)])

                if len(billing_detail) > 0:
                    style0 = xlwt.easyxf('font: name Arial, color-index red, bold on')
                    sheet.write(intRow,1,"FR :",styleTitleFrom)

                    sheet.write(intRow,2,company.name,styleTitleFrom)
                    intRow+=1
                    sheet.write(intRow,1,"TO :",styleTitleTo)
                    sheet.write(intRow,2,billing_main.customer_id.name,styleTitleRe)
                    intRow+=1

                    sheet.write(intRow,1,"RE :",styleTitleRe)
                    sheet.write(intRow,2,"BILLING - " + str(billing_main.attendance_id.schedule_datefrom) + ' - ' \
                                + str(billing_main.attendance_id.schedule_dateto),styleTitleRe)
                    intRow +=1
                    sheet.write_merge(intRow,intRow,6,13,projects.job_id.name  ,style0)
                    intRow +=3
                    sheet.write_merge(intRow,intRow, 1,15, "DETAILS", styleColumns)
                    sheet.write_merge(intRow,intRow, 16,19, "AMOUNT", styleColumns)

                    intRow +=1
                    sheet.write_merge(intRow ,intRow  + 6, 1,4, "Name of Employee", styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5, 5,5, "Add'l/Less Days", styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,6,6,"Late/UT",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,7,7,"Straight Duty",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,8,8,"Night Diff.",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,9,9,"OT - Regular",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,10,10,"OT - Rest Day",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,11,11,"Excess OT - Rest Day",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,12,12,"Special Holiday w/ Duty",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,13,13,"OT - Special Holiday",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,14,14,"Legal Holiday w/ Duty",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 5,15,15,"OT - Legal Holiday",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,16,16,"Contract Amount",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,17,17,"Add'l Less Days",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 4,18,18,"Late/UT",styleColumns)
                    sheet.write_merge(intRow ,intRow  + 6,19,19,"Total",styleColumns)

                    intRow +=6
                    sheet.write(intRow,5,"(days)",styleColumns)
                    sheet.write(intRow,6,"(mins)",styleColumns)
                    sheet.write(intRow,7,"(hrs)",styleColumns)
                    sheet.write(intRow,8,"(hrs)",styleColumns)
                    sheet.write(intRow,9,"(hrs)",styleColumns)
                    sheet.write(intRow,10,"(hrs)",styleColumns)
                    sheet.write(intRow,11,"(hrs)",styleColumns)
                    sheet.write(intRow,12,"(hrs)",styleColumns)
                    sheet.write(intRow,13,"(hrs)",styleColumns)
                    sheet.write(intRow,14,"(hrs)",styleColumns)
                    sheet.write(intRow,15,"(hrs)",styleColumns)
                    sheet.write(intRow,16,"(per mo.)",styleColumns)
                    sheet.write(intRow,17,"(per day)",styleColumns)
                    sheet.write(intRow,18,"(per min)",styleColumns)


                    #Amount Details Columns
                    model_workhourtype = self.env['hr.workhourtype']
                    model_client_billing_info = self.env['res.customer.setup'].search([('customer_id', '=', projects.customer_id.id),
                                                                                 ('job_id', '=', projects.job_id.id)
                                                                                 ])
                    daily_rate  = (model_client_billing_info.total_labor_cost * constants.MONTHS_IN_YEAR) / (constants.WEEKS_IN_YEAR * constants.WORK_IN_WEEK)
                    hourly_rate = daily_rate / constants.HOURS_PER_DAY

                    intRow -=1

                    sheet.write(intRow,16,model_client_billing_info.total_labor_cost/2, styleColumns)
                    sheet.write(intRow,17,daily_rate ,styleColumns)
                    sheet.write(intRow,18,hourly_rate/constants.MINUTES,styleColumns)
                    intRow +=2

                    sheet.write(intRow,1,"",styleLeft)

                    for i in range(5,20):
                        sheet.write(intRow,i,"",styleData)

                    intRow +=1
                    for employee in billing_detail:
                        fontData = xlwt.Font()
                        styleEmployeeName = xlwt.XFStyle()
                        #To Check if Employee has a reliever or not
                        if employee.has_a_reliever == True:
                            fontData.colour_index = 0x0A
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                        elif employee.is_reliever == True:
                            fontData.colour_index = 0x0C
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, "", styleLeft)
                            sheet.write(intRow, 2, "**",styleEmployeeName)
                            sheet.write(intRow, 3, employee.employee_reliever_id.name,styleEmployeeName)
                        else:
                            fontData.colour_index = 0x08
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                        sheet.write(intRow,5,employee.details_less_day,styleData)
                        sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                        sheet.write(intRow,7,employee.details_straight_duty,styleData)
                        sheet.write(intRow,8,employee.details_night_diff,styleData)
                        sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                        sheet.write(intRow,10,employee.details_restday,styleData)
                        sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                        sheet.write(intRow,12,employee.details_special_holiday,styleData)
                        sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                        sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                        sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)
                        sheet.write(intRow,16,employee.amount_contract,styleData)
                        sheet.write(intRow,17,employee.amount_less_day,styleData)
                        sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)
                        sheet.write(intRow,19,employee.amount_total,styleData)
                        total_amount +=employee.amount_total
                        intRow +=1

                    sheet.write(intRow,1,"",styleBottomLeft)
                    sheet.write(intRow,2,"",styleBottom_in_name)
                    sheet.write(intRow,3,"",styleBottom_in_name)
                    sheet.write(intRow,4,"",styleBottom_in_name)

                    for intRowBottom in range(5,20):
                        sheet.write(intRow,intRowBottom,"",styleBottom)
                    intRow +=1

                    #Footer and Data
                    sheet.write(intRow,15,"Subtotal ")
                    sheet.write_merge(intRow,intRow,17,19,total_amount,styleFooter)
                    intRow +=1

                    sheet.write_merge(intRow,intRow,15,16,"Add : Supplies ")
                    sheet.write_merge(intRow,intRow,17,19,projects.supplies,styleFooter)
                    intRow +=1

                    subtotal_amount2 = total_amount + projects.supplies
                    sheet.write(intRow,15,"Subtotal ")
                    sheet.write_merge(intRow,intRow,17,19,subtotal_amount2,styleFooter)
                    intRow +=1
                    if projects.is_project_vatable == True:
                        vat = 0
                    else:
                        vat = subtotal_amount2 * .012
                    sheet.write_merge(intRow,intRow,15,16,"Add : 12% VAT ")
                    sheet.write_merge(intRow,intRow,17,19,vat,styleFooter)
                    intRow +=2
                    grandtotal_amount = subtotal_amount2 + vat

                    sheet.write_merge(intRow,intRow,15,16,"GRAND TOTAL ")
                    sheet.write_merge(intRow,intRow,18,19,grandtotal_amount,styleFooter)
                    intRow +=10

        fp = StringIO()
        workbook.save(fp)
        fp.seek(0)
        data = fp.read()
        fp.close()
        byte_arr = base64.b64encode(data)
        self.billing_file = byte_arr

    @api.one
    def ReportBreakDown(self):

        #Excel File Generation
        if self.job_id.name == False:
            job_name = ""
        else:
            job_name =self.job_id.name

        workbook = xlwt.Workbook()
        sheet = workbook.add_sheet("Billing - " + job_name, True)

        styleTitleFrom =xlwt.XFStyle()
        styleTitleTo =xlwt.XFStyle()
        styleTitleRe =xlwt.XFStyle()
        styleTitleDetails =xlwt.XFStyle()
        styleTitleAmount =xlwt.XFStyle()
        styleColumns =xlwt.XFStyle()
        styleData =xlwt.XFStyle()
        styleBottom_in_name = xlwt.XFStyle()
        styleFooter = xlwt.XFStyle()
        styleBottom =xlwt.XFStyle()
        styleLeft=xlwt.XFStyle()
        styleBottomLeft =xlwt.XFStyle()
        styleBottomRight=xlwt.XFStyle()

        #Alignment Center
        alignment = xlwt.Alignment()
        alignment.horz = xlwt.Alignment.HORZ_CENTER
        alignment.vert = xlwt.Alignment.VERT_CENTER
        alignment.Wrap = 1
        styleColumns.alignment = alignment
        styleColumns.alignment.wrap = 1
        styleColumns.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'


        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        styleTitleDetails.borders = border
        styleTitleAmount.borders = border
        styleColumns.borders = border

        #border Data
        borderdata = xlwt.Borders()
        borderdata.bottom = xlwt.Borders.NO_LINE
        borderdata.top = xlwt.Borders.NO_LINE
        borderdata.left = xlwt.Borders.THIN
        borderdata.right = xlwt.Borders.THIN

        borderdataBottom = xlwt.Borders()
        borderdataBottom.bottom = xlwt.Borders.THIN
        borderdataBottom.top = xlwt.Borders.NO_LINE
        borderdataBottom.left = xlwt.Borders.THIN
        borderdataBottom.right = xlwt.Borders.THIN

        borderLeft = xlwt.Borders()
        borderLeft.bottom = xlwt.Borders.NO_LINE
        borderLeft.top = xlwt.Borders.NO_LINE
        borderLeft.left = xlwt.Borders.THIN
        borderLeft.right = xlwt.Borders.NO_LINE

        borderdataBottomLeft = xlwt.Borders()
        borderdataBottomLeft.bottom = xlwt.Borders.THIN
        borderdataBottomLeft.top = xlwt.Borders.NO_LINE
        borderdataBottomLeft.left = xlwt.Borders.THIN
        borderdataBottomLeft.right = xlwt.Borders.NO_LINE

        borderBottom_in_name = xlwt.Borders()
        borderBottom_in_name.bottom = xlwt.Borders.THIN
        borderBottom_in_name.top = xlwt.Borders.NO_LINE
        borderBottom_in_name.left = xlwt.Borders.NO_LINE
        borderBottom_in_name.right = xlwt.Borders.NO_LINE

        styleBottomLeft.borders = borderdataBottomLeft
        styleLeft.borders = borderLeft
        styleData.borders = borderdata
        styleBottom.borders = borderdataBottom
        styleBottom_in_name.borders = borderBottom_in_name

        styleData.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleLeft.num_format_str = '00'
        #font
        font = xlwt.Font()
        font.name = 'Arial'
        font.height =120

        #Creation of Position Background Colour
        xlwt.add_palette_colour("custom_colour", 0x21)
        workbook.set_colour_RGB(0x21,  196, 215, 155)

        subtotal_color = xlwt.XFStyle()
        pattern = xlwt.Pattern()
        pattern.pattern = xlwt.Pattern.SOLID_PATTERN
        pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
        subtotal_color.pattern = pattern

        job_background_color = xlwt.easyxf('pattern: pattern solid, fore_colour custom_colour')
        job_background_color.alignment = alignment
        job_background_color.alignment.wrap = 1
        job_background_color.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'

        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        job_background_color.borders = border
        job_background_color.font.bold =True



        dict_filter = [('main_detail_id','=', self.customer_id.id)]
        #Search Branches in Selected Company
        if len(self.customer_branches_id) > 0:
            dict_filter.append(('id', '=', self.customer_branches_id.id))

        model_cust_branches = self.env['res.customer.branches'].search(dict_filter)
        sub_total_amount = 0

        intRow = 1

        for cust_branch in model_cust_branches:

            int_project_total_less_day = 0
            int_project_total_tardiness = 0
            curr_total_project_straight_duty = 0
            curr_total_project_night_diff = 0
            curr_total_project_overtime_regular = 0
            curr_total_project_restday = 0
            curr_total_project_overtime_restday = 0
            curr_total_project_special_holiday = 0
            curr_total_project_overtime_special_holiday = 0
            curr_total_project_legal_holiday = 0
            curr_total_project_overtime_legal_holiday = 0
            curr_total_project_amount_contract = 0
            curr_total_project_amount_less_day = 0
            curr_total_project_amount_tardiness_ut = 0
            curr_total_project_amount_night_diff = 0
            curr_total_project_amount_straight_duty = 0
            curr_total_project_amount_overtime_reqular = 0
            curr_total_project_amount_restday = 0
            curr_total_project_amount_overtime_restday = 0
            curr_total_project_amount_amount_special_holiday = 0
            curr_total_project_amount_overtime_special_holiday = 0
            curr_total_project_amount_legal_holiday = 0
            curr_total_project_amount_overtime_legal_holiday = 0
            curr_total_project_amount_thirteenth_month = 0
            curr_total_project_amount_incentive_leaves = 0
            curr_total_project_amount_allowance = 0
            curr_total_project_amount_overheadcost = 0
            curr_total_project_amount_govt_inc = 0
            curr_total_project_amount_total = 0
            curr_total_project_amount_supplies = 0
            curr_total_project_amount_uniform_allowance = 0
            curr_total_project_amount_equipment  = 0

            #Get Company Information
            company = self.env['res.company'].search([('id','=',1)])

            sheet.write(intRow,1,"FR :",styleTitleFrom)
            sheet.write(intRow,2,company.name,styleTitleFrom)
            intRow +=1
            sheet.write(intRow,1,"TO :",styleTitleTo)
            sheet.write(intRow,2,cust_branch.name,styleTitleRe)
            intRow +=1
            intRow_RE = intRow
            sheet.write(intRow,1,"RE :",styleTitleRe)
            intRow +=2
            sheet.write_merge(intRow,intRow, 1,15, "DETAILS", styleColumns)
            sheet.write_merge(intRow,intRow, 16,36, "AMOUNT", styleColumns)
            intRow +=1
            #Columns
            sheet.write_merge(intRow,intRow+6, 1,4, "Name of Employee", styleColumns)
            sheet.write_merge(intRow,intRow+5, 5,5, "Add'l/Less Days", styleColumns)
            sheet.write_merge(intRow,intRow+5,6,6,"Late/UT",styleColumns)
            sheet.write_merge(intRow,intRow+5,7,7,"Straight Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,8,8,"Night Diff.",styleColumns)
            sheet.write_merge(intRow,intRow+5,9,9,"OT - Regular",styleColumns)
            sheet.write_merge(intRow,intRow+5,10,10,"OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,11,11,"Excess OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,12,12,"Special Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,13,13,"OT - Special Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,14,14,"Legal Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,15,15,"OT - Legal Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,16,16,"Contract Amount",styleColumns)
            sheet.write_merge(intRow,intRow+5,17,17,"Add'l Less Days",styleColumns)
            sheet.write_merge(intRow,intRow+5,18,18,"Late/UT",styleColumns)
            sheet.write_merge(intRow,intRow+5,19,19,"Night Diff",styleColumns)
            sheet.write_merge(intRow,intRow+5,20,20,"Straight Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,21,21,"OT - Regular",styleColumns)
            sheet.write_merge(intRow,intRow+5,22,22,"OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,23,23,"Excess OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,24,24,"Special Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,25,25,"OT - Special Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,26,26,"Legal Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,27,27,"OT - Legal Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,28,28,"13th Month Pay",styleColumns)
            sheet.write_merge(intRow,intRow+5,29,29,"5 Days Incentive Leave",styleColumns)
            sheet.write_merge(intRow,intRow+5,30,30,"Allowance",styleColumns)
            sheet.write_merge(intRow,intRow+5,31,31,"Overhead Cost",styleColumns)
            sheet.write_merge(intRow,intRow+5,32,32,"Govt Inc.",styleColumns)

            sheet.write_merge(intRow,intRow+5,33,33,"Supplies",styleColumns)
            sheet.write_merge(intRow,intRow+5,34,34,"Uniform Allowance",styleColumns)
            sheet.write_merge(intRow,intRow+5,35,35,"Equipment",styleColumns)

            sheet.write_merge(intRow,intRow+6,36,36,"Total",styleColumns)

            intRow += 6
            #Days/per hours
            sheet.write(intRow,5,"(days)",styleColumns)
            sheet.write(intRow,6,"(mins)",styleColumns)
            sheet.write(intRow,7,"(hrs)",styleColumns)
            sheet.write(intRow,8,"(hrs)",styleColumns)
            sheet.write(intRow,9,"(hrs)",styleColumns)
            sheet.write(intRow,10,"(hrs)",styleColumns)
            sheet.write(intRow,11,"(hrs)",styleColumns)
            sheet.write(intRow,12,"(hrs)",styleColumns)
            sheet.write(intRow,13,"(hrs)",styleColumns)
            sheet.write(intRow,14,"(hrs)",styleColumns)
            sheet.write(intRow,15,"(hrs)",styleColumns)
            sheet.write(intRow,16,"(per mo.)",styleColumns)
            sheet.write(intRow,17,"(per day)",styleColumns)
            sheet.write(intRow,18,"(per min)",styleColumns)
            sheet.write(intRow,19,"(per hr)",styleColumns)
            sheet.write(intRow,20,"(per hr)",styleColumns)
            sheet.write(intRow,21,"(per hr)",styleColumns)
            sheet.write(intRow,22,"(per hr)",styleColumns)
            sheet.write(intRow,23,"(per hr)",styleColumns)
            sheet.write(intRow,24,"(per hr)",styleColumns)
            sheet.write(intRow,25,"(per hr)",styleColumns)
            sheet.write(intRow,26,"(per hr)",styleColumns)
            sheet.write(intRow,27,"(per hr)",styleColumns)
            sheet.write(intRow,28,"(pesos)",styleColumns)
            sheet.write(intRow,29,"(pesos)",styleColumns)
            sheet.write(intRow,30,"(pesos)",styleColumns)
            sheet.write(intRow,31,"(pesos)",styleColumns)
            sheet.write(intRow,32,"(pesos)",styleColumns)

            sheet.write(intRow,33,"(pesos)",styleColumns)
            sheet.write(intRow,34,"(pesos)",styleColumns)
            sheet.write(intRow,35,"(pesos)",styleColumns)



            #Getting the Parameters Per Job Postion
            dict_filter =[]
            dict_filter = [('customer_id','=', cust_branch.customer_info.id)]
            if len(self.job_id)>0:
                dict_filter.append(('job_id','=', self.job_id.id))

            model_workhourtype = self.env['hr.workhourtype']
            model_client_billing_info = self.env['res.customer.setup'].search(dict_filter)
            #intRow += 1

            for project_setup in model_client_billing_info:
                intRow +=1
                sheet.write_merge(intRow,intRow, 1,4, project_setup.job_id.name, job_background_color)
                for i in range(5,37):
                    sheet.write(intRow,i,"",job_background_color)

                #SETUP PROJECT INFORMATION
                if project_setup.factor_days > 0:
                    monthly_cost = (project_setup.daily_rate * project_setup.factor_days) / constants.MONTHS_IN_YEAR
                    daily_rate = project_setup.daily_rate
                else:
                    monthly_cost = 0
                    daily_rate = 0

                hourly_rate = daily_rate / constants.HOURS_PER_DAY

                sheet.write(intRow,16,round(monthly_cost,2), job_background_color)
                sheet.write(intRow,17,round(daily_rate,2) ,job_background_color)
                sheet.write(intRow,18,round(hourly_rate/constants.MINUTES,2),job_background_color)
                sheet.write(intRow,19,round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),2),job_background_color)
                sheet.write(intRow,20,round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),2),job_background_color)
                sheet.write(intRow,21,round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate),2),job_background_color)
                sheet.write(intRow,22,round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,23,round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,24,round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,25,round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,26,round(model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,27,round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,28,round(project_setup.thirteenth_month,2),job_background_color)
                sheet.write(intRow,29,round(project_setup.incentive_leaves,2),job_background_color)
                sheet.write(intRow,30,round(project_setup.allowance,2),job_background_color)
                sheet.write(intRow,31,str(int(project_setup.overhead_cost)) + "%",job_background_color)
                sheet.write(intRow,32,round(project_setup.due_to_government,2),job_background_color)

                sheet.write(intRow,33,round(project_setup.supplies,2),job_background_color)
                sheet.write(intRow,34,round(project_setup.uniform_allowance,2),job_background_color)
                sheet.write(intRow,35,round(project_setup.equipment,2),job_background_color)

                #START CREATION OF DATA
                intRow +=1
                model_billing_detail = self.env['billing.detail'].search([ ('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                                           ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter),
                                                                           ('billing_main_id.customer_id', '=', project_setup.customer_id.id),
                                                                           ('billing_main_id.job_id', '=', project_setup.job_id.id)])

                if len(model_billing_detail) > 0:
                    for employee in model_billing_detail:
                        sheet.write(intRow_RE,2,"BILLING - " + str(employee.billing_main_id.attendance_id.schedule_datefrom) + ' - ' + str(employee.billing_main_id.attendance_id.schedule_dateto) ,styleTitleRe)
                        fontData = xlwt.Font()
                        styleEmployeeName = xlwt.XFStyle()
                        #To Check if Employee has a reliever or not
                        if employee.has_a_reliever == True:
                            fontData.colour_index = 0x0A
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                        elif employee.is_reliever == True:
                            fontData.colour_index = 0x0C
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, "**", styleLeft)
                            #sheet.write(intRow, 2, "**",styleEmployeeName)
                            sheet.write(intRow, 2, employee.employee_reliever_id.name,styleEmployeeName)
                        else:
                            fontData.colour_index = 0x08
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                        sheet.write(intRow,5,employee.details_less_day,styleData)
                        sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                        sheet.write(intRow,7,employee.details_straight_duty,styleData)
                        sheet.write(intRow,8,employee.details_night_diff,styleData)
                        sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                        sheet.write(intRow,10,employee.details_restday,styleData)
                        sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                        sheet.write(intRow,12,employee.details_special_holiday,styleData)
                        sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                        sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                        sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)
                        sheet.write(intRow,16,employee.amount_contract,styleData)
                        sheet.write(intRow,17,employee.amount_less_day,styleData)
                        sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)
                        sheet.write(intRow,19,employee.amount_night_diff,styleData)
                        sheet.write(intRow,20,employee.amount_straight_duty,styleData)
                        sheet.write(intRow,21,employee.amount_overtime_reqular,styleData)
                        sheet.write(intRow,22,employee.amount_restday,styleData)
                        sheet.write(intRow,23,employee.amount_overtime_restday,styleData)
                        sheet.write(intRow,24,employee.amount_special_holiday,styleData)
                        sheet.write(intRow,25,employee.amount_overtime_special_holiday,styleData)
                        sheet.write(intRow,26,employee.amount_legal_holiday,styleData)
                        sheet.write(intRow,27,employee.amount_overtime_legal_holiday,styleData)
                        sheet.write(intRow,28,employee.amount_thirteenth_month,styleData)
                        sheet.write(intRow,29,employee.amount_incentive_leaves,styleData)
                        sheet.write(intRow,30,employee.amount_allowance,styleData)
                        sheet.write(intRow,31,employee.amount_overheadcost,styleData)
                        sheet.write(intRow,32,employee.amount_govt_inc,styleData)

                        sheet.write(intRow,33,employee.amount_supplies,styleData)
                        sheet.write(intRow,34,employee.amount_uniform_allowance,styleData)
                        sheet.write(intRow,35,employee.amount_equipment,styleData)

                        sheet.write(intRow,36,employee.amount_total,styleData)
                        intRow +=1

                    sheet.write(intRow,1,"",styleBottomLeft)
                    sheet.write(intRow,2,"",styleBottom_in_name)
                    sheet.write(intRow,3,"",styleBottom_in_name)
                    sheet.write(intRow,4,"",styleBottom_in_name)

                    border = xlwt.Borders()
                    border.bottom = xlwt.Borders.THIN
                    border.top = xlwt.Borders.THIN
                    border.left = xlwt.Borders.THIN
                    border.right = xlwt.Borders.THIN

                    styleDataFooter =xlwt.XFStyle()
                    styleDataFooter.font.bold = True
                    styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
                    pattern = xlwt.Pattern()
                    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
                    pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
                    styleDataFooter.pattern = pattern
                    styleDataFooter.borders = border


                    sheet.write_merge(intRow,intRow, 1,4, "SUBTOTAL", styleDataFooter)
                    int_total_less_day = sum(employee.details_less_day  for employee in model_billing_detail)
                    int_total_tardiness = sum(employee.details_tardiness_ut  for employee in model_billing_detail)
                    curr_total_straight_duty = sum(employee.details_straight_duty  for employee in model_billing_detail)
                    curr_total_night_diff = sum(employee.details_night_diff  for employee in model_billing_detail)
                    curr_total_overtime_regular = sum(employee.details_overtime_reqular  for employee in model_billing_detail)
                    curr_total_restday = sum(employee.details_restday  for employee in model_billing_detail)
                    curr_total_overtime_restday = sum(employee.details_overtime_restday  for employee in model_billing_detail)
                    curr_total_special_holiday = sum(employee.details_special_holiday  for employee in model_billing_detail)
                    curr_total_overtime_special_holiday = sum(employee.details_overtime_special_holiday  for employee in model_billing_detail)
                    curr_total_legal_holiday = sum(employee.details_legal_holiday  for employee in model_billing_detail)
                    curr_total_overtime_legal_holiday = sum(employee.details_overtime_legal_holiday  for employee in model_billing_detail)
                    curr_total_amount_contract = sum(employee.amount_contract  for employee in model_billing_detail)
                    curr_total_amount_less_day = sum(employee.amount_less_day  for employee in model_billing_detail)
                    curr_total_amount_tardiness_ut = sum(employee.amount_tardiness_ut for employee in model_billing_detail)
                    curr_total_amount_night_diff = sum(employee.amount_night_diff for employee in model_billing_detail)
                    curr_total_amount_straight_duty = sum(employee.amount_straight_duty for employee in model_billing_detail)
                    curr_total_amount_overtime_reqular = sum(employee.amount_overtime_reqular for employee in model_billing_detail)
                    curr_total_amount_restday = sum(employee.amount_restday for employee in model_billing_detail)
                    curr_total_amount_overtime_restday = sum(employee.amount_overtime_restday for employee in model_billing_detail)
                    curr_total_amount_amount_special_holiday = sum(employee.amount_special_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_special_holiday = sum(employee.amount_overtime_special_holiday for employee in model_billing_detail)
                    curr_total_amount_legal_holiday = sum(employee.amount_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_legal_holiday = sum(employee.amount_overtime_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_thirteenth_month = sum(employee.amount_thirteenth_month for employee in model_billing_detail)
                    curr_total_amount_incentive_leaves = sum(employee.amount_incentive_leaves for employee in model_billing_detail)
                    curr_total_amount_allowance = sum(employee.amount_allowance for employee in model_billing_detail)
                    curr_total_amount_overheadcost = sum(employee.amount_overheadcost for employee in model_billing_detail)
                    curr_total_amount_govt_inc = sum(employee.amount_govt_inc for employee in model_billing_detail)

                    curr_total_amount_supplies = sum(employee.amount_supplies for employee in model_billing_detail)
                    curr_total_amount_uniform_allowance = sum(employee.amount_uniform_allowance for employee in model_billing_detail)
                    curr_total_amount_equipment = sum(employee.amount_equipment for employee in model_billing_detail)

                    curr_total_amount_total = sum(employee.amount_total for employee in model_billing_detail)

                    if curr_total_straight_duty ==0:
                        sheet.col(7).hidden = True
                        sheet.col(20).hidden = True

                    if curr_total_night_diff ==0:
                        sheet.col(8).hidden = True
                        sheet.col(19).hidden = True

                    if curr_total_overtime_regular ==0:
                        sheet.col(9).hidden = True
                        sheet.col(21).hidden = True

                    if curr_total_restday ==0:
                        sheet.col(10).hidden = True
                        sheet.col(22).hidden = True

                    if curr_total_overtime_restday == 0:
                        sheet.col(11).hidden = True
                        sheet.col(23).hidden = True

                    if curr_total_special_holiday == 0:
                        sheet.col(12).hidden = True
                        sheet.col(24).hidden = True

                    if curr_total_overtime_special_holiday == 0:
                        sheet.col(13).hidden = True
                        sheet.col(25).hidden = True


                    if curr_total_legal_holiday == 0:
                        sheet.col(14).hidden = True
                        sheet.col(26).hidden = True

                    if curr_total_overtime_legal_holiday ==0:
                        sheet.col(15).hidden = True
                        sheet.col(27).hidden = True

                    if curr_total_amount_supplies  == 0:
                        sheet.col(33).hidden = True

                    if curr_total_amount_uniform_allowance == 0:
                        sheet.col(34).hidden = True

                    if curr_total_amount_equipment == 0:
                        sheet.col(35).hidden = True

                    sheet.write(intRow,5,int_total_less_day,styleDataFooter)
                    sheet.write(intRow,6,int_total_tardiness,styleDataFooter)
                    sheet.write(intRow,7,curr_total_straight_duty,styleDataFooter)
                    sheet.write(intRow,8,curr_total_night_diff,styleDataFooter)
                    sheet.write(intRow,9,curr_total_overtime_regular,styleDataFooter)
                    sheet.write(intRow,10,curr_total_restday,styleDataFooter)
                    sheet.write(intRow,11,curr_total_overtime_restday,styleDataFooter)
                    sheet.write(intRow,12,curr_total_special_holiday,styleDataFooter)
                    sheet.write(intRow,13,curr_total_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,14,curr_total_legal_holiday,styleDataFooter)
                    sheet.write(intRow,15,curr_total_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,16,curr_total_amount_contract,styleDataFooter)
                    sheet.write(intRow,17,curr_total_amount_less_day,styleDataFooter)
                    sheet.write(intRow,18,curr_total_amount_tardiness_ut,styleDataFooter)
                    sheet.write(intRow,19,curr_total_amount_night_diff,styleDataFooter)
                    sheet.write(intRow,20,curr_total_amount_straight_duty,styleDataFooter)
                    sheet.write(intRow,21,curr_total_amount_overtime_reqular,styleDataFooter)
                    sheet.write(intRow,22,curr_total_amount_restday,styleDataFooter)
                    sheet.write(intRow,23,curr_total_amount_overtime_restday,styleDataFooter)
                    sheet.write(intRow,24,curr_total_amount_amount_special_holiday,styleDataFooter)
                    sheet.write(intRow,25,curr_total_amount_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,26,curr_total_amount_legal_holiday,styleDataFooter)
                    sheet.write(intRow,27,curr_total_amount_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,28,curr_total_amount_thirteenth_month,styleDataFooter)
                    sheet.write(intRow,29,curr_total_amount_incentive_leaves,styleDataFooter)
                    sheet.write(intRow,30,curr_total_amount_allowance,styleDataFooter)
                    sheet.write(intRow,31,curr_total_amount_overheadcost,styleDataFooter)
                    sheet.write(intRow,32,curr_total_amount_govt_inc,styleDataFooter)

                    sheet.write(intRow,33,curr_total_amount_supplies,styleDataFooter)
                    sheet.write(intRow,34,curr_total_amount_uniform_allowance,styleDataFooter)
                    sheet.write(intRow,35,curr_total_amount_equipment,styleDataFooter)

                    sheet.write(intRow,36,curr_total_amount_total,styleDataFooter)

                    int_project_total_less_day +=int_total_less_day
                    int_project_total_tardiness +=int_total_tardiness
                    curr_total_project_straight_duty +=curr_total_straight_duty
                    curr_total_project_night_diff +=curr_total_night_diff
                    curr_total_project_overtime_regular +=curr_total_overtime_regular
                    curr_total_project_restday +=curr_total_restday
                    curr_total_project_overtime_restday +=curr_total_overtime_restday
                    curr_total_project_special_holiday +=curr_total_special_holiday
                    curr_total_project_overtime_special_holiday +=curr_total_overtime_special_holiday
                    curr_total_project_legal_holiday +=curr_total_legal_holiday
                    curr_total_project_overtime_legal_holiday +=curr_total_overtime_legal_holiday
                    curr_total_project_amount_contract +=curr_total_amount_contract
                    curr_total_project_amount_less_day +=curr_total_amount_less_day
                    curr_total_project_amount_tardiness_ut +=curr_total_amount_tardiness_ut
                    curr_total_project_amount_night_diff +=curr_total_amount_night_diff
                    curr_total_project_amount_straight_duty +=curr_total_amount_straight_duty
                    curr_total_project_amount_overtime_reqular +=curr_total_amount_overtime_reqular
                    curr_total_project_amount_restday +=curr_total_amount_restday
                    curr_total_project_amount_overtime_restday +=curr_total_amount_overtime_restday
                    curr_total_project_amount_amount_special_holiday +=curr_total_amount_amount_special_holiday
                    curr_total_project_amount_overtime_special_holiday +=curr_total_amount_overtime_special_holiday
                    curr_total_project_amount_legal_holiday +=curr_total_amount_legal_holiday
                    curr_total_project_amount_overtime_legal_holiday +=curr_total_amount_overtime_legal_holiday
                    curr_total_project_amount_thirteenth_month +=curr_total_amount_thirteenth_month
                    curr_total_project_amount_incentive_leaves +=curr_total_amount_incentive_leaves
                    curr_total_project_amount_allowance +=curr_total_amount_allowance
                    curr_total_project_amount_overheadcost +=curr_total_amount_overheadcost
                    curr_total_project_amount_govt_inc +=curr_total_amount_govt_inc

                    curr_total_project_amount_supplies   +=curr_total_amount_supplies
                    curr_total_project_amount_uniform_allowance  +=curr_total_amount_uniform_allowance
                    curr_total_project_amount_equipment  +=curr_total_amount_equipment

                    if curr_total_project_amount_supplies  == 0:
                        sheet.col(33).hidden = True

                    if curr_total_project_amount_uniform_allowance == 0:
                        sheet.col(34).hidden = True

                    if curr_total_project_amount_equipment == 0:
                        sheet.col(35).hidden = True


                    curr_total_project_amount_total +=curr_total_amount_total

                    sub_total_amount += curr_total_amount_total

                    intRow +=1
                    sheet.write_merge(intRow,intRow, 1,4, "", styleBottom)
                    for intRowBottom in range(5,37):
                        sheet.write(intRow,intRowBottom,"",styleBottom)

            styleDataFooter =xlwt.XFStyle()
            styleDataFooter.font.bold = True
            styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'

            intRow +=2
            sheet.write_merge(intRow,intRow, 1,4, "TOTAL", styleDataFooter)
            sheet.write(intRow,5,int_project_total_less_day,styleDataFooter)
            sheet.write(intRow,6,int_project_total_tardiness,styleDataFooter)
            sheet.write(intRow,7,curr_total_project_straight_duty,styleDataFooter)
            sheet.write(intRow,8,curr_total_project_night_diff,styleDataFooter)
            sheet.write(intRow,9,curr_total_project_overtime_regular,styleDataFooter)
            sheet.write(intRow,10,curr_total_project_restday,styleDataFooter)
            sheet.write(intRow,11,curr_total_project_overtime_restday,styleDataFooter)
            sheet.write(intRow,12,curr_total_project_special_holiday,styleDataFooter)
            sheet.write(intRow,13,curr_total_project_overtime_special_holiday,styleDataFooter)
            sheet.write(intRow,14,curr_total_project_legal_holiday,styleDataFooter)
            sheet.write(intRow,15,curr_total_project_overtime_legal_holiday,styleDataFooter)
            sheet.write(intRow,16,curr_total_project_amount_contract,styleDataFooter)
            sheet.write(intRow,17,curr_total_project_amount_less_day,styleDataFooter)
            sheet.write(intRow,18,curr_total_project_amount_tardiness_ut,styleDataFooter)
            sheet.write(intRow,19,curr_total_project_amount_night_diff,styleDataFooter)
            sheet.write(intRow,20,curr_total_project_amount_straight_duty,styleDataFooter)
            sheet.write(intRow,21,curr_total_project_amount_overtime_reqular,styleDataFooter)
            sheet.write(intRow,22,curr_total_project_amount_restday,styleDataFooter)
            sheet.write(intRow,23,curr_total_project_amount_overtime_restday,styleDataFooter)
            sheet.write(intRow,24,curr_total_project_amount_amount_special_holiday,styleDataFooter)
            sheet.write(intRow,25,curr_total_project_amount_overtime_special_holiday,styleDataFooter)
            sheet.write(intRow,26,curr_total_project_amount_legal_holiday,styleDataFooter)
            sheet.write(intRow,27,curr_total_project_amount_overtime_legal_holiday,styleDataFooter)
            sheet.write(intRow,28,curr_total_project_amount_thirteenth_month,styleDataFooter)
            sheet.write(intRow,29,curr_total_project_amount_incentive_leaves,styleDataFooter)
            sheet.write(intRow,30,curr_total_project_amount_allowance,styleDataFooter)
            sheet.write(intRow,31,curr_total_project_amount_overheadcost,styleDataFooter)
            sheet.write(intRow,32,curr_total_project_amount_govt_inc,styleDataFooter)

            sheet.write(intRow,33,curr_total_project_amount_supplies,styleDataFooter)
            sheet.write(intRow,34,curr_total_project_amount_uniform_allowance,styleDataFooter)
            sheet.write(intRow,35,curr_total_project_amount_equipment,styleDataFooter)

            sheet.write(intRow,36,curr_total_project_amount_total,styleDataFooter)


            intRow +=2

            #Get SubTotal Amount

            sheet.write(intRow,32,"Subtotal ")
            sheet.write_merge(intRow,intRow,34,36,sub_total_amount,styleFooter)
            intRow +=1

            curr_total_vat_amount = sub_total_amount * constants.VAT_RATE
            sheet.write_merge(intRow,intRow,32,33,"Add : 12% VAT ")
            sheet.write_merge(intRow,intRow,34,36,curr_total_vat_amount,styleFooter)
            intRow +=2

            sheet.write_merge(intRow,intRow,32,33,"GRAND TOTAL ")
            sheet.write_merge(intRow,intRow,34,36,curr_total_vat_amount + sub_total_amount,styleFooter)

            intRow +=5


        # Hide ColumnA
        sheet.col(0).hidden = True

        fp = StringIO()
        workbook.save(fp)
        fp.seek(0)
        data = fp.read()
        fp.close()
        byte_arr = base64.b64encode(data)
        self.billing_file = byte_arr

    @api.one
    def NonReportBreakdown(self):
        #Excel File Generation
        if self.job_id.name == False:
            job_name = ""
        else:
            job_name =self.job_id.name

        workbook = xlwt.Workbook()
        sheet = workbook.add_sheet("Billing - " + job_name, True)

        styleTitleFrom =xlwt.XFStyle()
        styleTitleTo =xlwt.XFStyle()
        styleTitleRe =xlwt.XFStyle()
        styleTitleDetails =xlwt.XFStyle()
        styleTitleAmount =xlwt.XFStyle()
        styleColumns =xlwt.XFStyle()
        styleData =xlwt.XFStyle()
        styleBottom_in_name = xlwt.XFStyle()
        styleFooter = xlwt.XFStyle()
        styleBottom =xlwt.XFStyle()
        styleLeft=xlwt.XFStyle()
        styleBottomLeft =xlwt.XFStyle()
        styleBottomRight=xlwt.XFStyle()

        #Alignment Center
        alignment = xlwt.Alignment()
        alignment.horz = xlwt.Alignment.HORZ_CENTER
        alignment.vert = xlwt.Alignment.VERT_CENTER
        alignment.Wrap = 1
        styleColumns.alignment = alignment
        styleColumns.alignment.wrap = 1
        styleColumns.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'


        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        styleTitleDetails.borders = border
        styleTitleAmount.borders = border
        styleColumns.borders = border

        #border Data
        borderdata = xlwt.Borders()
        borderdata.bottom = xlwt.Borders.NO_LINE
        borderdata.top = xlwt.Borders.NO_LINE
        borderdata.left = xlwt.Borders.THIN
        borderdata.right = xlwt.Borders.THIN

        borderdataBottom = xlwt.Borders()
        borderdataBottom.bottom = xlwt.Borders.THIN
        borderdataBottom.top = xlwt.Borders.NO_LINE
        borderdataBottom.left = xlwt.Borders.THIN
        borderdataBottom.right = xlwt.Borders.THIN

        borderLeft = xlwt.Borders()
        borderLeft.bottom = xlwt.Borders.NO_LINE
        borderLeft.top = xlwt.Borders.NO_LINE
        borderLeft.left = xlwt.Borders.THIN
        borderLeft.right = xlwt.Borders.NO_LINE

        borderdataBottomLeft = xlwt.Borders()
        borderdataBottomLeft.bottom = xlwt.Borders.THIN
        borderdataBottomLeft.top = xlwt.Borders.NO_LINE
        borderdataBottomLeft.left = xlwt.Borders.THIN
        borderdataBottomLeft.right = xlwt.Borders.NO_LINE

        borderBottom_in_name = xlwt.Borders()
        borderBottom_in_name.bottom = xlwt.Borders.THIN
        borderBottom_in_name.top = xlwt.Borders.NO_LINE
        borderBottom_in_name.left = xlwt.Borders.NO_LINE
        borderBottom_in_name.right = xlwt.Borders.NO_LINE

        styleBottomLeft.borders = borderdataBottomLeft
        styleLeft.borders = borderLeft
        styleData.borders = borderdata
        styleBottom.borders = borderdataBottom
        styleBottom_in_name.borders = borderBottom_in_name

        styleData.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleLeft.num_format_str = '00'
        #font
        font = xlwt.Font()
        font.name = 'Arial'
        font.height =120

        #Creation of Position Background Colour
        xlwt.add_palette_colour("custom_colour", 0x21)
        workbook.set_colour_RGB(0x21,  196, 215, 155)

        subtotal_color = xlwt.XFStyle()
        pattern = xlwt.Pattern()
        pattern.pattern = xlwt.Pattern.SOLID_PATTERN
        pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
        subtotal_color.pattern = pattern

        job_background_color = xlwt.easyxf('pattern: pattern solid, fore_colour custom_colour')
        job_background_color.alignment = alignment
        job_background_color.alignment.wrap = 1
        job_background_color.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'

        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        job_background_color.borders = border
        job_background_color.font.bold =True

        #Get Company Information
        company = self.env['res.company'].search([('id','=',1)])

        sheet.write(1,1,"FR :",styleTitleFrom)
        sheet.write(1,2,company.name,styleTitleFrom)

        sheet.write(2,1,"TO :",styleTitleTo)
        sheet.write(2,2,self.customer_id.name,styleTitleRe)

        sheet.write(3,1,"RE :",styleTitleRe)

        sheet.write_merge(5,5, 1,15, "DETAILS", styleColumns)
        sheet.write_merge(5,5, 16,33, "AMOUNT", styleColumns)


        dict_filter = [('main_detail_id','=', self.customer_id.id)]
        #Search Branches in Selected Company
        if len(self.customer_branches_id) > 0:
            dict_filter.append(('id', '=', self.customer_branches_id.id))

        model_cust_branches = self.env['res.customer.branches'].search(dict_filter)
        sub_total_amount = 0

        intRow=1

        for cust_branch in model_cust_branches:

            int_project_total_less_day = 0
            int_project_total_tardiness = 0
            curr_total_project_straight_duty = 0
            curr_total_project_night_diff = 0
            curr_total_project_overtime_regular = 0
            curr_total_project_restday = 0
            curr_total_project_overtime_restday = 0
            curr_total_project_special_holiday = 0
            curr_total_project_overtime_special_holiday = 0
            curr_total_project_legal_holiday = 0
            curr_total_project_overtime_legal_holiday = 0
            curr_total_project_amount_contract = 0
            curr_total_project_amount_less_day = 0
            curr_total_project_amount_tardiness_ut = 0
            curr_total_project_amount_night_diff = 0
            curr_total_project_amount_straight_duty = 0
            curr_total_project_amount_overtime_reqular = 0
            curr_total_project_amount_restday = 0
            curr_total_project_amount_overtime_restday = 0
            curr_total_project_amount_amount_special_holiday = 0
            curr_total_project_amount_overtime_special_holiday = 0
            curr_total_project_amount_legal_holiday = 0
            curr_total_project_amount_overtime_legal_holiday = 0
            curr_total_project_amount_thirteenth_month = 0
            curr_total_project_amount_incentive_leaves = 0
            curr_total_project_amount_allowance = 0
            curr_total_project_amount_overheadcost = 0
            curr_total_project_amount_govt_inc = 0
            curr_total_project_amount_total = 0


            #Get Company Information
            company = self.env['res.company'].search([('id','=',1)])

            sheet.write(intRow,1,"FR :",styleTitleFrom)
            sheet.write(intRow,2,company.name,styleTitleFrom)
            intRow +=1
            sheet.write(intRow,1,"TO :",styleTitleTo)
            sheet.write(intRow,2,cust_branch.name,styleTitleRe)
            intRow +=1
            intRow_RE = intRow
            sheet.write(intRow,1,"RE :",styleTitleRe)
            intRow +=2
            sheet.write_merge(intRow,intRow, 1,15, "DETAILS", styleColumns)
            sheet.write_merge(intRow,intRow, 16,33, "AMOUNT", styleColumns)
            intRow +=1
            #Columns
            sheet.write_merge(intRow,intRow+6, 1,4, "Name of Employee", styleColumns)
            sheet.write_merge(intRow,intRow+5, 5,5, "Add'l/Less Days", styleColumns)
            sheet.write_merge(intRow,intRow+5,6,6,"Late/UT",styleColumns)
            sheet.write_merge(intRow,intRow+5,7,7,"Straight Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,8,8,"Night Diff.",styleColumns)
            sheet.write_merge(intRow,intRow+5,9,9,"OT - Regular",styleColumns)
            sheet.write_merge(intRow,intRow+5,10,10,"OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,11,11,"Excess OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,12,12,"Special Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,13,13,"OT - Special Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,14,14,"Legal Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,15,15,"OT - Legal Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,16,16,"Contract Amount",styleColumns)
            sheet.write_merge(intRow,intRow+5,17,17,"Add'l Less Days",styleColumns)
            sheet.write_merge(intRow,intRow+5,18,18,"Late/UT",styleColumns)
            sheet.write_merge(intRow,intRow+5,19,19,"Night Diff",styleColumns)
            sheet.write_merge(intRow,intRow+5,20,20,"Straight Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,21,21,"OT - Regular",styleColumns)
            sheet.write_merge(intRow,intRow+5,22,22,"OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,23,23,"Excess OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,24,24,"Special Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,25,25,"OT - Special Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,26,26,"Legal Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,27,27,"OT - Legal Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,28,28,"13th Month Pay",styleColumns)
            sheet.write_merge(intRow,intRow+5,29,29,"5 Days Incentive Leave",styleColumns)
            sheet.write_merge(intRow,intRow+5,30,30,"Allowance",styleColumns)
            sheet.write_merge(intRow,intRow+5,31,31,"Overhead Cost",styleColumns)
            sheet.write_merge(intRow,intRow+5,32,32,"Govt Inc.",styleColumns)
            sheet.write_merge(intRow,intRow+6,33,33,"Total",styleColumns)

            intRow += 6
            #Days/per hours
            sheet.write(intRow,5,"(days)",styleColumns)
            sheet.write(intRow,6,"(mins)",styleColumns)
            sheet.write(intRow,7,"(hrs)",styleColumns)
            sheet.write(intRow,8,"(hrs)",styleColumns)
            sheet.write(intRow,9,"(hrs)",styleColumns)
            sheet.write(intRow,10,"(hrs)",styleColumns)
            sheet.write(intRow,11,"(hrs)",styleColumns)
            sheet.write(intRow,12,"(hrs)",styleColumns)
            sheet.write(intRow,13,"(hrs)",styleColumns)
            sheet.write(intRow,14,"(hrs)",styleColumns)
            sheet.write(intRow,15,"(hrs)",styleColumns)
            sheet.write(intRow,16,"(per mo.)",styleColumns)
            sheet.write(intRow,17,"(per day)",styleColumns)
            sheet.write(intRow,18,"(per min)",styleColumns)
            sheet.write(intRow,19,"(per hr)",styleColumns)
            sheet.write(intRow,20,"(per hr)",styleColumns)
            sheet.write(intRow,21,"(per hr)",styleColumns)
            sheet.write(intRow,22,"(per hr)",styleColumns)
            sheet.write(intRow,23,"(per hr)",styleColumns)
            sheet.write(intRow,24,"(per hr)",styleColumns)
            sheet.write(intRow,25,"(per hr)",styleColumns)
            sheet.write(intRow,26,"(per hr)",styleColumns)
            sheet.write(intRow,27,"(per hr)",styleColumns)
            sheet.write(intRow,28,"(pesos)",styleColumns)
            sheet.write(intRow,29,"(pesos)",styleColumns)
            sheet.write(intRow,30,"(pesos)",styleColumns)
            sheet.write(intRow,31,"(pesos)",styleColumns)
            sheet.write(intRow,32,"(pesos)",styleColumns)


            #Getting the Parameters Per Job Postion
            dict_filter =[]
            dict_filter = [('customer_id','=', cust_branch.customer_info.id)]
            if len(self.job_id)>0:
                dict_filter.append(('job_id','=', self.job_id.id))

            model_workhourtype = self.env['hr.workhourtype']
            model_client_billing_info = self.env['res.customer.setup'].search(dict_filter)
            #intRow = 12

            for project_setup in model_client_billing_info:
                intRow +=1
                sheet.write_merge(intRow,intRow, 1,4, project_setup.job_id.name, job_background_color)
                for i in range(5,34):
                    sheet.write(intRow,i,"",job_background_color)

                #SETUP PROJECT INFORMATION
                if project_setup.factor_days > 0:
                    daily_rate = (project_setup.monthly_rate/project_setup.factor_days) * constants.MONTHS_IN_YEAR
                else:
                    daily_rate = 0


                hourly_rate = daily_rate / constants.HOURS_PER_DAY

                sheet.write(intRow,16,round(project_setup.monthly_rate,2), job_background_color)
                sheet.write(intRow,17,round(daily_rate,2) ,job_background_color)
                sheet.write(intRow,18,round(hourly_rate/constants.MINUTES,2),job_background_color)
                sheet.write(intRow,19,round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),2),job_background_color)
                sheet.write(intRow,20,round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),2),job_background_color)
                sheet.write(intRow,21,round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate),2),job_background_color)
                sheet.write(intRow,22,round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,23,round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,24,round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,25,round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,26,round(model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,27,round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,28,round(project_setup.thirteenth_month,2),job_background_color)
                sheet.write(intRow,29,round(project_setup.incentive_leaves,2),job_background_color)
                sheet.write(intRow,30,round(project_setup.allowance,2),job_background_color)
                sheet.write(intRow,31,str(int(project_setup.overhead_cost)) + "%",job_background_color)
                sheet.write(intRow,32,round(project_setup.due_to_government,2),job_background_color)


                #START CREATION OF DATA
                intRow +=1
                model_billing_detail = self.env['billing.detail'].search([ ('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                                           ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter),
                                                                           ('billing_main_id.customer_id', '=', project_setup.customer_id.id),
                                                                           ('billing_main_id.job_id', '=', project_setup.job_id.id)])

                if len(model_billing_detail) > 0:
                    for employee in model_billing_detail:
                        sheet.write(intRow_RE,2,"BILLING - " + str(employee.billing_main_id.attendance_id.schedule_datefrom) + ' - ' + str(employee.billing_main_id.attendance_id.schedule_dateto) ,styleTitleRe)
                        fontData = xlwt.Font()
                        styleEmployeeName = xlwt.XFStyle()
                        #To Check if Employee has a reliever or not
                        if employee.has_a_reliever == True:
                            fontData.colour_index = 0x0A
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                        elif employee.is_reliever == True:
                            fontData.colour_index = 0x0C
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, "**", styleLeft)
                            #sheet.write(intRow, 2, "**",styleEmployeeName)
                            sheet.write(intRow, 2, employee.employee_reliever_id.name,styleEmployeeName)
                        else:
                            fontData.colour_index = 0x08
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                        sheet.write(intRow,5,employee.details_less_day,styleData)
                        sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                        sheet.write(intRow,7,employee.details_straight_duty,styleData)
                        sheet.write(intRow,8,employee.details_night_diff,styleData)
                        sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                        sheet.write(intRow,10,employee.details_restday,styleData)
                        sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                        sheet.write(intRow,12,employee.details_special_holiday,styleData)
                        sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                        sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                        sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)
                        sheet.write(intRow,16,employee.amount_contract,styleData)
                        sheet.write(intRow,17,employee.amount_less_day,styleData)
                        sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)

                        sheet.write(intRow,19,employee.amount_night_diff,styleData)
                        sheet.write(intRow,20,employee.amount_straight_duty,styleData)
                        sheet.write(intRow,21,employee.amount_overtime_reqular,styleData)
                        sheet.write(intRow,22,employee.amount_restday,styleData)
                        sheet.write(intRow,23,employee.amount_overtime_restday,styleData)
                        sheet.write(intRow,24,employee.amount_special_holiday,styleData)
                        sheet.write(intRow,25,employee.amount_overtime_special_holiday,styleData)
                        sheet.write(intRow,26,employee.amount_legal_holiday,styleData)
                        sheet.write(intRow,27,employee.amount_overtime_legal_holiday,styleData)
                        sheet.write(intRow,28,employee.amount_thirteenth_month,styleData)
                        sheet.write(intRow,29,employee.amount_incentive_leaves,styleData)
                        sheet.write(intRow,30,employee.amount_allowance,styleData)
                        sheet.write(intRow,31,employee.amount_overheadcost,styleData)
                        sheet.write(intRow,32,employee.amount_govt_inc,styleData)
                        sheet.write(intRow,33,employee.amount_total,styleData)
                        intRow +=1

                    sheet.write(intRow,1,"",styleBottomLeft)
                    sheet.write(intRow,2,"",styleBottom_in_name)
                    sheet.write(intRow,3,"",styleBottom_in_name)
                    sheet.write(intRow,4,"",styleBottom_in_name)

                    border = xlwt.Borders()
                    border.bottom = xlwt.Borders.THIN
                    border.top = xlwt.Borders.THIN
                    border.left = xlwt.Borders.THIN
                    border.right = xlwt.Borders.THIN

                    styleDataFooter =xlwt.XFStyle()
                    styleDataFooter.font.bold = True
                    styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
                    pattern = xlwt.Pattern()
                    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
                    pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
                    styleDataFooter.pattern = pattern
                    styleDataFooter.borders = border
                    #styleDataFooter.alignment = 1

                    sheet.write_merge(intRow,intRow, 1,4, "SUBTOTAL", styleDataFooter)
                    int_total_less_day = sum(employee.details_less_day  for employee in model_billing_detail)
                    int_total_tardiness = sum(employee.details_tardiness_ut  for employee in model_billing_detail)
                    curr_total_straight_duty = sum(employee.details_straight_duty  for employee in model_billing_detail)
                    curr_total_night_diff = sum(employee.details_night_diff  for employee in model_billing_detail)
                    curr_total_overtime_regular = sum(employee.details_overtime_reqular  for employee in model_billing_detail)
                    curr_total_restday = sum(employee.details_restday  for employee in model_billing_detail)
                    curr_total_overtime_restday = sum(employee.details_overtime_restday  for employee in model_billing_detail)
                    curr_total_special_holiday = sum(employee.details_special_holiday  for employee in model_billing_detail)
                    curr_total_overtime_special_holiday = sum(employee.details_overtime_special_holiday  for employee in model_billing_detail)
                    curr_total_legal_holiday = sum(employee.details_legal_holiday  for employee in model_billing_detail)
                    curr_total_overtime_legal_holiday = sum(employee.details_overtime_legal_holiday  for employee in model_billing_detail)
                    curr_total_amount_contract = sum(employee.amount_contract  for employee in model_billing_detail)
                    curr_total_amount_less_day = sum(employee.amount_less_day  for employee in model_billing_detail)
                    curr_total_amount_tardiness_ut = sum(employee.amount_tardiness_ut for employee in model_billing_detail)
                    curr_total_amount_night_diff = sum(employee.amount_night_diff for employee in model_billing_detail)
                    curr_total_amount_straight_duty = sum(employee.amount_straight_duty for employee in model_billing_detail)
                    curr_total_amount_overtime_reqular = sum(employee.amount_overtime_reqular for employee in model_billing_detail)
                    curr_total_amount_restday = sum(employee.amount_restday for employee in model_billing_detail)
                    curr_total_amount_overtime_restday = sum(employee.amount_overtime_restday for employee in model_billing_detail)
                    curr_total_amount_amount_special_holiday = sum(employee.amount_special_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_special_holiday = sum(employee.amount_overtime_special_holiday for employee in model_billing_detail)
                    curr_total_amount_legal_holiday = sum(employee.amount_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_legal_holiday = sum(employee.amount_overtime_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_thirteenth_month = sum(employee.amount_thirteenth_month for employee in model_billing_detail)
                    curr_total_amount_incentive_leaves = sum(employee.amount_incentive_leaves for employee in model_billing_detail)
                    curr_total_amount_allowance = sum(employee.amount_allowance for employee in model_billing_detail)
                    curr_total_amount_overheadcost = sum(employee.amount_overheadcost for employee in model_billing_detail)
                    curr_total_amount_govt_inc = sum(employee.amount_govt_inc for employee in model_billing_detail)
                    curr_total_amount_total = sum(employee.amount_total for employee in model_billing_detail)

                    if curr_total_straight_duty ==0:
                        sheet.col(7).hidden = True
                        sheet.col(20).hidden = True

                    if curr_total_night_diff ==0:
                        sheet.col(8).hidden = True
                        sheet.col(19).hidden = True

                    if curr_total_overtime_regular ==0:
                        sheet.col(9).hidden = True
                        sheet.col(21).hidden = True

                    if curr_total_restday ==0:
                        sheet.col(10).hidden = True
                        sheet.col(22).hidden = True

                    if curr_total_overtime_restday == 0:
                        sheet.col(11).hidden = True
                        sheet.col(23).hidden = True

                    if curr_total_special_holiday == 0:
                        sheet.col(12).hidden = True
                        sheet.col(24).hidden = True

                    if curr_total_overtime_special_holiday == 0:
                        sheet.col(13).hidden = True
                        sheet.col(25).hidden = True

                    if curr_total_legal_holiday == 0:
                        sheet.col(14).hidden = True
                        sheet.col(26).hidden = True

                    if curr_total_overtime_legal_holiday ==0:
                        sheet.col(15).hidden = True
                        sheet.col(27).hidden = True

                    sheet.write(intRow,5,int_total_less_day,styleDataFooter)
                    sheet.write(intRow,6,int_total_tardiness,styleDataFooter)
                    sheet.write(intRow,7,curr_total_straight_duty,styleDataFooter)
                    sheet.write(intRow,8,curr_total_night_diff,styleDataFooter)
                    sheet.write(intRow,9,curr_total_overtime_regular,styleDataFooter)
                    sheet.write(intRow,10,curr_total_restday,styleDataFooter)
                    sheet.write(intRow,11,curr_total_overtime_restday,styleDataFooter)
                    sheet.write(intRow,12,curr_total_special_holiday,styleDataFooter)
                    sheet.write(intRow,13,curr_total_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,14,curr_total_legal_holiday,styleDataFooter)
                    sheet.write(intRow,15,curr_total_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,16,curr_total_amount_contract,styleDataFooter)
                    sheet.write(intRow,17,curr_total_amount_less_day,styleDataFooter)
                    sheet.write(intRow,18,curr_total_amount_tardiness_ut,styleDataFooter)
                    sheet.write(intRow,19,curr_total_amount_night_diff,styleDataFooter)
                    sheet.write(intRow,20,curr_total_amount_straight_duty,styleDataFooter)
                    sheet.write(intRow,21,curr_total_amount_overtime_reqular,styleDataFooter)
                    sheet.write(intRow,22,curr_total_amount_restday,styleDataFooter)
                    sheet.write(intRow,23,curr_total_amount_overtime_restday,styleDataFooter)
                    sheet.write(intRow,24,curr_total_amount_amount_special_holiday,styleDataFooter)
                    sheet.write(intRow,25,curr_total_amount_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,26,curr_total_amount_legal_holiday,styleDataFooter)
                    sheet.write(intRow,27,curr_total_amount_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,28,curr_total_amount_thirteenth_month,styleDataFooter)
                    sheet.write(intRow,29,curr_total_amount_incentive_leaves,styleDataFooter)
                    sheet.write(intRow,30,curr_total_amount_allowance,styleDataFooter)
                    sheet.write(intRow,31,curr_total_amount_overheadcost,styleDataFooter)
                    sheet.write(intRow,32,curr_total_amount_govt_inc,styleDataFooter)
                    sheet.write(intRow,33,curr_total_amount_total,styleDataFooter)

                    int_project_total_less_day +=int_total_less_day
                    int_project_total_tardiness +=int_total_tardiness
                    curr_total_project_straight_duty +=curr_total_straight_duty
                    curr_total_project_night_diff +=curr_total_night_diff
                    curr_total_project_overtime_regular +=curr_total_overtime_regular
                    curr_total_project_restday +=curr_total_restday
                    curr_total_project_overtime_restday +=curr_total_overtime_restday
                    curr_total_project_special_holiday +=curr_total_special_holiday
                    curr_total_project_overtime_special_holiday +=curr_total_overtime_special_holiday
                    curr_total_project_legal_holiday +=curr_total_legal_holiday
                    curr_total_project_overtime_legal_holiday +=curr_total_overtime_legal_holiday
                    curr_total_project_amount_contract +=curr_total_amount_contract
                    curr_total_project_amount_less_day +=curr_total_amount_less_day
                    curr_total_project_amount_tardiness_ut +=curr_total_amount_tardiness_ut
                    curr_total_project_amount_night_diff +=curr_total_amount_night_diff
                    curr_total_project_amount_straight_duty +=curr_total_amount_straight_duty
                    curr_total_project_amount_overtime_reqular +=curr_total_amount_overtime_reqular
                    curr_total_project_amount_restday +=curr_total_amount_restday
                    curr_total_project_amount_overtime_restday +=curr_total_amount_overtime_restday
                    curr_total_project_amount_amount_special_holiday +=curr_total_amount_amount_special_holiday
                    curr_total_project_amount_overtime_special_holiday +=curr_total_amount_overtime_special_holiday
                    curr_total_project_amount_legal_holiday +=curr_total_amount_legal_holiday
                    curr_total_project_amount_overtime_legal_holiday +=curr_total_amount_overtime_legal_holiday
                    curr_total_project_amount_thirteenth_month +=curr_total_amount_thirteenth_month
                    curr_total_project_amount_incentive_leaves +=curr_total_amount_incentive_leaves
                    curr_total_project_amount_allowance +=curr_total_amount_allowance
                    curr_total_project_amount_overheadcost +=curr_total_amount_overheadcost
                    curr_total_project_amount_govt_inc +=curr_total_amount_govt_inc
                    curr_total_project_amount_total +=curr_total_amount_total

                    sub_total_amount += curr_total_amount_total

                    intRow +=1
                    sheet.write_merge(intRow,intRow, 1,4, "", styleBottom)
                    for intRowBottom in range(5,34):
                        sheet.write(intRow,intRowBottom,"",styleBottom)

            styleDataFooter =xlwt.XFStyle()
            styleDataFooter.font.bold = True
            styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'

            intRow +=2
            sheet.write_merge(intRow,intRow, 1,4, "TOTAL", styleDataFooter)
            sheet.write(intRow,5,int_project_total_less_day,styleDataFooter)
            sheet.write(intRow,6,int_project_total_tardiness,styleDataFooter)
            sheet.write(intRow,7,curr_total_project_straight_duty,styleDataFooter)
            sheet.write(intRow,8,curr_total_project_night_diff,styleDataFooter)
            sheet.write(intRow,9,curr_total_project_overtime_regular,styleDataFooter)
            sheet.write(intRow,10,curr_total_project_restday,styleDataFooter)
            sheet.write(intRow,11,curr_total_project_overtime_restday,styleDataFooter)
            sheet.write(intRow,12,curr_total_project_special_holiday,styleDataFooter)
            sheet.write(intRow,13,curr_total_project_overtime_special_holiday,styleDataFooter)
            sheet.write(intRow,14,curr_total_project_legal_holiday,styleDataFooter)
            sheet.write(intRow,15,curr_total_project_overtime_legal_holiday,styleDataFooter)
            sheet.write(intRow,16,curr_total_project_amount_contract,styleDataFooter)
            sheet.write(intRow,17,curr_total_project_amount_less_day,styleDataFooter)
            sheet.write(intRow,18,curr_total_project_amount_tardiness_ut,styleDataFooter)
            sheet.write(intRow,19,curr_total_project_amount_night_diff,styleDataFooter)
            sheet.write(intRow,20,curr_total_project_amount_straight_duty,styleDataFooter)
            sheet.write(intRow,21,curr_total_project_amount_overtime_reqular,styleDataFooter)
            sheet.write(intRow,22,curr_total_project_amount_restday,styleDataFooter)
            sheet.write(intRow,23,curr_total_project_amount_overtime_restday,styleDataFooter)
            sheet.write(intRow,24,curr_total_project_amount_amount_special_holiday,styleDataFooter)
            sheet.write(intRow,25,curr_total_project_amount_overtime_special_holiday,styleDataFooter)
            sheet.write(intRow,26,curr_total_project_amount_legal_holiday,styleDataFooter)
            sheet.write(intRow,27,curr_total_project_amount_overtime_legal_holiday,styleDataFooter)
            sheet.write(intRow,28,curr_total_project_amount_thirteenth_month,styleDataFooter)
            sheet.write(intRow,29,curr_total_project_amount_incentive_leaves,styleDataFooter)
            sheet.write(intRow,30,curr_total_project_amount_allowance,styleDataFooter)
            sheet.write(intRow,31,curr_total_project_amount_overheadcost,styleDataFooter)
            sheet.write(intRow,32,curr_total_project_amount_govt_inc,styleDataFooter)
            sheet.write(intRow,33,curr_total_project_amount_total,styleDataFooter)


            intRow +=2

            #Get SubTotal Amount

            sheet.write(intRow,29,"Subtotal ")
            sheet.write_merge(intRow,intRow,31,33,sub_total_amount,styleFooter)
            intRow +=1

            curr_total_vat_amount = sub_total_amount * constants.VAT_RATE
            sheet.write_merge(intRow,intRow,29,30,"Add : 12% VAT ")
            sheet.write_merge(intRow,intRow,31,33,curr_total_vat_amount,styleFooter)
            intRow +=2

            sheet.write_merge(intRow,intRow,29,30,"GRAND TOTAL ")
            sheet.write_merge(intRow,intRow,31,33,curr_total_vat_amount + sub_total_amount,styleFooter)

            intRow +=5

        # Hide ColumnA
        sheet.col(0).hidden = True

        fp = StringIO()
        workbook.save(fp)
        fp.seek(0)
        data = fp.read()
        fp.close()
        byte_arr = base64.b64encode(data)
        self.billing_file = byte_arr

    @api.one
    def DailyBreakdownReport(self):
        #Excel File Generation
        if self.job_id.name == False:
            job_name = ""
        else:
            job_name =self.job_id.name

        workbook = xlwt.Workbook()
        sheet = workbook.add_sheet("Billing - " + job_name, True)

        styleTitleFrom =xlwt.XFStyle()
        styleTitleTo =xlwt.XFStyle()
        styleTitleRe =xlwt.XFStyle()
        styleTitleDetails =xlwt.XFStyle()
        styleTitleAmount =xlwt.XFStyle()
        styleColumns =xlwt.XFStyle()
        styleData =xlwt.XFStyle()
        styleBottom_in_name = xlwt.XFStyle()
        styleFooter = xlwt.XFStyle()
        styleBottom =xlwt.XFStyle()
        styleLeft=xlwt.XFStyle()
        styleBottomLeft =xlwt.XFStyle()
        styleBottomRight=xlwt.XFStyle()

        #Alignment Center
        alignment = xlwt.Alignment()
        alignment.horz = xlwt.Alignment.HORZ_CENTER
        alignment.vert = xlwt.Alignment.VERT_CENTER
        alignment.Wrap = 1
        styleColumns.alignment = alignment
        styleColumns.alignment.wrap = 1
        styleColumns.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'


        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        styleTitleDetails.borders = border
        styleTitleAmount.borders = border
        styleColumns.borders = border

        #border Data
        borderdata = xlwt.Borders()
        borderdata.bottom = xlwt.Borders.NO_LINE
        borderdata.top = xlwt.Borders.NO_LINE
        borderdata.left = xlwt.Borders.THIN
        borderdata.right = xlwt.Borders.THIN

        borderdataBottom = xlwt.Borders()
        borderdataBottom.bottom = xlwt.Borders.THIN
        borderdataBottom.top = xlwt.Borders.NO_LINE
        borderdataBottom.left = xlwt.Borders.THIN
        borderdataBottom.right = xlwt.Borders.THIN

        borderLeft = xlwt.Borders()
        borderLeft.bottom = xlwt.Borders.NO_LINE
        borderLeft.top = xlwt.Borders.NO_LINE
        borderLeft.left = xlwt.Borders.THIN
        borderLeft.right = xlwt.Borders.NO_LINE

        borderdataBottomLeft = xlwt.Borders()
        borderdataBottomLeft.bottom = xlwt.Borders.THIN
        borderdataBottomLeft.top = xlwt.Borders.NO_LINE
        borderdataBottomLeft.left = xlwt.Borders.THIN
        borderdataBottomLeft.right = xlwt.Borders.NO_LINE

        borderBottom_in_name = xlwt.Borders()
        borderBottom_in_name.bottom = xlwt.Borders.THIN
        borderBottom_in_name.top = xlwt.Borders.NO_LINE
        borderBottom_in_name.left = xlwt.Borders.NO_LINE
        borderBottom_in_name.right = xlwt.Borders.NO_LINE

        styleBottomLeft.borders = borderdataBottomLeft
        styleLeft.borders = borderLeft
        styleData.borders = borderdata
        styleBottom.borders = borderdataBottom
        styleBottom_in_name.borders = borderBottom_in_name

        styleData.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleLeft.num_format_str = '00'
        #font
        font = xlwt.Font()
        font.name = 'Arial'
        font.height =120

        #Creation of Position Background Colour
        xlwt.add_palette_colour("custom_colour", 0x21)
        workbook.set_colour_RGB(0x21,  196, 215, 155)

        subtotal_color = xlwt.XFStyle()
        pattern = xlwt.Pattern()
        pattern.pattern = xlwt.Pattern.SOLID_PATTERN
        pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
        subtotal_color.pattern = pattern

        job_background_color = xlwt.easyxf('pattern: pattern solid, fore_colour custom_colour')
        job_background_color.alignment = alignment
        job_background_color.alignment.wrap = 1
        job_background_color.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'

        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        job_background_color.borders = border
        job_background_color.font.bold =True


        dict_filter = [('main_detail_id','=', self.customer_id.id)]
        #Search Branches in Selected Company
        if len(self.customer_branches_id) > 0:
            dict_filter.append(('id', '=', self.customer_branches_id.id))

        model_cust_branches = self.env['res.customer.branches'].search(dict_filter)
        sub_total_amount = 0

        intRow = 1
        for cust_branch in model_cust_branches:

            int_project_total_less_day = 0
            int_project_total_tardiness = 0
            curr_total_project_straight_duty = 0
            curr_total_project_night_diff = 0
            curr_total_project_overtime_regular = 0
            curr_total_project_restday = 0
            curr_total_project_overtime_restday = 0
            curr_total_project_special_holiday = 0
            curr_total_project_overtime_special_holiday = 0
            curr_total_project_legal_holiday = 0
            curr_total_project_overtime_legal_holiday = 0
            curr_total_project_amount_contract = 0
            curr_total_project_amount_less_day = 0
            curr_total_project_amount_tardiness_ut = 0
            curr_total_project_amount_night_diff = 0
            curr_total_project_amount_straight_duty = 0
            curr_total_project_amount_overtime_reqular = 0
            curr_total_project_amount_restday = 0
            curr_total_project_amount_overtime_restday = 0
            curr_total_project_amount_amount_special_holiday = 0
            curr_total_project_amount_overtime_special_holiday = 0
            curr_total_project_amount_legal_holiday = 0
            curr_total_project_amount_overtime_legal_holiday = 0
            curr_total_project_amount_thirteenth_month = 0
            curr_total_project_amount_incentive_leaves = 0
            curr_total_project_amount_allowance = 0
            curr_total_project_amount_overheadcost = 0
            curr_total_project_amount_govt_inc = 0
            curr_total_project_amount_supplies = 0
            curr_total_project_amount_total = 0

            curr_total_project_amount_supplies = 0
            curr_total_project_amount_uniform_allowance = 0
            curr_total_project_amount_equipment  = 0

            #Get Company Information
            company = self.env['res.company'].search([('id','=',1)])

            sheet.write(intRow,1,"FR :",styleTitleFrom)
            sheet.write(intRow,2,company.name,styleTitleFrom)
            intRow +=1
            sheet.write(intRow,1,"TO :",styleTitleTo)
            sheet.write(intRow,2,cust_branch.name,styleTitleRe)
            intRow +=1
            intRow_RE = intRow
            sheet.write(intRow,1,"RE :",styleTitleRe)
            intRow +=2
            sheet.write_merge(intRow,intRow, 1,15, "DETAILS", styleColumns)
            sheet.write_merge(intRow,intRow, 16,36, "AMOUNT", styleColumns)
            intRow +=1
            #Columns
            sheet.write_merge(intRow,intRow+6, 1,4, "Name of Employee", styleColumns)
            sheet.write_merge(intRow,intRow+5, 5,5, "Add'l/Less Days", styleColumns)
            sheet.write_merge(intRow,intRow+5,6,6,"Late/UT",styleColumns)
            sheet.write_merge(intRow,intRow+5,7,7,"Straight Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,8,8,"Night Diff.",styleColumns)
            sheet.write_merge(intRow,intRow+5,9,9,"OT - Regular",styleColumns)
            sheet.write_merge(intRow,intRow+5,10,10,"OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,11,11,"Excess OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,12,12,"Special Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,13,13,"OT - Special Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,14,14,"Legal Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,15,15,"OT - Legal Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,16,16,"Contract Amount",styleColumns)
            sheet.write_merge(intRow,intRow+5,17,17,"Add'l Less Days",styleColumns)
            sheet.write_merge(intRow,intRow+5,18,18,"Late/UT",styleColumns)
            sheet.write_merge(intRow,intRow+5,19,19,"Night Diff",styleColumns)
            sheet.write_merge(intRow,intRow+5,20,20,"Straight Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,21,21,"OT - Regular",styleColumns)
            sheet.write_merge(intRow,intRow+5,22,22,"OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,23,23,"Excess OT - Rest Day",styleColumns)
            sheet.write_merge(intRow,intRow+5,24,24,"Special Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,25,25,"OT - Special Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,26,26,"Legal Holiday w/ Duty",styleColumns)
            sheet.write_merge(intRow,intRow+5,27,27,"OT - Legal Holiday",styleColumns)
            sheet.write_merge(intRow,intRow+5,28,28,"13th Month Pay",styleColumns)
            sheet.write_merge(intRow,intRow+5,29,29,"5 Days Incentive Leave",styleColumns)
            sheet.write_merge(intRow,intRow+5,30,30,"Allowance",styleColumns)
            sheet.write_merge(intRow,intRow+5,31,31,"Overhead Cost",styleColumns)
            sheet.write_merge(intRow,intRow+5,32,32,"Govt Inc.",styleColumns)

            sheet.write_merge(intRow,intRow+5,33,33,"Supplies",styleColumns)
            sheet.write_merge(intRow,intRow+5,34,34,"Uniform Allowance",styleColumns)
            sheet.write_merge(intRow,intRow+5,35,35,"Equipment",styleColumns)

            sheet.write_merge(intRow,intRow+6,36,36,"Total",styleColumns)

            intRow += 6
            #Days/per hours
            sheet.write(intRow,5,"(days)",styleColumns)
            sheet.write(intRow,6,"(mins)",styleColumns)
            sheet.write(intRow,7,"(hrs)",styleColumns)
            sheet.write(intRow,8,"(hrs)",styleColumns)
            sheet.write(intRow,9,"(hrs)",styleColumns)
            sheet.write(intRow,10,"(hrs)",styleColumns)
            sheet.write(intRow,11,"(hrs)",styleColumns)
            sheet.write(intRow,12,"(hrs)",styleColumns)
            sheet.write(intRow,13,"(hrs)",styleColumns)
            sheet.write(intRow,14,"(hrs)",styleColumns)
            sheet.write(intRow,15,"(hrs)",styleColumns)
            sheet.write(intRow,16,"(per mo.)",styleColumns)
            sheet.write(intRow,17,"(per day)",styleColumns)
            sheet.write(intRow,18,"(per min)",styleColumns)
            sheet.write(intRow,19,"(per hr)",styleColumns)
            sheet.write(intRow,20,"(per hr)",styleColumns)
            sheet.write(intRow,21,"(per hr)",styleColumns)
            sheet.write(intRow,22,"(per hr)",styleColumns)
            sheet.write(intRow,23,"(per hr)",styleColumns)
            sheet.write(intRow,24,"(per hr)",styleColumns)
            sheet.write(intRow,25,"(per hr)",styleColumns)
            sheet.write(intRow,26,"(per hr)",styleColumns)
            sheet.write(intRow,27,"(per hr)",styleColumns)
            sheet.write(intRow,28,"(pesos)",styleColumns)
            sheet.write(intRow,29,"(pesos)",styleColumns)
            sheet.write(intRow,30,"(pesos)",styleColumns)
            sheet.write(intRow,31,"(pesos)",styleColumns)
            sheet.write(intRow,32,"(pesos)",styleColumns)

            sheet.write(intRow,33,"(pesos)",styleColumns)
            sheet.write(intRow,34,"(pesos)",styleColumns)
            sheet.write(intRow,35,"(pesos)",styleColumns)


            #Getting the Parameters Per Job Postion
            dict_filter =[]
            dict_filter = [('customer_id','=', cust_branch.customer_info.id)]
            if len(self.job_id)>0:
                dict_filter.append(('job_id','=', self.job_id.id))

            model_workhourtype = self.env['hr.workhourtype']
            model_client_billing_info = self.env['res.customer.setup'].search(dict_filter)
            #intRow = 12

            for project_setup in model_client_billing_info:
                intRow +=1
                sheet.write_merge(intRow,intRow, 1,4, project_setup.job_id.name, job_background_color)
                for i in range(5,37):
                    sheet.write(intRow,i,"",job_background_color)

                #SETUP PROJECT INFORMATION
                if project_setup.factor_days > 0:
                    monthly_cost = (project_setup.daily_rate * project_setup.factor_days) / constants.MONTHS_IN_YEAR
                    daily_rate  = project_setup.daily_rate
                else:
                    monthly_cost  = 0
                    daily_rate  = 0

                hourly_rate = daily_rate / constants.HOURS_PER_DAY

                sheet.write(intRow,16,round(monthly_cost,2), job_background_color)
                sheet.write(intRow,17,round(daily_rate,2) ,job_background_color)
                sheet.write(intRow,18,round(hourly_rate/constants.MINUTES,2),job_background_color)
                sheet.write(intRow,19,round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),2),job_background_color)
                sheet.write(intRow,20,round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),2),job_background_color)
                sheet.write(intRow,21,round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate),2),job_background_color)
                sheet.write(intRow,22,round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,23,round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,24,round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,25,round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,26,round(model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,27,round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,28,round(project_setup.thirteenth_month,2),job_background_color)
                sheet.write(intRow,29,round(project_setup.incentive_leaves,2),job_background_color)
                sheet.write(intRow,30,round(project_setup.allowance,2),job_background_color)
                sheet.write(intRow,31,str(int(project_setup.overhead_cost)) + "%",job_background_color)
                sheet.write(intRow,32,round(project_setup.due_to_government,2),job_background_color)
                sheet.write(intRow,33,round(project_setup.supplies,2),job_background_color)

                sheet.write(intRow,33,round(project_setup.supplies,2),styleColumns)
                sheet.write(intRow,34,round(project_setup.uniform_allowance,2),styleColumns)
                sheet.write(intRow,35,round(project_setup.equipment,2),styleColumns)

                #START CREATION OF DATA
                intRow +=1
                model_billing_detail = self.env['billing.detail'].search([ ('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                                           ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter),
                                                                           ('billing_main_id.customer_id', '=', project_setup.customer_id.id),
                                                                           ('billing_main_id.job_id', '=', project_setup.job_id.id)])

                if len(model_billing_detail) > 0:
                    for employee in model_billing_detail:
                        sheet.write(intRow_RE,2,"BILLING - " + str(employee.billing_main_id.attendance_id.schedule_datefrom) + ' - ' + str(employee.billing_main_id.attendance_id.schedule_dateto) ,styleTitleRe)
                        fontData = xlwt.Font()
                        styleEmployeeName = xlwt.XFStyle()
                        #To Check if Employee has a reliever or not
                        if employee.has_a_reliever == True:
                            fontData.colour_index = 0x0A
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                        elif employee.is_reliever == True:
                            fontData.colour_index = 0x0C
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, "**", styleLeft)
                            #sheet.write(intRow, 2, "**",styleEmployeeName)
                            sheet.write(intRow, 2, employee.employee_reliever_id.name,styleEmployeeName)
                        else:
                            fontData.colour_index = 0x08
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                        sheet.write(intRow,5,employee.details_less_day,styleData)
                        sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                        sheet.write(intRow,7,employee.details_straight_duty,styleData)
                        sheet.write(intRow,8,employee.details_night_diff,styleData)
                        sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                        sheet.write(intRow,10,employee.details_restday,styleData)
                        sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                        sheet.write(intRow,12,employee.details_special_holiday,styleData)
                        sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                        sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                        sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)
                        sheet.write(intRow,16,employee.amount_contract,styleData)
                        sheet.write(intRow,17,employee.amount_less_day,styleData)
                        sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)
                        sheet.write(intRow,19,employee.amount_night_diff,styleData)
                        sheet.write(intRow,20,employee.amount_straight_duty,styleData)
                        sheet.write(intRow,21,employee.amount_overtime_reqular,styleData)
                        sheet.write(intRow,22,employee.amount_restday,styleData)
                        sheet.write(intRow,23,employee.amount_overtime_restday,styleData)
                        sheet.write(intRow,24,employee.amount_special_holiday,styleData)
                        sheet.write(intRow,25,employee.amount_overtime_special_holiday,styleData)
                        sheet.write(intRow,26,employee.amount_legal_holiday,styleData)
                        sheet.write(intRow,27,employee.amount_overtime_legal_holiday,styleData)
                        sheet.write(intRow,28,employee.amount_thirteenth_month,styleData)
                        sheet.write(intRow,29,employee.amount_incentive_leaves,styleData)
                        sheet.write(intRow,30,employee.amount_allowance,styleData)
                        sheet.write(intRow,31,employee.amount_overheadcost,styleData)
                        sheet.write(intRow,32,employee.amount_govt_inc,styleData)
                        sheet.write(intRow,33,employee.amount_supplies,styleData)

                        sheet.write(intRow,33,employee.amount_supplies,styleData)
                        sheet.write(intRow,34,employee.amount_uniform_allowance,styleData)
                        sheet.write(intRow,35,employee.amount_equipment,styleData)

                        sheet.write(intRow,36,employee.amount_total,styleData)
                        intRow +=1

                    sheet.write(intRow,1,"",styleBottomLeft)
                    sheet.write(intRow,2,"",styleBottom_in_name)
                    sheet.write(intRow,3,"",styleBottom_in_name)
                    sheet.write(intRow,4,"",styleBottom_in_name)

                    border = xlwt.Borders()
                    border.bottom = xlwt.Borders.THIN
                    border.top = xlwt.Borders.THIN
                    border.left = xlwt.Borders.THIN
                    border.right = xlwt.Borders.THIN

                    styleDataFooter =xlwt.XFStyle()
                    styleDataFooter.font.bold = True
                    styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
                    pattern = xlwt.Pattern()
                    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
                    pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
                    styleDataFooter.pattern = pattern
                    styleDataFooter.borders = border
                    #styleDataFooter.alignment = 1

                    sheet.write_merge(intRow,intRow, 1,4, "SUBTOTAL", styleDataFooter)
                    int_total_less_day = sum(employee.details_less_day  for employee in model_billing_detail)
                    int_total_tardiness = sum(employee.details_tardiness_ut  for employee in model_billing_detail)
                    curr_total_straight_duty = sum(employee.details_straight_duty  for employee in model_billing_detail)
                    curr_total_night_diff = sum(employee.details_night_diff  for employee in model_billing_detail)
                    curr_total_overtime_regular = sum(employee.details_overtime_reqular  for employee in model_billing_detail)
                    curr_total_restday = sum(employee.details_restday  for employee in model_billing_detail)
                    curr_total_overtime_restday = sum(employee.details_overtime_restday  for employee in model_billing_detail)
                    curr_total_special_holiday = sum(employee.details_special_holiday  for employee in model_billing_detail)
                    curr_total_overtime_special_holiday = sum(employee.details_overtime_special_holiday  for employee in model_billing_detail)
                    curr_total_legal_holiday = sum(employee.details_legal_holiday  for employee in model_billing_detail)
                    curr_total_overtime_legal_holiday = sum(employee.details_overtime_legal_holiday  for employee in model_billing_detail)
                    curr_total_amount_contract = sum(employee.amount_contract  for employee in model_billing_detail)
                    curr_total_amount_less_day = sum(employee.amount_less_day  for employee in model_billing_detail)
                    curr_total_amount_tardiness_ut = sum(employee.amount_tardiness_ut for employee in model_billing_detail)
                    curr_total_amount_night_diff = sum(employee.amount_night_diff for employee in model_billing_detail)
                    curr_total_amount_straight_duty = sum(employee.amount_straight_duty for employee in model_billing_detail)
                    curr_total_amount_overtime_reqular = sum(employee.amount_overtime_reqular for employee in model_billing_detail)
                    curr_total_amount_restday = sum(employee.amount_restday for employee in model_billing_detail)
                    curr_total_amount_overtime_restday = sum(employee.amount_overtime_restday for employee in model_billing_detail)
                    curr_total_amount_amount_special_holiday = sum(employee.amount_special_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_special_holiday = sum(employee.amount_overtime_special_holiday for employee in model_billing_detail)
                    curr_total_amount_legal_holiday = sum(employee.amount_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_legal_holiday = sum(employee.amount_overtime_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_thirteenth_month = sum(employee.amount_thirteenth_month for employee in model_billing_detail)
                    curr_total_amount_incentive_leaves = sum(employee.amount_incentive_leaves for employee in model_billing_detail)
                    curr_total_amount_allowance = sum(employee.amount_allowance for employee in model_billing_detail)
                    curr_total_amount_overheadcost = sum(employee.amount_overheadcost for employee in model_billing_detail)
                    curr_total_amount_govt_inc = sum(employee.amount_govt_inc for employee in model_billing_detail)
                    curr_total_amount_total = sum(employee.amount_total for employee in model_billing_detail)

                    curr_total_amount_supplies = sum(employee.amount_supplies for employee in model_billing_detail)
                    curr_total_amount_uniform_allowance = sum(employee.amount_uniform_allowance for employee in model_billing_detail)
                    curr_total_amount_equipment = sum(employee.amount_equipment for employee in model_billing_detail)

                    if curr_total_straight_duty ==0:
                        sheet.col(7).hidden = True
                        sheet.col(20).hidden = True

                    if curr_total_night_diff ==0:
                        sheet.col(8).hidden = True
                        sheet.col(19).hidden = True

                    if curr_total_overtime_regular ==0:
                        sheet.col(9).hidden = True
                        sheet.col(21).hidden = True

                    if curr_total_restday ==0:
                        sheet.col(10).hidden = True
                        sheet.col(22).hidden = True

                    if curr_total_overtime_restday == 0:
                        sheet.col(11).hidden = True
                        sheet.col(23).hidden = True

                    if curr_total_special_holiday == 0:
                        sheet.col(12).hidden = True
                        sheet.col(24).hidden = True

                    if curr_total_overtime_special_holiday == 0:
                        sheet.col(13).hidden = True
                        sheet.col(25).hidden = True


                    if curr_total_legal_holiday == 0:
                        sheet.col(14).hidden = True
                        sheet.col(26).hidden = True

                    if curr_total_overtime_legal_holiday ==0:
                        sheet.col(15).hidden = True
                        sheet.col(27).hidden = True

                    if curr_total_amount_supplies  == 0:
                        sheet.col(33).hidden = True

                    if curr_total_amount_uniform_allowance == 0:
                        sheet.col(34).hidden = True

                    if curr_total_amount_equipment == 0:
                        sheet.col(35).hidden = True

                    sheet.write(intRow,5,int_total_less_day,styleDataFooter)
                    sheet.write(intRow,6,int_total_tardiness,styleDataFooter)
                    sheet.write(intRow,7,curr_total_straight_duty,styleDataFooter)
                    sheet.write(intRow,8,curr_total_night_diff,styleDataFooter)
                    sheet.write(intRow,9,curr_total_overtime_regular,styleDataFooter)
                    sheet.write(intRow,10,curr_total_restday,styleDataFooter)
                    sheet.write(intRow,11,curr_total_overtime_restday,styleDataFooter)
                    sheet.write(intRow,12,curr_total_special_holiday,styleDataFooter)
                    sheet.write(intRow,13,curr_total_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,14,curr_total_legal_holiday,styleDataFooter)
                    sheet.write(intRow,15,curr_total_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,16,curr_total_amount_contract,styleDataFooter)
                    sheet.write(intRow,17,curr_total_amount_less_day,styleDataFooter)
                    sheet.write(intRow,18,curr_total_amount_tardiness_ut,styleDataFooter)
                    sheet.write(intRow,19,curr_total_amount_night_diff,styleDataFooter)
                    sheet.write(intRow,20,curr_total_amount_straight_duty,styleDataFooter)
                    sheet.write(intRow,21,curr_total_amount_overtime_reqular,styleDataFooter)
                    sheet.write(intRow,22,curr_total_amount_restday,styleDataFooter)
                    sheet.write(intRow,23,curr_total_amount_overtime_restday,styleDataFooter)
                    sheet.write(intRow,24,curr_total_amount_amount_special_holiday,styleDataFooter)
                    sheet.write(intRow,25,curr_total_amount_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,26,curr_total_amount_legal_holiday,styleDataFooter)
                    sheet.write(intRow,27,curr_total_amount_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,28,curr_total_amount_thirteenth_month,styleDataFooter)
                    sheet.write(intRow,29,curr_total_amount_incentive_leaves,styleDataFooter)
                    sheet.write(intRow,30,curr_total_amount_allowance,styleDataFooter)
                    sheet.write(intRow,31,curr_total_amount_overheadcost,styleDataFooter)
                    sheet.write(intRow,32,curr_total_amount_govt_inc,styleDataFooter)
                    sheet.write(intRow,33,curr_total_amount_supplies,styleDataFooter)

                    sheet.write(intRow,33,curr_total_amount_supplies,styleDataFooter)
                    sheet.write(intRow,34,curr_total_amount_uniform_allowance,styleDataFooter)
                    sheet.write(intRow,35,curr_total_amount_equipment,styleDataFooter)

                    sheet.write(intRow,36,curr_total_amount_total,styleDataFooter)

                    int_project_total_less_day +=int_total_less_day
                    int_project_total_tardiness +=int_total_tardiness
                    curr_total_project_straight_duty +=curr_total_straight_duty
                    curr_total_project_night_diff +=curr_total_night_diff
                    curr_total_project_overtime_regular +=curr_total_overtime_regular
                    curr_total_project_restday +=curr_total_restday
                    curr_total_project_overtime_restday +=curr_total_overtime_restday
                    curr_total_project_special_holiday +=curr_total_special_holiday
                    curr_total_project_overtime_special_holiday +=curr_total_overtime_special_holiday
                    curr_total_project_legal_holiday +=curr_total_legal_holiday
                    curr_total_project_overtime_legal_holiday +=curr_total_overtime_legal_holiday
                    curr_total_project_amount_contract +=curr_total_amount_contract
                    curr_total_project_amount_less_day +=curr_total_amount_less_day
                    curr_total_project_amount_tardiness_ut +=curr_total_amount_tardiness_ut
                    curr_total_project_amount_night_diff +=curr_total_amount_night_diff
                    curr_total_project_amount_straight_duty +=curr_total_amount_straight_duty
                    curr_total_project_amount_overtime_reqular +=curr_total_amount_overtime_reqular
                    curr_total_project_amount_restday +=curr_total_amount_restday
                    curr_total_project_amount_overtime_restday +=curr_total_amount_overtime_restday
                    curr_total_project_amount_amount_special_holiday +=curr_total_amount_amount_special_holiday
                    curr_total_project_amount_overtime_special_holiday +=curr_total_amount_overtime_special_holiday
                    curr_total_project_amount_legal_holiday +=curr_total_amount_legal_holiday
                    curr_total_project_amount_overtime_legal_holiday +=curr_total_amount_overtime_legal_holiday
                    curr_total_project_amount_thirteenth_month +=curr_total_amount_thirteenth_month
                    curr_total_project_amount_incentive_leaves +=curr_total_amount_incentive_leaves
                    curr_total_project_amount_allowance +=curr_total_amount_allowance
                    curr_total_project_amount_overheadcost +=curr_total_amount_overheadcost
                    curr_total_project_amount_govt_inc +=curr_total_amount_govt_inc
                    curr_total_project_amount_supplies +=curr_total_amount_supplies
                    curr_total_project_amount_total +=curr_total_amount_total

                    curr_total_project_amount_supplies   +=curr_total_amount_supplies
                    curr_total_project_amount_uniform_allowance  +=curr_total_amount_uniform_allowance
                    curr_total_project_amount_equipment  +=curr_total_amount_equipment


                    sub_total_amount += curr_total_amount_total

                    intRow +=1
                    sheet.write_merge(intRow,intRow, 1,4, "", styleBottom)
                    for intRowBottom in range(5,37):
                        sheet.write(intRow,intRowBottom,"",styleBottom)

            styleDataFooter =xlwt.XFStyle()
            styleDataFooter.font.bold = True
            styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'

            intRow +=2
            sheet.write_merge(intRow,intRow, 1,4, "TOTAL", styleDataFooter)
            sheet.write(intRow,5,int_project_total_less_day,styleDataFooter)
            sheet.write(intRow,6,int_project_total_tardiness,styleDataFooter)
            sheet.write(intRow,7,curr_total_project_straight_duty,styleDataFooter)
            sheet.write(intRow,8,curr_total_project_night_diff,styleDataFooter)
            sheet.write(intRow,9,curr_total_project_overtime_regular,styleDataFooter)
            sheet.write(intRow,10,curr_total_project_restday,styleDataFooter)
            sheet.write(intRow,11,curr_total_project_overtime_restday,styleDataFooter)
            sheet.write(intRow,12,curr_total_project_special_holiday,styleDataFooter)
            sheet.write(intRow,13,curr_total_project_overtime_special_holiday,styleDataFooter)
            sheet.write(intRow,14,curr_total_project_legal_holiday,styleDataFooter)
            sheet.write(intRow,15,curr_total_project_overtime_legal_holiday,styleDataFooter)
            sheet.write(intRow,16,curr_total_project_amount_contract,styleDataFooter)
            sheet.write(intRow,17,curr_total_project_amount_less_day,styleDataFooter)
            sheet.write(intRow,18,curr_total_project_amount_tardiness_ut,styleDataFooter)
            sheet.write(intRow,19,curr_total_project_amount_night_diff,styleDataFooter)
            sheet.write(intRow,20,curr_total_project_amount_straight_duty,styleDataFooter)
            sheet.write(intRow,21,curr_total_project_amount_overtime_reqular,styleDataFooter)
            sheet.write(intRow,22,curr_total_project_amount_restday,styleDataFooter)
            sheet.write(intRow,23,curr_total_project_amount_overtime_restday,styleDataFooter)
            sheet.write(intRow,24,curr_total_project_amount_amount_special_holiday,styleDataFooter)
            sheet.write(intRow,25,curr_total_project_amount_overtime_special_holiday,styleDataFooter)
            sheet.write(intRow,26,curr_total_project_amount_legal_holiday,styleDataFooter)
            sheet.write(intRow,27,curr_total_project_amount_overtime_legal_holiday,styleDataFooter)
            sheet.write(intRow,28,curr_total_project_amount_thirteenth_month,styleDataFooter)
            sheet.write(intRow,29,curr_total_project_amount_incentive_leaves,styleDataFooter)
            sheet.write(intRow,30,curr_total_project_amount_allowance,styleDataFooter)
            sheet.write(intRow,31,curr_total_project_amount_overheadcost,styleDataFooter)
            sheet.write(intRow,32,curr_total_project_amount_govt_inc,styleDataFooter)
            sheet.write(intRow,33,curr_total_project_amount_supplies,styleDataFooter)

            sheet.write(intRow,33,curr_total_project_amount_supplies,styleDataFooter)
            sheet.write(intRow,34,curr_total_project_amount_uniform_allowance,styleDataFooter)
            sheet.write(intRow,35,curr_total_project_amount_equipment,styleDataFooter)

            sheet.write(intRow,36,curr_total_project_amount_total,styleDataFooter)


            intRow +=2
            sheet.write(intRow,32,"Subtotal ")
            sheet.write_merge(intRow,intRow,34,36,sub_total_amount,styleFooter)
            intRow +=1

            curr_total_vat_amount = sub_total_amount * constants.VAT_RATE
            sheet.write_merge(intRow,intRow,32,33,"Add : 12% VAT ")
            sheet.write_merge(intRow,intRow,34,36,curr_total_vat_amount,styleFooter)
            intRow +=2

            sheet.write_merge(intRow,intRow,32,33,"GRAND TOTAL ")
            sheet.write_merge(intRow,intRow,34,36,curr_total_vat_amount + sub_total_amount,styleFooter)

            intRow +=5
        #BRA

        # Hide ColumnA
        sheet.col(0).hidden = True
        sheet.col(16).hidden = True

        fp = StringIO()
        workbook.save(fp)
        fp.seek(0)
        data = fp.read()
        fp.close()
        byte_arr = base64.b64encode(data)
        self.billing_file = byte_arr

    # MERGE REPORTS

    @api.one
    def ReportBreakDown_Merge(self):

        #Excel File Generation
        if self.job_id.name == False:
            job_name = ""
        else:
            job_name =self.job_id.name

        workbook = xlwt.Workbook()
        sheet = workbook.add_sheet("Billing - " + job_name, True)

        styleTitleFrom =xlwt.XFStyle()
        styleTitleTo =xlwt.XFStyle()
        styleTitleRe =xlwt.XFStyle()
        styleTitleDetails =xlwt.XFStyle()
        styleTitleAmount =xlwt.XFStyle()
        styleColumns =xlwt.XFStyle()
        styleData =xlwt.XFStyle()
        styleBottom_in_name = xlwt.XFStyle()
        styleFooter = xlwt.XFStyle()
        styleBottom =xlwt.XFStyle()
        styleLeft=xlwt.XFStyle()
        styleBottomLeft =xlwt.XFStyle()
        styleBottomRight=xlwt.XFStyle()

        #Alignment Center
        alignment = xlwt.Alignment()
        alignment.horz = xlwt.Alignment.HORZ_CENTER
        alignment.vert = xlwt.Alignment.VERT_CENTER
        alignment.Wrap = 1
        styleColumns.alignment = alignment
        styleColumns.alignment.wrap = 1
        styleColumns.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'


        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        styleTitleDetails.borders = border
        styleTitleAmount.borders = border
        styleColumns.borders = border

        #border Data
        borderdata = xlwt.Borders()
        borderdata.bottom = xlwt.Borders.NO_LINE
        borderdata.top = xlwt.Borders.NO_LINE
        borderdata.left = xlwt.Borders.THIN
        borderdata.right = xlwt.Borders.THIN

        borderdataBottom = xlwt.Borders()
        borderdataBottom.bottom = xlwt.Borders.THIN
        borderdataBottom.top = xlwt.Borders.NO_LINE
        borderdataBottom.left = xlwt.Borders.THIN
        borderdataBottom.right = xlwt.Borders.THIN

        borderLeft = xlwt.Borders()
        borderLeft.bottom = xlwt.Borders.NO_LINE
        borderLeft.top = xlwt.Borders.NO_LINE
        borderLeft.left = xlwt.Borders.THIN
        borderLeft.right = xlwt.Borders.NO_LINE

        borderdataBottomLeft = xlwt.Borders()
        borderdataBottomLeft.bottom = xlwt.Borders.THIN
        borderdataBottomLeft.top = xlwt.Borders.NO_LINE
        borderdataBottomLeft.left = xlwt.Borders.THIN
        borderdataBottomLeft.right = xlwt.Borders.NO_LINE

        borderBottom_in_name = xlwt.Borders()
        borderBottom_in_name.bottom = xlwt.Borders.THIN
        borderBottom_in_name.top = xlwt.Borders.NO_LINE
        borderBottom_in_name.left = xlwt.Borders.NO_LINE
        borderBottom_in_name.right = xlwt.Borders.NO_LINE

        styleBottomLeft.borders = borderdataBottomLeft
        styleLeft.borders = borderLeft
        styleData.borders = borderdata
        styleBottom.borders = borderdataBottom
        styleBottom_in_name.borders = borderBottom_in_name

        styleData.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleLeft.num_format_str = '00'
        #font
        font = xlwt.Font()
        font.name = 'Arial'
        font.height =120

        #Creation of Position Background Colour
        xlwt.add_palette_colour("custom_colour", 0x21)
        workbook.set_colour_RGB(0x21,  196, 215, 155)

        subtotal_color = xlwt.XFStyle()
        pattern = xlwt.Pattern()
        pattern.pattern = xlwt.Pattern.SOLID_PATTERN
        pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
        subtotal_color.pattern = pattern

        job_background_color = xlwt.easyxf('pattern: pattern solid, fore_colour custom_colour')
        job_background_color.alignment = alignment
        job_background_color.alignment.wrap = 1
        job_background_color.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'

        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        job_background_color.borders = border
        job_background_color.font.bold =True



        dict_filter = [('main_detail_id','=', self.customer_id.id)]
        #Search Branches in Selected Company
        if len(self.customer_branches_id) > 0:
            dict_filter.append(('id', '=', self.customer_branches_id.id))

        model_cust_branches = self.env['res.customer.branches'].search(dict_filter)
        sub_total_amount = 0

        intRow=1

        #Get Company Information
        company = self.env['res.company'].search([('id','=',1)])

        sheet.write(intRow,1,"FR :",styleTitleFrom)
        sheet.write(intRow,2,company.name,styleTitleFrom)
        intRow +=1
        sheet.write(intRow,1,"TO :",styleTitleTo)
        sheet.write(intRow,2,self.customer_id.name,styleTitleRe)
        intRow +=1
        intRow_RE = intRow
        sheet.write(intRow,1,"RE :",styleTitleRe)
        intRow +=2
        sheet.write_merge(intRow,intRow, 1,15, "DETAILS", styleColumns)
        sheet.write_merge(intRow,intRow, 16,36, "AMOUNT", styleColumns)
        intRow +=1
        #Columns
        sheet.write_merge(intRow,intRow+6, 1,4, "Name of Employee", styleColumns)
        sheet.write_merge(intRow,intRow+5, 5,5, "Add'l/Less Days", styleColumns)
        sheet.write_merge(intRow,intRow+5,6,6,"Late/UT",styleColumns)
        sheet.write_merge(intRow,intRow+5,7,7,"Straight Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,8,8,"Night Diff.",styleColumns)
        sheet.write_merge(intRow,intRow+5,9,9,"OT - Regular",styleColumns)
        sheet.write_merge(intRow,intRow+5,10,10,"OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,11,11,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,12,12,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,13,13,"OT - Special Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,14,14,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,15,15,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,16,16,"Contract Amount",styleColumns)
        sheet.write_merge(intRow,intRow+5,17,17,"Add'l Less Days",styleColumns)
        sheet.write_merge(intRow,intRow+5,18,18,"Late/UT",styleColumns)
        sheet.write_merge(intRow,intRow+5,19,19,"Night Diff",styleColumns)
        sheet.write_merge(intRow,intRow+5,20,20,"Straight Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,21,21,"OT - Regular",styleColumns)
        sheet.write_merge(intRow,intRow+5,22,22,"OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,23,23,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,24,24,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,25,25,"OT - Special Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,26,26,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,27,27,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,28,28,"13th Month Pay",styleColumns)
        sheet.write_merge(intRow,intRow+5,29,29,"5 Days Incentive Leave",styleColumns)
        sheet.write_merge(intRow,intRow+5,30,30,"Allowance",styleColumns)
        sheet.write_merge(intRow,intRow+5,31,31,"Overhead Cost",styleColumns)
        sheet.write_merge(intRow,intRow+5,32,32,"Govt Inc.",styleColumns)
        sheet.write_merge(intRow,intRow+5,33,33,"Supplies",styleColumns)
        sheet.write_merge(intRow,intRow+5,34,34,"Uniform Allowance",styleColumns)
        sheet.write_merge(intRow,intRow+5,35,35,"Equipment",styleColumns)

        sheet.write_merge(intRow,intRow+6,36,36,"Total",styleColumns)

        intRow += 6
        #Days/per hours
        sheet.write(intRow,5,"(days)",styleColumns)
        sheet.write(intRow,6,"(mins)",styleColumns)
        sheet.write(intRow,7,"(hrs)",styleColumns)
        sheet.write(intRow,8,"(hrs)",styleColumns)
        sheet.write(intRow,9,"(hrs)",styleColumns)
        sheet.write(intRow,10,"(hrs)",styleColumns)
        sheet.write(intRow,11,"(hrs)",styleColumns)
        sheet.write(intRow,12,"(hrs)",styleColumns)
        sheet.write(intRow,13,"(hrs)",styleColumns)
        sheet.write(intRow,14,"(hrs)",styleColumns)
        sheet.write(intRow,15,"(hrs)",styleColumns)
        sheet.write(intRow,16,"(per mo.)",styleColumns)
        sheet.write(intRow,17,"(per day)",styleColumns)
        sheet.write(intRow,18,"(per min)",styleColumns)
        sheet.write(intRow,19,"(per hr)",styleColumns)
        sheet.write(intRow,20,"(per hr)",styleColumns)
        sheet.write(intRow,21,"(per hr)",styleColumns)
        sheet.write(intRow,22,"(per hr)",styleColumns)
        sheet.write(intRow,23,"(per hr)",styleColumns)
        sheet.write(intRow,24,"(per hr)",styleColumns)
        sheet.write(intRow,25,"(per hr)",styleColumns)
        sheet.write(intRow,26,"(per hr)",styleColumns)
        sheet.write(intRow,27,"(per hr)",styleColumns)
        sheet.write(intRow,28,"(pesos)",styleColumns)
        sheet.write(intRow,29,"(pesos)",styleColumns)
        sheet.write(intRow,30,"(pesos)",styleColumns)
        sheet.write(intRow,31,"(pesos)",styleColumns)
        sheet.write(intRow,32,"(pesos)",styleColumns)

        sheet.write(intRow,33,"(pesos)",styleColumns)
        sheet.write(intRow,34,"(pesos)",styleColumns)
        sheet.write(intRow,35,"(pesos)",styleColumns)

        intRow+=1

        int_project_total_less_day = 0
        int_project_total_tardiness = 0
        curr_total_project_straight_duty = 0
        curr_total_project_night_diff = 0
        curr_total_project_overtime_regular = 0
        curr_total_project_restday = 0
        curr_total_project_overtime_restday = 0
        curr_total_project_special_holiday = 0
        curr_total_project_overtime_special_holiday = 0
        curr_total_project_legal_holiday = 0
        curr_total_project_overtime_legal_holiday = 0
        curr_total_project_amount_contract = 0
        curr_total_project_amount_less_day = 0
        curr_total_project_amount_tardiness_ut = 0
        curr_total_project_amount_night_diff = 0
        curr_total_project_amount_straight_duty = 0
        curr_total_project_amount_overtime_reqular = 0
        curr_total_project_amount_restday = 0
        curr_total_project_amount_overtime_restday = 0
        curr_total_project_amount_amount_special_holiday = 0
        curr_total_project_amount_overtime_special_holiday = 0
        curr_total_project_amount_legal_holiday = 0
        curr_total_project_amount_overtime_legal_holiday = 0
        curr_total_project_amount_thirteenth_month = 0
        curr_total_project_amount_incentive_leaves = 0
        curr_total_project_amount_allowance = 0
        curr_total_project_amount_overheadcost = 0
        curr_total_project_amount_govt_inc = 0
        curr_total_project_amount_total = 0

        curr_total_project_amount_supplies   = 0
        curr_total_project_amount_uniform_allowance  = 0
        curr_total_project_amount_equipment  = 0

        for cust_branch in model_cust_branches:

            sheet.write_merge(intRow,intRow, 1,33, cust_branch.name, job_background_color)
            for i in range(5,37):
                sheet.write(intRow,i,"",job_background_color)

            #Getting the Parameters Per Job Postion
            dict_filter =[]
            dict_filter = [('customer_id','=', cust_branch.customer_info.id)]
            if len(self.job_id)>0:
                dict_filter.append(('job_id','=', self.job_id.id))

            model_workhourtype = self.env['hr.workhourtype']
            model_client_billing_info = self.env['res.customer.setup'].search(dict_filter)
            #intRow += 1

            for project_setup in model_client_billing_info:
                intRow +=1
                sheet.write_merge(intRow,intRow, 1,4, project_setup.job_id.name, job_background_color)
                for i in range(5,37):
                    sheet.write(intRow,i,"",job_background_color)

                #SETUP PROJECT INFORMATION
                if project_setup.factor_days > 0:
                    monthly_cost = (project_setup.daily_rate * project_setup.factor_days) / constants.MONTHS_IN_YEAR
                    daily_rate = project_setup.daily_rate
                else:
                    monthly_cost = 0
                    daily_rate = 0

                hourly_rate = daily_rate / constants.HOURS_PER_DAY

                sheet.write(intRow,16,round(monthly_cost,2), job_background_color)
                sheet.write(intRow,17,round(daily_rate,2) ,job_background_color)
                sheet.write(intRow,18,round(hourly_rate/constants.MINUTES,2),job_background_color)
                sheet.write(intRow,19,round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),2),job_background_color)
                sheet.write(intRow,20,round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),2),job_background_color)
                sheet.write(intRow,21,round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate),2),job_background_color)
                sheet.write(intRow,22,round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,23,round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,24,round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,25,round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,26,round(model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,27,round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,28,round(project_setup.thirteenth_month,2),job_background_color)
                sheet.write(intRow,29,round(project_setup.incentive_leaves,2),job_background_color)
                sheet.write(intRow,30,round(project_setup.allowance,2),job_background_color)
                sheet.write(intRow,31,str(int(project_setup.overhead_cost)) + "%",job_background_color)
                sheet.write(intRow,32,round(project_setup.due_to_government,2),job_background_color)

                sheet.write(intRow,33,round(project_setup.supplies,2),job_background_color)
                sheet.write(intRow,34,round(project_setup.uniform_allowance,2),job_background_color)
                sheet.write(intRow,35,round(project_setup.equipment,2),job_background_color)

                #START CREATION OF DATA
                intRow +=1
                model_billing_detail = self.env['billing.detail'].search([ ('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                                           ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter),
                                                                           ('billing_main_id.customer_id', '=', project_setup.customer_id.id),
                                                                           ('billing_main_id.job_id', '=', project_setup.job_id.id)])

                if len(model_billing_detail) > 0:
                    for employee in model_billing_detail:
                        sheet.write(intRow_RE,2,"BILLING - " + str(employee.billing_main_id.attendance_id.schedule_datefrom) + ' - ' + str(employee.billing_main_id.attendance_id.schedule_dateto) ,styleTitleRe)
                        fontData = xlwt.Font()
                        styleEmployeeName = xlwt.XFStyle()
                        #To Check if Employee has a reliever or not
                        if employee.has_a_reliever == True:
                            fontData.colour_index = 0x0A
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                        elif employee.is_reliever == True:
                            fontData.colour_index = 0x0C
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, "**", styleLeft)
                            #sheet.write(intRow, 2, "**",styleEmployeeName)
                            sheet.write(intRow, 2, employee.employee_reliever_id.name,styleEmployeeName)
                        else:
                            fontData.colour_index = 0x08
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                        sheet.write(intRow,5,employee.details_less_day,styleData)
                        sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                        sheet.write(intRow,7,employee.details_straight_duty,styleData)
                        sheet.write(intRow,8,employee.details_night_diff,styleData)
                        sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                        sheet.write(intRow,10,employee.details_restday,styleData)
                        sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                        sheet.write(intRow,12,employee.details_special_holiday,styleData)
                        sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                        sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                        sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)
                        sheet.write(intRow,16,employee.amount_contract,styleData)
                        sheet.write(intRow,17,employee.amount_less_day,styleData)
                        sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)
                        sheet.write(intRow,19,employee.amount_night_diff,styleData)
                        sheet.write(intRow,20,employee.amount_straight_duty,styleData)
                        sheet.write(intRow,21,employee.amount_overtime_reqular,styleData)
                        sheet.write(intRow,22,employee.amount_restday,styleData)
                        sheet.write(intRow,23,employee.amount_overtime_restday,styleData)
                        sheet.write(intRow,24,employee.amount_special_holiday,styleData)
                        sheet.write(intRow,25,employee.amount_overtime_special_holiday,styleData)
                        sheet.write(intRow,26,employee.amount_legal_holiday,styleData)
                        sheet.write(intRow,27,employee.amount_overtime_legal_holiday,styleData)
                        sheet.write(intRow,28,employee.amount_thirteenth_month,styleData)
                        sheet.write(intRow,29,employee.amount_incentive_leaves,styleData)
                        sheet.write(intRow,30,employee.amount_allowance,styleData)
                        sheet.write(intRow,31,employee.amount_overheadcost,styleData)
                        sheet.write(intRow,32,employee.amount_govt_inc,styleData)

                        sheet.write(intRow,33,employee.amount_supplies,styleData)
                        sheet.write(intRow,34,employee.amount_uniform_allowance,styleData)
                        sheet.write(intRow,35,employee.amount_equipment,styleData)

                        sheet.write(intRow,36,employee.amount_total,styleData)
                        intRow +=1

                    sheet.write(intRow,1,"",styleBottomLeft)
                    sheet.write(intRow,2,"",styleBottom_in_name)
                    sheet.write(intRow,3,"",styleBottom_in_name)
                    sheet.write(intRow,4,"",styleBottom_in_name)

                    border = xlwt.Borders()
                    border.bottom = xlwt.Borders.THIN
                    border.top = xlwt.Borders.THIN
                    border.left = xlwt.Borders.THIN
                    border.right = xlwt.Borders.THIN

                    styleDataFooter =xlwt.XFStyle()
                    styleDataFooter.font.bold = True
                    styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
                    pattern = xlwt.Pattern()
                    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
                    pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
                    styleDataFooter.pattern = pattern
                    styleDataFooter.borders = border


                    sheet.write_merge(intRow,intRow, 1,4, "SUBTOTAL", styleDataFooter)
                    int_total_less_day = sum(employee.details_less_day  for employee in model_billing_detail)
                    int_total_tardiness = sum(employee.details_tardiness_ut  for employee in model_billing_detail)
                    curr_total_straight_duty = sum(employee.details_straight_duty  for employee in model_billing_detail)
                    curr_total_night_diff = sum(employee.details_night_diff  for employee in model_billing_detail)
                    curr_total_overtime_regular = sum(employee.details_overtime_reqular  for employee in model_billing_detail)
                    curr_total_restday = sum(employee.details_restday  for employee in model_billing_detail)
                    curr_total_overtime_restday = sum(employee.details_overtime_restday  for employee in model_billing_detail)
                    curr_total_special_holiday = sum(employee.details_special_holiday  for employee in model_billing_detail)
                    curr_total_overtime_special_holiday = sum(employee.details_overtime_special_holiday  for employee in model_billing_detail)
                    curr_total_legal_holiday = sum(employee.details_legal_holiday  for employee in model_billing_detail)
                    curr_total_overtime_legal_holiday = sum(employee.details_overtime_legal_holiday  for employee in model_billing_detail)
                    curr_total_amount_contract = sum(employee.amount_contract  for employee in model_billing_detail)
                    curr_total_amount_less_day = sum(employee.amount_less_day  for employee in model_billing_detail)
                    curr_total_amount_tardiness_ut = sum(employee.amount_tardiness_ut for employee in model_billing_detail)
                    curr_total_amount_night_diff = sum(employee.amount_night_diff for employee in model_billing_detail)
                    curr_total_amount_straight_duty = sum(employee.amount_straight_duty for employee in model_billing_detail)
                    curr_total_amount_overtime_reqular = sum(employee.amount_overtime_reqular for employee in model_billing_detail)
                    curr_total_amount_restday = sum(employee.amount_restday for employee in model_billing_detail)
                    curr_total_amount_overtime_restday = sum(employee.amount_overtime_restday for employee in model_billing_detail)
                    curr_total_amount_amount_special_holiday = sum(employee.amount_special_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_special_holiday = sum(employee.amount_overtime_special_holiday for employee in model_billing_detail)
                    curr_total_amount_legal_holiday = sum(employee.amount_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_legal_holiday = sum(employee.amount_overtime_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_thirteenth_month = sum(employee.amount_thirteenth_month for employee in model_billing_detail)
                    curr_total_amount_incentive_leaves = sum(employee.amount_incentive_leaves for employee in model_billing_detail)
                    curr_total_amount_allowance = sum(employee.amount_allowance for employee in model_billing_detail)
                    curr_total_amount_overheadcost = sum(employee.amount_overheadcost for employee in model_billing_detail)
                    curr_total_amount_govt_inc = sum(employee.amount_govt_inc for employee in model_billing_detail)

                    curr_total_amount_supplies = sum(employee.amount_supplies for employee in model_billing_detail)
                    curr_total_amount_uniform_allowance = sum(employee.amount_uniform_allowance for employee in model_billing_detail)
                    curr_total_amount_equipment = sum(employee.amount_equipment for employee in model_billing_detail)

                    curr_total_amount_total = sum(employee.amount_total for employee in model_billing_detail)

                    if curr_total_straight_duty ==0:
                        sheet.col(7).hidden = True
                        sheet.col(20).hidden = True

                    if curr_total_night_diff ==0:
                        sheet.col(8).hidden = True
                        sheet.col(19).hidden = True

                    if curr_total_overtime_regular ==0:
                        sheet.col(9).hidden = True
                        sheet.col(21).hidden = True

                    if curr_total_restday ==0:
                        sheet.col(10).hidden = True
                        sheet.col(22).hidden = True

                    if curr_total_overtime_restday == 0:
                        sheet.col(11).hidden = True
                        sheet.col(23).hidden = True

                    if curr_total_special_holiday == 0:
                        sheet.col(12).hidden = True
                        sheet.col(24).hidden = True

                    if curr_total_overtime_special_holiday == 0:
                        sheet.col(13).hidden = True
                        sheet.col(25).hidden = True


                    if curr_total_legal_holiday == 0:
                        sheet.col(14).hidden = True
                        sheet.col(26).hidden = True

                    if curr_total_overtime_legal_holiday ==0:
                        sheet.col(15).hidden = True
                        sheet.col(27).hidden = True

                    if curr_total_amount_supplies  == 0:
                        sheet.col(33).hidden = True

                    if curr_total_amount_uniform_allowance == 0:
                        sheet.col(34).hidden = True

                    if curr_total_amount_equipment == 0:
                        sheet.col(35).hidden = True

                    sheet.write(intRow,5,int_total_less_day,styleDataFooter)
                    sheet.write(intRow,6,int_total_tardiness,styleDataFooter)
                    sheet.write(intRow,7,curr_total_straight_duty,styleDataFooter)
                    sheet.write(intRow,8,curr_total_night_diff,styleDataFooter)
                    sheet.write(intRow,9,curr_total_overtime_regular,styleDataFooter)
                    sheet.write(intRow,10,curr_total_restday,styleDataFooter)
                    sheet.write(intRow,11,curr_total_overtime_restday,styleDataFooter)
                    sheet.write(intRow,12,curr_total_special_holiday,styleDataFooter)
                    sheet.write(intRow,13,curr_total_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,14,curr_total_legal_holiday,styleDataFooter)
                    sheet.write(intRow,15,curr_total_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,16,curr_total_amount_contract,styleDataFooter)
                    sheet.write(intRow,17,curr_total_amount_less_day,styleDataFooter)
                    sheet.write(intRow,18,curr_total_amount_tardiness_ut,styleDataFooter)
                    sheet.write(intRow,19,curr_total_amount_night_diff,styleDataFooter)
                    sheet.write(intRow,20,curr_total_amount_straight_duty,styleDataFooter)
                    sheet.write(intRow,21,curr_total_amount_overtime_reqular,styleDataFooter)
                    sheet.write(intRow,22,curr_total_amount_restday,styleDataFooter)
                    sheet.write(intRow,23,curr_total_amount_overtime_restday,styleDataFooter)
                    sheet.write(intRow,24,curr_total_amount_amount_special_holiday,styleDataFooter)
                    sheet.write(intRow,25,curr_total_amount_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,26,curr_total_amount_legal_holiday,styleDataFooter)
                    sheet.write(intRow,27,curr_total_amount_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,28,curr_total_amount_thirteenth_month,styleDataFooter)
                    sheet.write(intRow,29,curr_total_amount_incentive_leaves,styleDataFooter)
                    sheet.write(intRow,30,curr_total_amount_allowance,styleDataFooter)
                    sheet.write(intRow,31,curr_total_amount_overheadcost,styleDataFooter)
                    sheet.write(intRow,32,curr_total_amount_govt_inc,styleDataFooter)

                    sheet.write(intRow,33,curr_total_amount_supplies,styleDataFooter)
                    sheet.write(intRow,34,curr_total_amount_uniform_allowance,styleDataFooter)
                    sheet.write(intRow,35,curr_total_amount_equipment,styleDataFooter)

                    sheet.write(intRow,36,curr_total_amount_total,styleDataFooter)

                    int_project_total_less_day +=int_total_less_day
                    int_project_total_tardiness +=int_total_tardiness
                    curr_total_project_straight_duty +=curr_total_straight_duty
                    curr_total_project_night_diff +=curr_total_night_diff
                    curr_total_project_overtime_regular +=curr_total_overtime_regular
                    curr_total_project_restday +=curr_total_restday
                    curr_total_project_overtime_restday +=curr_total_overtime_restday
                    curr_total_project_special_holiday +=curr_total_special_holiday
                    curr_total_project_overtime_special_holiday +=curr_total_overtime_special_holiday
                    curr_total_project_legal_holiday +=curr_total_legal_holiday
                    curr_total_project_overtime_legal_holiday +=curr_total_overtime_legal_holiday
                    curr_total_project_amount_contract +=curr_total_amount_contract
                    curr_total_project_amount_less_day +=curr_total_amount_less_day
                    curr_total_project_amount_tardiness_ut +=curr_total_amount_tardiness_ut
                    curr_total_project_amount_night_diff +=curr_total_amount_night_diff
                    curr_total_project_amount_straight_duty +=curr_total_amount_straight_duty
                    curr_total_project_amount_overtime_reqular +=curr_total_amount_overtime_reqular
                    curr_total_project_amount_restday +=curr_total_amount_restday
                    curr_total_project_amount_overtime_restday +=curr_total_amount_overtime_restday
                    curr_total_project_amount_amount_special_holiday +=curr_total_amount_amount_special_holiday
                    curr_total_project_amount_overtime_special_holiday +=curr_total_amount_overtime_special_holiday
                    curr_total_project_amount_legal_holiday +=curr_total_amount_legal_holiday
                    curr_total_project_amount_overtime_legal_holiday +=curr_total_amount_overtime_legal_holiday
                    curr_total_project_amount_thirteenth_month +=curr_total_amount_thirteenth_month
                    curr_total_project_amount_incentive_leaves +=curr_total_amount_incentive_leaves
                    curr_total_project_amount_allowance +=curr_total_amount_allowance
                    curr_total_project_amount_overheadcost +=curr_total_amount_overheadcost
                    curr_total_project_amount_govt_inc +=curr_total_amount_govt_inc

                    curr_total_project_amount_supplies   +=curr_total_amount_supplies
                    curr_total_project_amount_uniform_allowance  +=curr_total_amount_uniform_allowance
                    curr_total_project_amount_equipment  +=curr_total_amount_equipment

                    if curr_total_project_amount_supplies  == 0:
                        sheet.col(33).hidden = True

                    if curr_total_project_amount_uniform_allowance == 0:
                        sheet.col(34).hidden = True

                    if curr_total_project_amount_equipment == 0:
                        sheet.col(35).hidden = True


                    curr_total_project_amount_total +=curr_total_amount_total

                    sub_total_amount += curr_total_amount_total

                    intRow +=1
                    sheet.write_merge(intRow,intRow, 1,4, "", styleBottom)
                    for intRowBottom in range(5,37):
                        sheet.write(intRow,intRowBottom,"",styleBottom)

        styleDataFooter =xlwt.XFStyle()
        styleDataFooter.font.bold = True
        styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'

        intRow +=2
        sheet.write_merge(intRow,intRow, 1,4, "TOTAL", styleDataFooter)
        sheet.write(intRow,5,int_project_total_less_day,styleDataFooter)
        sheet.write(intRow,6,int_project_total_tardiness,styleDataFooter)
        sheet.write(intRow,7,curr_total_project_straight_duty,styleDataFooter)
        sheet.write(intRow,8,curr_total_project_night_diff,styleDataFooter)
        sheet.write(intRow,9,curr_total_project_overtime_regular,styleDataFooter)
        sheet.write(intRow,10,curr_total_project_restday,styleDataFooter)
        sheet.write(intRow,11,curr_total_project_overtime_restday,styleDataFooter)
        sheet.write(intRow,12,curr_total_project_special_holiday,styleDataFooter)
        sheet.write(intRow,13,curr_total_project_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,14,curr_total_project_legal_holiday,styleDataFooter)
        sheet.write(intRow,15,curr_total_project_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,16,curr_total_project_amount_contract,styleDataFooter)
        sheet.write(intRow,17,curr_total_project_amount_less_day,styleDataFooter)
        sheet.write(intRow,18,curr_total_project_amount_tardiness_ut,styleDataFooter)
        sheet.write(intRow,19,curr_total_project_amount_night_diff,styleDataFooter)
        sheet.write(intRow,20,curr_total_project_amount_straight_duty,styleDataFooter)
        sheet.write(intRow,21,curr_total_project_amount_overtime_reqular,styleDataFooter)
        sheet.write(intRow,22,curr_total_project_amount_restday,styleDataFooter)
        sheet.write(intRow,23,curr_total_project_amount_overtime_restday,styleDataFooter)
        sheet.write(intRow,24,curr_total_project_amount_amount_special_holiday,styleDataFooter)
        sheet.write(intRow,25,curr_total_project_amount_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,26,curr_total_project_amount_legal_holiday,styleDataFooter)
        sheet.write(intRow,27,curr_total_project_amount_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,28,curr_total_project_amount_thirteenth_month,styleDataFooter)
        sheet.write(intRow,29,curr_total_project_amount_incentive_leaves,styleDataFooter)
        sheet.write(intRow,30,curr_total_project_amount_allowance,styleDataFooter)
        sheet.write(intRow,31,curr_total_project_amount_overheadcost,styleDataFooter)
        sheet.write(intRow,32,curr_total_project_amount_govt_inc,styleDataFooter)

        sheet.write(intRow,33,curr_total_project_amount_supplies,styleDataFooter)
        sheet.write(intRow,34,curr_total_project_amount_uniform_allowance,styleDataFooter)
        sheet.write(intRow,35,curr_total_project_amount_equipment,styleDataFooter)

        sheet.write(intRow,36,curr_total_project_amount_total,styleDataFooter)


        intRow +=2

        #Get SubTotal Amount

        sheet.write(intRow,32,"Subtotal ")
        sheet.write_merge(intRow,intRow,34,36,sub_total_amount,styleFooter)
        intRow +=1

        curr_total_vat_amount = sub_total_amount * constants.VAT_RATE
        sheet.write_merge(intRow,intRow,32,33,"Add : 12% VAT ")
        sheet.write_merge(intRow,intRow,34,36,curr_total_vat_amount,styleFooter)
        intRow +=2

        sheet.write_merge(intRow,intRow,32,33,"GRAND TOTAL ")
        sheet.write_merge(intRow,intRow,34,36,curr_total_vat_amount + sub_total_amount,styleFooter)


        # Hide ColumnA
        sheet.col(0).hidden = True

        fp = StringIO()
        workbook.save(fp)
        fp.seek(0)
        data = fp.read()
        fp.close()
        byte_arr = base64.b64encode(data)
        self.billing_file = byte_arr

    @api.one
    def NonReportBreakdown_Merge(self):
        #Excel File Generation
        if self.job_id.name == False:
            job_name = ""
        else:
            job_name =self.job_id.name

        workbook = xlwt.Workbook()
        sheet = workbook.add_sheet("Billing - " + job_name, True)

        styleTitleFrom =xlwt.XFStyle()
        styleTitleTo =xlwt.XFStyle()
        styleTitleRe =xlwt.XFStyle()
        styleTitleDetails =xlwt.XFStyle()
        styleTitleAmount =xlwt.XFStyle()
        styleColumns =xlwt.XFStyle()
        styleData =xlwt.XFStyle()
        styleBottom_in_name = xlwt.XFStyle()
        styleFooter = xlwt.XFStyle()
        styleBottom =xlwt.XFStyle()
        styleLeft=xlwt.XFStyle()
        styleBottomLeft =xlwt.XFStyle()
        styleBottomRight=xlwt.XFStyle()

        #Alignment Center
        alignment = xlwt.Alignment()
        alignment.horz = xlwt.Alignment.HORZ_CENTER
        alignment.vert = xlwt.Alignment.VERT_CENTER
        alignment.Wrap = 1
        styleColumns.alignment = alignment
        styleColumns.alignment.wrap = 1
        styleColumns.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'


        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        styleTitleDetails.borders = border
        styleTitleAmount.borders = border
        styleColumns.borders = border

        #border Data
        borderdata = xlwt.Borders()
        borderdata.bottom = xlwt.Borders.NO_LINE
        borderdata.top = xlwt.Borders.NO_LINE
        borderdata.left = xlwt.Borders.THIN
        borderdata.right = xlwt.Borders.THIN

        borderdataBottom = xlwt.Borders()
        borderdataBottom.bottom = xlwt.Borders.THIN
        borderdataBottom.top = xlwt.Borders.NO_LINE
        borderdataBottom.left = xlwt.Borders.THIN
        borderdataBottom.right = xlwt.Borders.THIN

        borderLeft = xlwt.Borders()
        borderLeft.bottom = xlwt.Borders.NO_LINE
        borderLeft.top = xlwt.Borders.NO_LINE
        borderLeft.left = xlwt.Borders.THIN
        borderLeft.right = xlwt.Borders.NO_LINE

        borderdataBottomLeft = xlwt.Borders()
        borderdataBottomLeft.bottom = xlwt.Borders.THIN
        borderdataBottomLeft.top = xlwt.Borders.NO_LINE
        borderdataBottomLeft.left = xlwt.Borders.THIN
        borderdataBottomLeft.right = xlwt.Borders.NO_LINE

        borderBottom_in_name = xlwt.Borders()
        borderBottom_in_name.bottom = xlwt.Borders.THIN
        borderBottom_in_name.top = xlwt.Borders.NO_LINE
        borderBottom_in_name.left = xlwt.Borders.NO_LINE
        borderBottom_in_name.right = xlwt.Borders.NO_LINE

        styleBottomLeft.borders = borderdataBottomLeft
        styleLeft.borders = borderLeft
        styleData.borders = borderdata
        styleBottom.borders = borderdataBottom
        styleBottom_in_name.borders = borderBottom_in_name

        styleData.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleLeft.num_format_str = '00'
        #font
        font = xlwt.Font()
        font.name = 'Arial'
        font.height =120

        #Creation of Position Background Colour
        xlwt.add_palette_colour("custom_colour", 0x21)
        workbook.set_colour_RGB(0x21,  196, 215, 155)

        subtotal_color = xlwt.XFStyle()
        pattern = xlwt.Pattern()
        pattern.pattern = xlwt.Pattern.SOLID_PATTERN
        pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
        subtotal_color.pattern = pattern

        job_background_color = xlwt.easyxf('pattern: pattern solid, fore_colour custom_colour')
        job_background_color.alignment = alignment
        job_background_color.alignment.wrap = 1
        job_background_color.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'

        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        job_background_color.borders = border
        job_background_color.font.bold =True

        #Get Company Information
        company = self.env['res.company'].search([('id','=',1)])

        dict_filter = [('main_detail_id','=', self.customer_id.id)]
        #Search Branches in Selected Company
        if len(self.customer_branches_id) > 0:
            dict_filter.append(('id', '=', self.customer_branches_id.id))

        model_cust_branches = self.env['res.customer.branches'].search(dict_filter)
        sub_total_amount = 0


        intRow=1

        #Get Company Information
        company = self.env['res.company'].search([('id','=',1)])

        sheet.write(intRow,1,"FR :",styleTitleFrom)
        sheet.write(intRow,2,company.name,styleTitleFrom)
        intRow +=1
        sheet.write(intRow,1,"TO :",styleTitleTo)
        sheet.write(intRow,2,self.customer_id.name,styleTitleRe)
        intRow +=1
        intRow_RE = intRow
        sheet.write(intRow,1,"RE :",styleTitleRe)
        intRow +=2
        sheet.write_merge(intRow,intRow, 1,15, "DETAILS", styleColumns)
        sheet.write_merge(intRow,intRow, 16,33, "AMOUNT", styleColumns)
        intRow +=1
        #Columns
        sheet.write_merge(intRow,intRow+6, 1,4, "Name of Employee", styleColumns)
        sheet.write_merge(intRow,intRow+5, 5,5, "Add'l/Less Days", styleColumns)
        sheet.write_merge(intRow,intRow+5,6,6,"Late/UT",styleColumns)
        sheet.write_merge(intRow,intRow+5,7,7,"Straight Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,8,8,"Night Diff.",styleColumns)
        sheet.write_merge(intRow,intRow+5,9,9,"OT - Regular",styleColumns)
        sheet.write_merge(intRow,intRow+5,10,10,"OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,11,11,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,12,12,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,13,13,"OT - Special Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,14,14,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,15,15,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,16,16,"Contract Amount",styleColumns)
        sheet.write_merge(intRow,intRow+5,17,17,"Add'l Less Days",styleColumns)
        sheet.write_merge(intRow,intRow+5,18,18,"Late/UT",styleColumns)
        sheet.write_merge(intRow,intRow+5,19,19,"Night Diff",styleColumns)
        sheet.write_merge(intRow,intRow+5,20,20,"Straight Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,21,21,"OT - Regular",styleColumns)
        sheet.write_merge(intRow,intRow+5,22,22,"OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,23,23,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,24,24,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,25,25,"OT - Special Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,26,26,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,27,27,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,28,28,"13th Month Pay",styleColumns)
        sheet.write_merge(intRow,intRow+5,29,29,"5 Days Incentive Leave",styleColumns)
        sheet.write_merge(intRow,intRow+5,30,30,"Allowance",styleColumns)
        sheet.write_merge(intRow,intRow+5,31,31,"Overhead Cost",styleColumns)
        sheet.write_merge(intRow,intRow+5,32,32,"Govt Inc.",styleColumns)
        sheet.write_merge(intRow,intRow+6,33,33,"Total",styleColumns)

        intRow += 6
        #Days/per hours
        sheet.write(intRow,5,"(days)",styleColumns)
        sheet.write(intRow,6,"(mins)",styleColumns)
        sheet.write(intRow,7,"(hrs)",styleColumns)
        sheet.write(intRow,8,"(hrs)",styleColumns)
        sheet.write(intRow,9,"(hrs)",styleColumns)
        sheet.write(intRow,10,"(hrs)",styleColumns)
        sheet.write(intRow,11,"(hrs)",styleColumns)
        sheet.write(intRow,12,"(hrs)",styleColumns)
        sheet.write(intRow,13,"(hrs)",styleColumns)
        sheet.write(intRow,14,"(hrs)",styleColumns)
        sheet.write(intRow,15,"(hrs)",styleColumns)
        sheet.write(intRow,16,"(per mo.)",styleColumns)
        sheet.write(intRow,17,"(per day)",styleColumns)
        sheet.write(intRow,18,"(per min)",styleColumns)
        sheet.write(intRow,19,"(per hr)",styleColumns)
        sheet.write(intRow,20,"(per hr)",styleColumns)
        sheet.write(intRow,21,"(per hr)",styleColumns)
        sheet.write(intRow,22,"(per hr)",styleColumns)
        sheet.write(intRow,23,"(per hr)",styleColumns)
        sheet.write(intRow,24,"(per hr)",styleColumns)
        sheet.write(intRow,25,"(per hr)",styleColumns)
        sheet.write(intRow,26,"(per hr)",styleColumns)
        sheet.write(intRow,27,"(per hr)",styleColumns)
        sheet.write(intRow,28,"(pesos)",styleColumns)
        sheet.write(intRow,29,"(pesos)",styleColumns)
        sheet.write(intRow,30,"(pesos)",styleColumns)
        sheet.write(intRow,31,"(pesos)",styleColumns)
        sheet.write(intRow,32,"(pesos)",styleColumns)

        intRow+=1

        int_project_total_less_day = 0
        int_project_total_tardiness = 0
        curr_total_project_straight_duty = 0
        curr_total_project_night_diff = 0
        curr_total_project_overtime_regular = 0
        curr_total_project_restday = 0
        curr_total_project_overtime_restday = 0
        curr_total_project_special_holiday = 0
        curr_total_project_overtime_special_holiday = 0
        curr_total_project_legal_holiday = 0
        curr_total_project_overtime_legal_holiday = 0
        curr_total_project_amount_contract = 0
        curr_total_project_amount_less_day = 0
        curr_total_project_amount_tardiness_ut = 0
        curr_total_project_amount_night_diff = 0
        curr_total_project_amount_straight_duty = 0
        curr_total_project_amount_overtime_reqular = 0
        curr_total_project_amount_restday = 0
        curr_total_project_amount_overtime_restday = 0
        curr_total_project_amount_amount_special_holiday = 0
        curr_total_project_amount_overtime_special_holiday = 0
        curr_total_project_amount_legal_holiday = 0
        curr_total_project_amount_overtime_legal_holiday = 0
        curr_total_project_amount_thirteenth_month = 0
        curr_total_project_amount_incentive_leaves = 0
        curr_total_project_amount_allowance = 0
        curr_total_project_amount_overheadcost = 0
        curr_total_project_amount_govt_inc = 0
        curr_total_project_amount_total = 0
        for cust_branch in model_cust_branches:

            sheet.write_merge(intRow,intRow, 1,33, cust_branch.name, job_background_color)
            for i in range(5,34):
                sheet.write(intRow,i,"",job_background_color)

            #Getting the Parameters Per Job Postion
            dict_filter =[]
            dict_filter = [('customer_id','=', cust_branch.customer_info.id)]
            if len(self.job_id)>0:
                dict_filter.append(('job_id','=', self.job_id.id))

            model_workhourtype = self.env['hr.workhourtype']
            model_client_billing_info = self.env['res.customer.setup'].search(dict_filter)
            #intRow = 12

            for project_setup in model_client_billing_info:
                intRow +=1
                sheet.write_merge(intRow,intRow, 1,4, project_setup.job_id.name, job_background_color)
                for i in range(5,34):
                    sheet.write(intRow,i,"",job_background_color)

                #SETUP PROJECT INFORMATION
                if project_setup.factor_days > 0:
                    daily_rate = (project_setup.monthly_rate/project_setup.factor_days) * constants.MONTHS_IN_YEAR
                else:
                    daily_rate = 0


                hourly_rate = daily_rate / constants.HOURS_PER_DAY

                sheet.write(intRow,16,round(project_setup.monthly_rate,2), job_background_color)
                sheet.write(intRow,17,round(daily_rate,2) ,job_background_color)
                sheet.write(intRow,18,round(hourly_rate/constants.MINUTES,2),job_background_color)
                sheet.write(intRow,19,round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),2),job_background_color)
                sheet.write(intRow,20,round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),2),job_background_color)
                sheet.write(intRow,21,round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate),2),job_background_color)
                sheet.write(intRow,22,round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,23,round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,24,round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,25,round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,26,round(model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,27,round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,28,round(project_setup.thirteenth_month,2),job_background_color)
                sheet.write(intRow,29,round(project_setup.incentive_leaves,2),job_background_color)
                sheet.write(intRow,30,round(project_setup.allowance,2),job_background_color)
                sheet.write(intRow,31,str(int(project_setup.overhead_cost)) + "%",job_background_color)
                sheet.write(intRow,32,round(project_setup.due_to_government,2),job_background_color)


                #START CREATION OF DATA
                intRow +=1
                model_billing_detail = self.env['billing.detail'].search([ ('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                                           ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter),
                                                                           ('billing_main_id.customer_id', '=', project_setup.customer_id.id),
                                                                           ('billing_main_id.job_id', '=', project_setup.job_id.id)])

                if len(model_billing_detail) > 0:
                    for employee in model_billing_detail:
                        sheet.write(intRow_RE,2,"BILLING - " + str(employee.billing_main_id.attendance_id.schedule_datefrom) + ' - ' + str(employee.billing_main_id.attendance_id.schedule_dateto) ,styleTitleRe)
                        fontData = xlwt.Font()
                        styleEmployeeName = xlwt.XFStyle()
                        #To Check if Employee has a reliever or not
                        if employee.has_a_reliever == True:
                            fontData.colour_index = 0x0A
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                        elif employee.is_reliever == True:
                            fontData.colour_index = 0x0C
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, "**", styleLeft)
                            #sheet.write(intRow, 2, "**",styleEmployeeName)
                            sheet.write(intRow, 2, employee.employee_reliever_id.name,styleEmployeeName)
                        else:
                            fontData.colour_index = 0x08
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                        sheet.write(intRow,5,employee.details_less_day,styleData)
                        sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                        sheet.write(intRow,7,employee.details_straight_duty,styleData)
                        sheet.write(intRow,8,employee.details_night_diff,styleData)
                        sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                        sheet.write(intRow,10,employee.details_restday,styleData)
                        sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                        sheet.write(intRow,12,employee.details_special_holiday,styleData)
                        sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                        sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                        sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)
                        sheet.write(intRow,16,employee.amount_contract,styleData)
                        sheet.write(intRow,17,employee.amount_less_day,styleData)
                        sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)

                        sheet.write(intRow,19,employee.amount_night_diff,styleData)
                        sheet.write(intRow,20,employee.amount_straight_duty,styleData)
                        sheet.write(intRow,21,employee.amount_overtime_reqular,styleData)
                        sheet.write(intRow,22,employee.amount_restday,styleData)
                        sheet.write(intRow,23,employee.amount_overtime_restday,styleData)
                        sheet.write(intRow,24,employee.amount_special_holiday,styleData)
                        sheet.write(intRow,25,employee.amount_overtime_special_holiday,styleData)
                        sheet.write(intRow,26,employee.amount_legal_holiday,styleData)
                        sheet.write(intRow,27,employee.amount_overtime_legal_holiday,styleData)
                        sheet.write(intRow,28,employee.amount_thirteenth_month,styleData)
                        sheet.write(intRow,29,employee.amount_incentive_leaves,styleData)
                        sheet.write(intRow,30,employee.amount_allowance,styleData)
                        sheet.write(intRow,31,employee.amount_overheadcost,styleData)
                        sheet.write(intRow,32,employee.amount_govt_inc,styleData)
                        sheet.write(intRow,33,employee.amount_total,styleData)
                        intRow +=1

                    sheet.write(intRow,1,"",styleBottomLeft)
                    sheet.write(intRow,2,"",styleBottom_in_name)
                    sheet.write(intRow,3,"",styleBottom_in_name)
                    sheet.write(intRow,4,"",styleBottom_in_name)

                    border = xlwt.Borders()
                    border.bottom = xlwt.Borders.THIN
                    border.top = xlwt.Borders.THIN
                    border.left = xlwt.Borders.THIN
                    border.right = xlwt.Borders.THIN

                    styleDataFooter =xlwt.XFStyle()
                    styleDataFooter.font.bold = True
                    styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
                    pattern = xlwt.Pattern()
                    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
                    pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
                    styleDataFooter.pattern = pattern
                    styleDataFooter.borders = border
                    #styleDataFooter.alignment = 1

                    sheet.write_merge(intRow,intRow, 1,4, "SUBTOTAL", styleDataFooter)
                    int_total_less_day = sum(employee.details_less_day  for employee in model_billing_detail)
                    int_total_tardiness = sum(employee.details_tardiness_ut  for employee in model_billing_detail)
                    curr_total_straight_duty = sum(employee.details_straight_duty  for employee in model_billing_detail)
                    curr_total_night_diff = sum(employee.details_night_diff  for employee in model_billing_detail)
                    curr_total_overtime_regular = sum(employee.details_overtime_reqular  for employee in model_billing_detail)
                    curr_total_restday = sum(employee.details_restday  for employee in model_billing_detail)
                    curr_total_overtime_restday = sum(employee.details_overtime_restday  for employee in model_billing_detail)
                    curr_total_special_holiday = sum(employee.details_special_holiday  for employee in model_billing_detail)
                    curr_total_overtime_special_holiday = sum(employee.details_overtime_special_holiday  for employee in model_billing_detail)
                    curr_total_legal_holiday = sum(employee.details_legal_holiday  for employee in model_billing_detail)
                    curr_total_overtime_legal_holiday = sum(employee.details_overtime_legal_holiday  for employee in model_billing_detail)
                    curr_total_amount_contract = sum(employee.amount_contract  for employee in model_billing_detail)
                    curr_total_amount_less_day = sum(employee.amount_less_day  for employee in model_billing_detail)
                    curr_total_amount_tardiness_ut = sum(employee.amount_tardiness_ut for employee in model_billing_detail)
                    curr_total_amount_night_diff = sum(employee.amount_night_diff for employee in model_billing_detail)
                    curr_total_amount_straight_duty = sum(employee.amount_straight_duty for employee in model_billing_detail)
                    curr_total_amount_overtime_reqular = sum(employee.amount_overtime_reqular for employee in model_billing_detail)
                    curr_total_amount_restday = sum(employee.amount_restday for employee in model_billing_detail)
                    curr_total_amount_overtime_restday = sum(employee.amount_overtime_restday for employee in model_billing_detail)
                    curr_total_amount_amount_special_holiday = sum(employee.amount_special_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_special_holiday = sum(employee.amount_overtime_special_holiday for employee in model_billing_detail)
                    curr_total_amount_legal_holiday = sum(employee.amount_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_legal_holiday = sum(employee.amount_overtime_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_thirteenth_month = sum(employee.amount_thirteenth_month for employee in model_billing_detail)
                    curr_total_amount_incentive_leaves = sum(employee.amount_incentive_leaves for employee in model_billing_detail)
                    curr_total_amount_allowance = sum(employee.amount_allowance for employee in model_billing_detail)
                    curr_total_amount_overheadcost = sum(employee.amount_overheadcost for employee in model_billing_detail)
                    curr_total_amount_govt_inc = sum(employee.amount_govt_inc for employee in model_billing_detail)
                    curr_total_amount_total = sum(employee.amount_total for employee in model_billing_detail)

                    if curr_total_straight_duty ==0:
                        sheet.col(7).hidden = True
                        sheet.col(20).hidden = True

                    if curr_total_night_diff ==0:
                        sheet.col(8).hidden = True
                        sheet.col(19).hidden = True

                    if curr_total_overtime_regular ==0:
                        sheet.col(9).hidden = True
                        sheet.col(21).hidden = True

                    if curr_total_restday ==0:
                        sheet.col(10).hidden = True
                        sheet.col(22).hidden = True

                    if curr_total_overtime_restday == 0:
                        sheet.col(11).hidden = True
                        sheet.col(23).hidden = True

                    if curr_total_special_holiday == 0:
                        sheet.col(12).hidden = True
                        sheet.col(24).hidden = True

                    if curr_total_overtime_special_holiday == 0:
                        sheet.col(13).hidden = True
                        sheet.col(25).hidden = True

                    if curr_total_legal_holiday == 0:
                        sheet.col(14).hidden = True
                        sheet.col(26).hidden = True

                    if curr_total_overtime_legal_holiday ==0:
                        sheet.col(15).hidden = True
                        sheet.col(27).hidden = True

                    sheet.write(intRow,5,int_total_less_day,styleDataFooter)
                    sheet.write(intRow,6,int_total_tardiness,styleDataFooter)
                    sheet.write(intRow,7,curr_total_straight_duty,styleDataFooter)
                    sheet.write(intRow,8,curr_total_night_diff,styleDataFooter)
                    sheet.write(intRow,9,curr_total_overtime_regular,styleDataFooter)
                    sheet.write(intRow,10,curr_total_restday,styleDataFooter)
                    sheet.write(intRow,11,curr_total_overtime_restday,styleDataFooter)
                    sheet.write(intRow,12,curr_total_special_holiday,styleDataFooter)
                    sheet.write(intRow,13,curr_total_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,14,curr_total_legal_holiday,styleDataFooter)
                    sheet.write(intRow,15,curr_total_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,16,curr_total_amount_contract,styleDataFooter)
                    sheet.write(intRow,17,curr_total_amount_less_day,styleDataFooter)
                    sheet.write(intRow,18,curr_total_amount_tardiness_ut,styleDataFooter)
                    sheet.write(intRow,19,curr_total_amount_night_diff,styleDataFooter)
                    sheet.write(intRow,20,curr_total_amount_straight_duty,styleDataFooter)
                    sheet.write(intRow,21,curr_total_amount_overtime_reqular,styleDataFooter)
                    sheet.write(intRow,22,curr_total_amount_restday,styleDataFooter)
                    sheet.write(intRow,23,curr_total_amount_overtime_restday,styleDataFooter)
                    sheet.write(intRow,24,curr_total_amount_amount_special_holiday,styleDataFooter)
                    sheet.write(intRow,25,curr_total_amount_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,26,curr_total_amount_legal_holiday,styleDataFooter)
                    sheet.write(intRow,27,curr_total_amount_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,28,curr_total_amount_thirteenth_month,styleDataFooter)
                    sheet.write(intRow,29,curr_total_amount_incentive_leaves,styleDataFooter)
                    sheet.write(intRow,30,curr_total_amount_allowance,styleDataFooter)
                    sheet.write(intRow,31,curr_total_amount_overheadcost,styleDataFooter)
                    sheet.write(intRow,32,curr_total_amount_govt_inc,styleDataFooter)
                    sheet.write(intRow,33,curr_total_amount_total,styleDataFooter)

                    int_project_total_less_day +=int_total_less_day
                    int_project_total_tardiness +=int_total_tardiness
                    curr_total_project_straight_duty +=curr_total_straight_duty
                    curr_total_project_night_diff +=curr_total_night_diff
                    curr_total_project_overtime_regular +=curr_total_overtime_regular
                    curr_total_project_restday +=curr_total_restday
                    curr_total_project_overtime_restday +=curr_total_overtime_restday
                    curr_total_project_special_holiday +=curr_total_special_holiday
                    curr_total_project_overtime_special_holiday +=curr_total_overtime_special_holiday
                    curr_total_project_legal_holiday +=curr_total_legal_holiday
                    curr_total_project_overtime_legal_holiday +=curr_total_overtime_legal_holiday
                    curr_total_project_amount_contract +=curr_total_amount_contract
                    curr_total_project_amount_less_day +=curr_total_amount_less_day
                    curr_total_project_amount_tardiness_ut +=curr_total_amount_tardiness_ut
                    curr_total_project_amount_night_diff +=curr_total_amount_night_diff
                    curr_total_project_amount_straight_duty +=curr_total_amount_straight_duty
                    curr_total_project_amount_overtime_reqular +=curr_total_amount_overtime_reqular
                    curr_total_project_amount_restday +=curr_total_amount_restday
                    curr_total_project_amount_overtime_restday +=curr_total_amount_overtime_restday
                    curr_total_project_amount_amount_special_holiday +=curr_total_amount_amount_special_holiday
                    curr_total_project_amount_overtime_special_holiday +=curr_total_amount_overtime_special_holiday
                    curr_total_project_amount_legal_holiday +=curr_total_amount_legal_holiday
                    curr_total_project_amount_overtime_legal_holiday +=curr_total_amount_overtime_legal_holiday
                    curr_total_project_amount_thirteenth_month +=curr_total_amount_thirteenth_month
                    curr_total_project_amount_incentive_leaves +=curr_total_amount_incentive_leaves
                    curr_total_project_amount_allowance +=curr_total_amount_allowance
                    curr_total_project_amount_overheadcost +=curr_total_amount_overheadcost
                    curr_total_project_amount_govt_inc +=curr_total_amount_govt_inc
                    curr_total_project_amount_total +=curr_total_amount_total

                    sub_total_amount += curr_total_amount_total

                    intRow +=1
                    sheet.write_merge(intRow,intRow, 1,4, "", styleBottom)
                    for intRowBottom in range(5,34):
                        sheet.write(intRow,intRowBottom,"",styleBottom)

        styleDataFooter =xlwt.XFStyle()
        styleDataFooter.font.bold = True
        styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'

        intRow +=2
        sheet.write_merge(intRow,intRow, 1,4, "TOTAL", styleDataFooter)
        sheet.write(intRow,5,int_project_total_less_day,styleDataFooter)
        sheet.write(intRow,6,int_project_total_tardiness,styleDataFooter)
        sheet.write(intRow,7,curr_total_project_straight_duty,styleDataFooter)
        sheet.write(intRow,8,curr_total_project_night_diff,styleDataFooter)
        sheet.write(intRow,9,curr_total_project_overtime_regular,styleDataFooter)
        sheet.write(intRow,10,curr_total_project_restday,styleDataFooter)
        sheet.write(intRow,11,curr_total_project_overtime_restday,styleDataFooter)
        sheet.write(intRow,12,curr_total_project_special_holiday,styleDataFooter)
        sheet.write(intRow,13,curr_total_project_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,14,curr_total_project_legal_holiday,styleDataFooter)
        sheet.write(intRow,15,curr_total_project_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,16,curr_total_project_amount_contract,styleDataFooter)
        sheet.write(intRow,17,curr_total_project_amount_less_day,styleDataFooter)
        sheet.write(intRow,18,curr_total_project_amount_tardiness_ut,styleDataFooter)
        sheet.write(intRow,19,curr_total_project_amount_night_diff,styleDataFooter)
        sheet.write(intRow,20,curr_total_project_amount_straight_duty,styleDataFooter)
        sheet.write(intRow,21,curr_total_project_amount_overtime_reqular,styleDataFooter)
        sheet.write(intRow,22,curr_total_project_amount_restday,styleDataFooter)
        sheet.write(intRow,23,curr_total_project_amount_overtime_restday,styleDataFooter)
        sheet.write(intRow,24,curr_total_project_amount_amount_special_holiday,styleDataFooter)
        sheet.write(intRow,25,curr_total_project_amount_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,26,curr_total_project_amount_legal_holiday,styleDataFooter)
        sheet.write(intRow,27,curr_total_project_amount_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,28,curr_total_project_amount_thirteenth_month,styleDataFooter)
        sheet.write(intRow,29,curr_total_project_amount_incentive_leaves,styleDataFooter)
        sheet.write(intRow,30,curr_total_project_amount_allowance,styleDataFooter)
        sheet.write(intRow,31,curr_total_project_amount_overheadcost,styleDataFooter)
        sheet.write(intRow,32,curr_total_project_amount_govt_inc,styleDataFooter)
        sheet.write(intRow,33,curr_total_project_amount_total,styleDataFooter)


        intRow +=2

        #Get SubTotal Amount

        sheet.write(intRow,29,"Subtotal ")
        sheet.write_merge(intRow,intRow,31,33,sub_total_amount,styleFooter)
        intRow +=1

        curr_total_vat_amount = sub_total_amount * constants.VAT_RATE
        sheet.write_merge(intRow,intRow,29,30,"Add : 12% VAT ")
        sheet.write_merge(intRow,intRow,31,33,curr_total_vat_amount,styleFooter)
        intRow +=2

        sheet.write_merge(intRow,intRow,29,30,"GRAND TOTAL ")
        sheet.write_merge(intRow,intRow,31,33,curr_total_vat_amount + sub_total_amount,styleFooter)

            #intRow +=5

        # Hide ColumnA
        sheet.col(0).hidden = True

        fp = StringIO()
        workbook.save(fp)
        fp.seek(0)
        data = fp.read()
        fp.close()
        byte_arr = base64.b64encode(data)
        self.billing_file = byte_arr

    @api.one
    def DailyBreakdownReport_Merge(self):
        #Excel File Generation
        if self.job_id.name == False:
            job_name = ""
        else:
            job_name =self.job_id.name

        workbook = xlwt.Workbook()
        sheet = workbook.add_sheet("Billing - " + job_name, True)

        styleTitleFrom =xlwt.XFStyle()
        styleTitleTo =xlwt.XFStyle()
        styleTitleRe =xlwt.XFStyle()
        styleTitleDetails =xlwt.XFStyle()
        styleTitleAmount =xlwt.XFStyle()
        styleColumns =xlwt.XFStyle()
        styleData =xlwt.XFStyle()
        styleBottom_in_name = xlwt.XFStyle()
        styleFooter = xlwt.XFStyle()
        styleBottom =xlwt.XFStyle()
        styleLeft=xlwt.XFStyle()
        styleBottomLeft =xlwt.XFStyle()
        styleBottomRight=xlwt.XFStyle()

        #Alignment Center
        alignment = xlwt.Alignment()
        alignment.horz = xlwt.Alignment.HORZ_CENTER
        alignment.vert = xlwt.Alignment.VERT_CENTER
        alignment.Wrap = 1
        styleColumns.alignment = alignment
        styleColumns.alignment.wrap = 1
        styleColumns.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'


        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        styleTitleDetails.borders = border
        styleTitleAmount.borders = border
        styleColumns.borders = border

        #border Data
        borderdata = xlwt.Borders()
        borderdata.bottom = xlwt.Borders.NO_LINE
        borderdata.top = xlwt.Borders.NO_LINE
        borderdata.left = xlwt.Borders.THIN
        borderdata.right = xlwt.Borders.THIN

        borderdataBottom = xlwt.Borders()
        borderdataBottom.bottom = xlwt.Borders.THIN
        borderdataBottom.top = xlwt.Borders.NO_LINE
        borderdataBottom.left = xlwt.Borders.THIN
        borderdataBottom.right = xlwt.Borders.THIN

        borderLeft = xlwt.Borders()
        borderLeft.bottom = xlwt.Borders.NO_LINE
        borderLeft.top = xlwt.Borders.NO_LINE
        borderLeft.left = xlwt.Borders.THIN
        borderLeft.right = xlwt.Borders.NO_LINE

        borderdataBottomLeft = xlwt.Borders()
        borderdataBottomLeft.bottom = xlwt.Borders.THIN
        borderdataBottomLeft.top = xlwt.Borders.NO_LINE
        borderdataBottomLeft.left = xlwt.Borders.THIN
        borderdataBottomLeft.right = xlwt.Borders.NO_LINE

        borderBottom_in_name = xlwt.Borders()
        borderBottom_in_name.bottom = xlwt.Borders.THIN
        borderBottom_in_name.top = xlwt.Borders.NO_LINE
        borderBottom_in_name.left = xlwt.Borders.NO_LINE
        borderBottom_in_name.right = xlwt.Borders.NO_LINE

        styleBottomLeft.borders = borderdataBottomLeft
        styleLeft.borders = borderLeft
        styleData.borders = borderdata
        styleBottom.borders = borderdataBottom
        styleBottom_in_name.borders = borderBottom_in_name

        styleData.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
        styleLeft.num_format_str = '00'
        #font
        font = xlwt.Font()
        font.name = 'Arial'
        font.height =120

        #Creation of Position Background Colour
        xlwt.add_palette_colour("custom_colour", 0x21)
        workbook.set_colour_RGB(0x21,  196, 215, 155)

        subtotal_color = xlwt.XFStyle()
        pattern = xlwt.Pattern()
        pattern.pattern = xlwt.Pattern.SOLID_PATTERN
        pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
        subtotal_color.pattern = pattern

        job_background_color = xlwt.easyxf('pattern: pattern solid, fore_colour custom_colour')
        job_background_color.alignment = alignment
        job_background_color.alignment.wrap = 1
        job_background_color.num_format_str ='_(* #,##0.00_);_(* (#,##0.00);_(* "0.00"??_);_(@_)'

        #border 1
        border = xlwt.Borders()
        border.bottom = xlwt.Borders.THIN
        border.top = xlwt.Borders.THIN
        border.left = xlwt.Borders.THIN
        border.right = xlwt.Borders.THIN
        job_background_color.borders = border
        job_background_color.font.bold =True


        dict_filter = [('main_detail_id','=', self.customer_id.id)]
        #Search Branches in Selected Company
        if len(self.customer_branches_id) > 0:
            dict_filter.append(('id', '=', self.customer_branches_id.id))

        model_cust_branches = self.env['res.customer.branches'].search(dict_filter)
        sub_total_amount = 0

        intRow=1

        #Get Company Information
        company = self.env['res.company'].search([('id','=',1)])

        sheet.write(intRow,1,"FR :",styleTitleFrom)
        sheet.write(intRow,2,company.name,styleTitleFrom)
        intRow +=1
        sheet.write(intRow,1,"TO :",styleTitleTo)
        sheet.write(intRow,2,self.customer_id.name,styleTitleRe)
        intRow +=1
        intRow_RE = intRow
        sheet.write(intRow,1,"RE :",styleTitleRe)
        intRow +=2
        sheet.write_merge(intRow,intRow, 1,15, "DETAILS", styleColumns)
        sheet.write_merge(intRow,intRow, 16,36, "AMOUNT", styleColumns)
        intRow +=1
        #Columns
        sheet.write_merge(intRow,intRow+6, 1,4, "Name of Employee", styleColumns)
        sheet.write_merge(intRow,intRow+5, 5,5, "Add'l/Less Days", styleColumns)
        sheet.write_merge(intRow,intRow+5,6,6,"Late/UT",styleColumns)
        sheet.write_merge(intRow,intRow+5,7,7,"Straight Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,8,8,"Night Diff.",styleColumns)
        sheet.write_merge(intRow,intRow+5,9,9,"OT - Regular",styleColumns)
        sheet.write_merge(intRow,intRow+5,10,10,"OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,11,11,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,12,12,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,13,13,"OT - Special Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,14,14,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,15,15,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,16,16,"Contract Amount",styleColumns)
        sheet.write_merge(intRow,intRow+5,17,17,"Add'l Less Days",styleColumns)
        sheet.write_merge(intRow,intRow+5,18,18,"Late/UT",styleColumns)
        sheet.write_merge(intRow,intRow+5,19,19,"Night Diff",styleColumns)
        sheet.write_merge(intRow,intRow+5,20,20,"Straight Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,21,21,"OT - Regular",styleColumns)
        sheet.write_merge(intRow,intRow+5,22,22,"OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,23,23,"Excess OT - Rest Day",styleColumns)
        sheet.write_merge(intRow,intRow+5,24,24,"Special Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,25,25,"OT - Special Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,26,26,"Legal Holiday w/ Duty",styleColumns)
        sheet.write_merge(intRow,intRow+5,27,27,"OT - Legal Holiday",styleColumns)
        sheet.write_merge(intRow,intRow+5,28,28,"13th Month Pay",styleColumns)
        sheet.write_merge(intRow,intRow+5,29,29,"5 Days Incentive Leave",styleColumns)
        sheet.write_merge(intRow,intRow+5,30,30,"Allowance",styleColumns)
        sheet.write_merge(intRow,intRow+5,31,31,"Overhead Cost",styleColumns)
        sheet.write_merge(intRow,intRow+5,32,32,"Govt Inc.",styleColumns)

        sheet.write_merge(intRow,intRow+5,33,33,"Supplies",styleColumns)
        sheet.write_merge(intRow,intRow+5,34,34,"Uniform Allowance",styleColumns)
        sheet.write_merge(intRow,intRow+5,35,35,"Equipment",styleColumns)

        sheet.write_merge(intRow,intRow+6,36,36,"Total",styleColumns)


        intRow += 6
        #Days/per hours
        sheet.write(intRow,5,"(days)",styleColumns)
        sheet.write(intRow,6,"(mins)",styleColumns)
        sheet.write(intRow,7,"(hrs)",styleColumns)
        sheet.write(intRow,8,"(hrs)",styleColumns)
        sheet.write(intRow,9,"(hrs)",styleColumns)
        sheet.write(intRow,10,"(hrs)",styleColumns)
        sheet.write(intRow,11,"(hrs)",styleColumns)
        sheet.write(intRow,12,"(hrs)",styleColumns)
        sheet.write(intRow,13,"(hrs)",styleColumns)
        sheet.write(intRow,14,"(hrs)",styleColumns)
        sheet.write(intRow,15,"(hrs)",styleColumns)
        sheet.write(intRow,16,"(per mo.)",styleColumns)
        sheet.write(intRow,17,"(per day)",styleColumns)
        sheet.write(intRow,18,"(per min)",styleColumns)
        sheet.write(intRow,19,"(per hr)",styleColumns)
        sheet.write(intRow,20,"(per hr)",styleColumns)
        sheet.write(intRow,21,"(per hr)",styleColumns)
        sheet.write(intRow,22,"(per hr)",styleColumns)
        sheet.write(intRow,23,"(per hr)",styleColumns)
        sheet.write(intRow,24,"(per hr)",styleColumns)
        sheet.write(intRow,25,"(per hr)",styleColumns)
        sheet.write(intRow,26,"(per hr)",styleColumns)
        sheet.write(intRow,27,"(per hr)",styleColumns)
        sheet.write(intRow,28,"(pesos)",styleColumns)
        sheet.write(intRow,29,"(pesos)",styleColumns)
        sheet.write(intRow,30,"(pesos)",styleColumns)
        sheet.write(intRow,31,"(pesos)",styleColumns)
        sheet.write(intRow,32,"(pesos)",styleColumns)

        sheet.write(intRow,33,"(pesos)",styleColumns)
        sheet.write(intRow,34,"(pesos)",styleColumns)
        sheet.write(intRow,35,"(pesos)",styleColumns)

        intRow+=1

        int_project_total_less_day = 0
        int_project_total_tardiness = 0
        curr_total_project_straight_duty = 0
        curr_total_project_night_diff = 0
        curr_total_project_overtime_regular = 0
        curr_total_project_restday = 0
        curr_total_project_overtime_restday = 0
        curr_total_project_special_holiday = 0
        curr_total_project_overtime_special_holiday = 0
        curr_total_project_legal_holiday = 0
        curr_total_project_overtime_legal_holiday = 0
        curr_total_project_amount_contract = 0
        curr_total_project_amount_less_day = 0
        curr_total_project_amount_tardiness_ut = 0
        curr_total_project_amount_night_diff = 0
        curr_total_project_amount_straight_duty = 0
        curr_total_project_amount_overtime_reqular = 0
        curr_total_project_amount_restday = 0
        curr_total_project_amount_overtime_restday = 0
        curr_total_project_amount_amount_special_holiday = 0
        curr_total_project_amount_overtime_special_holiday = 0
        curr_total_project_amount_legal_holiday = 0
        curr_total_project_amount_overtime_legal_holiday = 0
        curr_total_project_amount_thirteenth_month = 0
        curr_total_project_amount_incentive_leaves = 0
        curr_total_project_amount_allowance = 0
        curr_total_project_amount_overheadcost = 0
        curr_total_project_amount_govt_inc = 0
        curr_total_project_amount_total = 0

        curr_total_project_amount_supplies = 0
        curr_total_project_amount_uniform_allowance = 0
        curr_total_project_amount_equipment  = 0



        for cust_branch in model_cust_branches:


            sheet.write_merge(intRow,intRow, 1,36, cust_branch.name, job_background_color)

            #Getting the Parameters Per Job Postion
            dict_filter =[]
            dict_filter = [('customer_id','=', cust_branch.customer_info.id)]
            if len(self.job_id)>0:
                dict_filter.append(('job_id','=', self.job_id.id))

            model_workhourtype = self.env['hr.workhourtype']
            model_client_billing_info = self.env['res.customer.setup'].search(dict_filter)
            #intRow = 12

            for project_setup in model_client_billing_info:
                intRow +=1
                sheet.write_merge(intRow,intRow, 1,4, project_setup.job_id.name, job_background_color)
                for i in range(5,37):
                    sheet.write(intRow,i,"",job_background_color)

                #SETUP PROJECT INFORMATION
                if project_setup.factor_days > 0:
                    monthly_cost = (project_setup.daily_rate * project_setup.factor_days) / constants.MONTHS_IN_YEAR
                    daily_rate  = project_setup.daily_rate
                else:
                    monthly_cost  = 0
                    daily_rate  = 0

                hourly_rate = daily_rate / constants.HOURS_PER_DAY

                sheet.write(intRow,16,round(monthly_cost,2), job_background_color)
                sheet.write(intRow,17,round(daily_rate,2) ,job_background_color)
                sheet.write(intRow,18,round(hourly_rate/constants.MINUTES,2),job_background_color)
                sheet.write(intRow,19,round(model_workhourtype.getAmountRateAmount('NDIFF',hourly_rate),2),job_background_color)
                sheet.write(intRow,20,round(model_workhourtype.getAmountRateAmount('STRDUTY',hourly_rate),2),job_background_color)
                sheet.write(intRow,21,round(model_workhourtype.getAmountRateAmount('ROT',hourly_rate),2),job_background_color)
                sheet.write(intRow,22,round(model_workhourtype.getAmountRateAmount('RESTDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,23,round(model_workhourtype.getAmountRateAmount('RESTOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,24,round(model_workhourtype.getAmountRateAmount('SPEHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,25,round(model_workhourtype.getAmountRateAmount('SPEHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,26,round(model_workhourtype.getAmountRateAmount('REGHDRATE',hourly_rate),2),job_background_color)
                sheet.write(intRow,27,round(model_workhourtype.getAmountRateAmount('REGHOT',hourly_rate),2),job_background_color)
                sheet.write(intRow,28,round(project_setup.thirteenth_month,2),job_background_color)
                sheet.write(intRow,29,round(project_setup.incentive_leaves,2),job_background_color)
                sheet.write(intRow,30,round(project_setup.allowance,2),job_background_color)
                sheet.write(intRow,31,str(int(project_setup.overhead_cost)) + "%",job_background_color)
                sheet.write(intRow,32,round(project_setup.due_to_government,2),job_background_color)
                sheet.write(intRow,33,round(project_setup.supplies,2),job_background_color)

                sheet.write(intRow,33,round(project_setup.supplies,2),styleColumns)
                sheet.write(intRow,34,round(project_setup.uniform_allowance,2),styleColumns)
                sheet.write(intRow,35,round(project_setup.equipment,2),styleColumns)

                #START CREATION OF DATA
                intRow +=1
                model_billing_detail = self.env['billing.detail'].search([ ('billing_main_id.attendance_id.month_of', '=', self.billing_month_of),
                                                                           ('billing_main_id.attendance_id.month_quarter', '=', self.billing_month_quarter),
                                                                           ('billing_main_id.customer_id', '=', project_setup.customer_id.id),
                                                                           ('billing_main_id.job_id', '=', project_setup.job_id.id)])

                if len(model_billing_detail) > 0:
                    for employee in model_billing_detail:
                        sheet.write(intRow_RE,2,"BILLING - " + str(employee.billing_main_id.attendance_id.schedule_datefrom) + ' - ' + str(employee.billing_main_id.attendance_id.schedule_dateto) ,styleTitleRe)
                        fontData = xlwt.Font()
                        styleEmployeeName = xlwt.XFStyle()
                        #To Check if Employee has a reliever or not
                        if employee.has_a_reliever == True:
                            fontData.colour_index = 0x0A
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.parent_employee_id.name,styleEmployeeName)

                        elif employee.is_reliever == True:
                            fontData.colour_index = 0x0C
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, "**", styleLeft)
                            #sheet.write(intRow, 2, "**",styleEmployeeName)
                            sheet.write(intRow, 2, employee.employee_reliever_id.name,styleEmployeeName)
                        else:
                            fontData.colour_index = 0x08
                            styleData.font = fontData
                            styleLeft.font = fontData
                            styleEmployeeName.font =fontData
                            sheet.write(intRow, 1, employee.sequence, styleLeft)
                            sheet.write(intRow, 2, employee.employee_id.name,styleEmployeeName)

                        sheet.write(intRow,5,employee.details_less_day,styleData)
                        sheet.write(intRow,6,employee.details_tardiness_ut,styleData)
                        sheet.write(intRow,7,employee.details_straight_duty,styleData)
                        sheet.write(intRow,8,employee.details_night_diff,styleData)
                        sheet.write(intRow,9,employee.details_overtime_reqular,styleData)
                        sheet.write(intRow,10,employee.details_restday,styleData)
                        sheet.write(intRow,11,employee.details_overtime_restday,styleData)
                        sheet.write(intRow,12,employee.details_special_holiday,styleData)
                        sheet.write(intRow,13,employee.details_overtime_special_holiday,styleData)
                        sheet.write(intRow,14,employee.details_legal_holiday,styleData)
                        sheet.write(intRow,15,employee.details_overtime_legal_holiday,styleData)
                        sheet.write(intRow,16,employee.amount_contract,styleData)
                        sheet.write(intRow,17,employee.amount_less_day,styleData)
                        sheet.write(intRow,18,employee.amount_tardiness_ut,styleData)
                        sheet.write(intRow,19,employee.amount_night_diff,styleData)
                        sheet.write(intRow,20,employee.amount_straight_duty,styleData)
                        sheet.write(intRow,21,employee.amount_overtime_reqular,styleData)
                        sheet.write(intRow,22,employee.amount_restday,styleData)
                        sheet.write(intRow,23,employee.amount_overtime_restday,styleData)
                        sheet.write(intRow,24,employee.amount_special_holiday,styleData)
                        sheet.write(intRow,25,employee.amount_overtime_special_holiday,styleData)
                        sheet.write(intRow,26,employee.amount_legal_holiday,styleData)
                        sheet.write(intRow,27,employee.amount_overtime_legal_holiday,styleData)
                        sheet.write(intRow,28,employee.amount_thirteenth_month,styleData)
                        sheet.write(intRow,29,employee.amount_incentive_leaves,styleData)
                        sheet.write(intRow,30,employee.amount_allowance,styleData)
                        sheet.write(intRow,31,employee.amount_overheadcost,styleData)
                        sheet.write(intRow,32,employee.amount_govt_inc,styleData)
                        sheet.write(intRow,33,employee.amount_supplies,styleData)

                        sheet.write(intRow,33,employee.amount_supplies,styleData)
                        sheet.write(intRow,34,employee.amount_uniform_allowance,styleData)
                        sheet.write(intRow,35,employee.amount_equipment,styleData)

                        sheet.write(intRow,36,employee.amount_total,styleData)
                        intRow +=1

                    sheet.write(intRow,1,"",styleBottomLeft)
                    sheet.write(intRow,2,"",styleBottom_in_name)
                    sheet.write(intRow,3,"",styleBottom_in_name)
                    sheet.write(intRow,4,"",styleBottom_in_name)

                    border = xlwt.Borders()
                    border.bottom = xlwt.Borders.THIN
                    border.top = xlwt.Borders.THIN
                    border.left = xlwt.Borders.THIN
                    border.right = xlwt.Borders.THIN

                    styleDataFooter =xlwt.XFStyle()
                    styleDataFooter.font.bold = True
                    styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'
                    pattern = xlwt.Pattern()
                    pattern.pattern = xlwt.Pattern.SOLID_PATTERN
                    pattern.pattern_fore_colour = xlwt.Style.colour_map['yellow']
                    styleDataFooter.pattern = pattern
                    styleDataFooter.borders = border
                    #styleDataFooter.alignment = 1

                    sheet.write_merge(intRow,intRow, 1,4, "SUBTOTAL", styleDataFooter)
                    int_total_less_day = sum(employee.details_less_day  for employee in model_billing_detail)
                    int_total_tardiness = sum(employee.details_tardiness_ut  for employee in model_billing_detail)
                    curr_total_straight_duty = sum(employee.details_straight_duty  for employee in model_billing_detail)
                    curr_total_night_diff = sum(employee.details_night_diff  for employee in model_billing_detail)
                    curr_total_overtime_regular = sum(employee.details_overtime_reqular  for employee in model_billing_detail)
                    curr_total_restday = sum(employee.details_restday  for employee in model_billing_detail)
                    curr_total_overtime_restday = sum(employee.details_overtime_restday  for employee in model_billing_detail)
                    curr_total_special_holiday = sum(employee.details_special_holiday  for employee in model_billing_detail)
                    curr_total_overtime_special_holiday = sum(employee.details_overtime_special_holiday  for employee in model_billing_detail)
                    curr_total_legal_holiday = sum(employee.details_legal_holiday  for employee in model_billing_detail)
                    curr_total_overtime_legal_holiday = sum(employee.details_overtime_legal_holiday  for employee in model_billing_detail)
                    curr_total_amount_contract = sum(employee.amount_contract  for employee in model_billing_detail)
                    curr_total_amount_less_day = sum(employee.amount_less_day  for employee in model_billing_detail)
                    curr_total_amount_tardiness_ut = sum(employee.amount_tardiness_ut for employee in model_billing_detail)
                    curr_total_amount_night_diff = sum(employee.amount_night_diff for employee in model_billing_detail)
                    curr_total_amount_straight_duty = sum(employee.amount_straight_duty for employee in model_billing_detail)
                    curr_total_amount_overtime_reqular = sum(employee.amount_overtime_reqular for employee in model_billing_detail)
                    curr_total_amount_restday = sum(employee.amount_restday for employee in model_billing_detail)
                    curr_total_amount_overtime_restday = sum(employee.amount_overtime_restday for employee in model_billing_detail)
                    curr_total_amount_amount_special_holiday = sum(employee.amount_special_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_special_holiday = sum(employee.amount_overtime_special_holiday for employee in model_billing_detail)
                    curr_total_amount_legal_holiday = sum(employee.amount_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_overtime_legal_holiday = sum(employee.amount_overtime_legal_holiday for employee in model_billing_detail)
                    curr_total_amount_thirteenth_month = sum(employee.amount_thirteenth_month for employee in model_billing_detail)
                    curr_total_amount_incentive_leaves = sum(employee.amount_incentive_leaves for employee in model_billing_detail)
                    curr_total_amount_allowance = sum(employee.amount_allowance for employee in model_billing_detail)
                    curr_total_amount_overheadcost = sum(employee.amount_overheadcost for employee in model_billing_detail)
                    curr_total_amount_govt_inc = sum(employee.amount_govt_inc for employee in model_billing_detail)
                    curr_total_amount_total = sum(employee.amount_total for employee in model_billing_detail)

                    curr_total_amount_supplies = sum(employee.amount_supplies for employee in model_billing_detail)
                    curr_total_amount_uniform_allowance = sum(employee.amount_uniform_allowance for employee in model_billing_detail)
                    curr_total_amount_equipment = sum(employee.amount_equipment for employee in model_billing_detail)

                    if curr_total_straight_duty ==0:
                        sheet.col(7).hidden = True
                        sheet.col(20).hidden = True

                    if curr_total_night_diff ==0:
                        sheet.col(8).hidden = True
                        sheet.col(19).hidden = True

                    if curr_total_overtime_regular ==0:
                        sheet.col(9).hidden = True
                        sheet.col(21).hidden = True

                    if curr_total_restday ==0:
                        sheet.col(10).hidden = True
                        sheet.col(22).hidden = True

                    if curr_total_overtime_restday == 0:
                        sheet.col(11).hidden = True
                        sheet.col(23).hidden = True

                    if curr_total_special_holiday == 0:
                        sheet.col(12).hidden = True
                        sheet.col(24).hidden = True

                    if curr_total_overtime_special_holiday == 0:
                        sheet.col(13).hidden = True
                        sheet.col(25).hidden = True


                    if curr_total_legal_holiday == 0:
                        sheet.col(14).hidden = True
                        sheet.col(26).hidden = True

                    if curr_total_overtime_legal_holiday ==0:
                        sheet.col(15).hidden = True
                        sheet.col(27).hidden = True

                    if curr_total_amount_supplies  == 0:
                        sheet.col(33).hidden = True

                    if curr_total_amount_uniform_allowance == 0:
                        sheet.col(34).hidden = True

                    if curr_total_amount_equipment == 0:
                        sheet.col(35).hidden = True

                    sheet.write(intRow,5,int_total_less_day,styleDataFooter)
                    sheet.write(intRow,6,int_total_tardiness,styleDataFooter)
                    sheet.write(intRow,7,curr_total_straight_duty,styleDataFooter)
                    sheet.write(intRow,8,curr_total_night_diff,styleDataFooter)
                    sheet.write(intRow,9,curr_total_overtime_regular,styleDataFooter)
                    sheet.write(intRow,10,curr_total_restday,styleDataFooter)
                    sheet.write(intRow,11,curr_total_overtime_restday,styleDataFooter)
                    sheet.write(intRow,12,curr_total_special_holiday,styleDataFooter)
                    sheet.write(intRow,13,curr_total_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,14,curr_total_legal_holiday,styleDataFooter)
                    sheet.write(intRow,15,curr_total_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,16,curr_total_amount_contract,styleDataFooter)
                    sheet.write(intRow,17,curr_total_amount_less_day,styleDataFooter)
                    sheet.write(intRow,18,curr_total_amount_tardiness_ut,styleDataFooter)
                    sheet.write(intRow,19,curr_total_amount_night_diff,styleDataFooter)
                    sheet.write(intRow,20,curr_total_amount_straight_duty,styleDataFooter)
                    sheet.write(intRow,21,curr_total_amount_overtime_reqular,styleDataFooter)
                    sheet.write(intRow,22,curr_total_amount_restday,styleDataFooter)
                    sheet.write(intRow,23,curr_total_amount_overtime_restday,styleDataFooter)
                    sheet.write(intRow,24,curr_total_amount_amount_special_holiday,styleDataFooter)
                    sheet.write(intRow,25,curr_total_amount_overtime_special_holiday,styleDataFooter)
                    sheet.write(intRow,26,curr_total_amount_legal_holiday,styleDataFooter)
                    sheet.write(intRow,27,curr_total_amount_overtime_legal_holiday,styleDataFooter)
                    sheet.write(intRow,28,curr_total_amount_thirteenth_month,styleDataFooter)
                    sheet.write(intRow,29,curr_total_amount_incentive_leaves,styleDataFooter)
                    sheet.write(intRow,30,curr_total_amount_allowance,styleDataFooter)
                    sheet.write(intRow,31,curr_total_amount_overheadcost,styleDataFooter)
                    sheet.write(intRow,32,curr_total_amount_govt_inc,styleDataFooter)
                    sheet.write(intRow,33,curr_total_amount_supplies,styleDataFooter)

                    sheet.write(intRow,33,curr_total_amount_supplies,styleDataFooter)
                    sheet.write(intRow,34,curr_total_amount_uniform_allowance,styleDataFooter)
                    sheet.write(intRow,35,curr_total_amount_equipment,styleDataFooter)

                    sheet.write(intRow,36,curr_total_amount_total,styleDataFooter)

                    int_project_total_less_day +=int_total_less_day
                    int_project_total_tardiness +=int_total_tardiness
                    curr_total_project_straight_duty +=curr_total_straight_duty
                    curr_total_project_night_diff +=curr_total_night_diff
                    curr_total_project_overtime_regular +=curr_total_overtime_regular
                    curr_total_project_restday +=curr_total_restday
                    curr_total_project_overtime_restday +=curr_total_overtime_restday
                    curr_total_project_special_holiday +=curr_total_special_holiday
                    curr_total_project_overtime_special_holiday +=curr_total_overtime_special_holiday
                    curr_total_project_legal_holiday +=curr_total_legal_holiday
                    curr_total_project_overtime_legal_holiday +=curr_total_overtime_legal_holiday
                    curr_total_project_amount_contract +=curr_total_amount_contract
                    curr_total_project_amount_less_day +=curr_total_amount_less_day
                    curr_total_project_amount_tardiness_ut +=curr_total_amount_tardiness_ut
                    curr_total_project_amount_night_diff +=curr_total_amount_night_diff
                    curr_total_project_amount_straight_duty +=curr_total_amount_straight_duty
                    curr_total_project_amount_overtime_reqular +=curr_total_amount_overtime_reqular
                    curr_total_project_amount_restday +=curr_total_amount_restday
                    curr_total_project_amount_overtime_restday +=curr_total_amount_overtime_restday
                    curr_total_project_amount_amount_special_holiday +=curr_total_amount_amount_special_holiday
                    curr_total_project_amount_overtime_special_holiday +=curr_total_amount_overtime_special_holiday
                    curr_total_project_amount_legal_holiday +=curr_total_amount_legal_holiday
                    curr_total_project_amount_overtime_legal_holiday +=curr_total_amount_overtime_legal_holiday
                    curr_total_project_amount_thirteenth_month +=curr_total_amount_thirteenth_month
                    curr_total_project_amount_incentive_leaves +=curr_total_amount_incentive_leaves
                    curr_total_project_amount_allowance +=curr_total_amount_allowance
                    curr_total_project_amount_overheadcost +=curr_total_amount_overheadcost
                    curr_total_project_amount_govt_inc +=curr_total_amount_govt_inc
                    curr_total_project_amount_supplies +=curr_total_amount_supplies
                    curr_total_project_amount_total +=curr_total_amount_total

                    curr_total_project_amount_supplies +=curr_total_amount_supplies
                    curr_total_project_amount_uniform_allowance +=curr_total_amount_uniform_allowance
                    curr_total_project_amount_equipment +=curr_total_amount_equipment


                    sub_total_amount += curr_total_amount_total

                    intRow +=1
                    sheet.write_merge(intRow,intRow, 1,4, "", styleBottom)
                    for intRowBottom in range(5,37):
                        sheet.write(intRow,intRowBottom,"",styleBottom)

                styleDataFooter =xlwt.XFStyle()
                styleDataFooter.font.bold = True
                styleDataFooter.num_format_str = '#,##0.00_);[Red](#,##0.00)'

        intRow +=2
        sheet.write_merge(intRow,intRow, 1,4, "TOTAL", styleDataFooter)
        sheet.write(intRow,5,int_project_total_less_day,styleDataFooter)
        sheet.write(intRow,6,int_project_total_tardiness,styleDataFooter)
        sheet.write(intRow,7,curr_total_project_straight_duty,styleDataFooter)
        sheet.write(intRow,8,curr_total_project_night_diff,styleDataFooter)
        sheet.write(intRow,9,curr_total_project_overtime_regular,styleDataFooter)
        sheet.write(intRow,10,curr_total_project_restday,styleDataFooter)
        sheet.write(intRow,11,curr_total_project_overtime_restday,styleDataFooter)
        sheet.write(intRow,12,curr_total_project_special_holiday,styleDataFooter)
        sheet.write(intRow,13,curr_total_project_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,14,curr_total_project_legal_holiday,styleDataFooter)
        sheet.write(intRow,15,curr_total_project_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,16,curr_total_project_amount_contract,styleDataFooter)
        sheet.write(intRow,17,curr_total_project_amount_less_day,styleDataFooter)
        sheet.write(intRow,18,curr_total_project_amount_tardiness_ut,styleDataFooter)
        sheet.write(intRow,19,curr_total_project_amount_night_diff,styleDataFooter)
        sheet.write(intRow,20,curr_total_project_amount_straight_duty,styleDataFooter)
        sheet.write(intRow,21,curr_total_project_amount_overtime_reqular,styleDataFooter)
        sheet.write(intRow,22,curr_total_project_amount_restday,styleDataFooter)
        sheet.write(intRow,23,curr_total_project_amount_overtime_restday,styleDataFooter)
        sheet.write(intRow,24,curr_total_project_amount_amount_special_holiday,styleDataFooter)
        sheet.write(intRow,25,curr_total_project_amount_overtime_special_holiday,styleDataFooter)
        sheet.write(intRow,26,curr_total_project_amount_legal_holiday,styleDataFooter)
        sheet.write(intRow,27,curr_total_project_amount_overtime_legal_holiday,styleDataFooter)
        sheet.write(intRow,28,curr_total_project_amount_thirteenth_month,styleDataFooter)
        sheet.write(intRow,29,curr_total_project_amount_incentive_leaves,styleDataFooter)
        sheet.write(intRow,30,curr_total_project_amount_allowance,styleDataFooter)
        sheet.write(intRow,31,curr_total_project_amount_overheadcost,styleDataFooter)
        sheet.write(intRow,32,curr_total_project_amount_govt_inc,styleDataFooter)
        sheet.write(intRow,33,curr_total_project_amount_supplies,styleDataFooter)

        sheet.write(intRow,33,curr_total_project_amount_supplies,styleDataFooter)
        sheet.write(intRow,34,curr_total_project_amount_uniform_allowance,styleDataFooter)
        sheet.write(intRow,35,curr_total_project_amount_equipment,styleDataFooter)

        sheet.write(intRow,36,curr_total_project_amount_total,styleDataFooter)


        intRow +=2
        sheet.write(intRow,32,"Subtotal ")
        sheet.write_merge(intRow,intRow,34,36,sub_total_amount,styleFooter)
        intRow +=1

        curr_total_vat_amount = sub_total_amount * constants.VAT_RATE
        sheet.write_merge(intRow,intRow,32,33,"Add : 12% VAT ")
        sheet.write_merge(intRow,intRow,34,36,curr_total_vat_amount,styleFooter)
        intRow +=2

        sheet.write_merge(intRow,intRow,32,33,"GRAND TOTAL ")
        sheet.write_merge(intRow,intRow,34,36,curr_total_vat_amount + sub_total_amount,styleFooter)

            #intRow +=5

        # Hide ColumnA
        sheet.col(0).hidden = True
        sheet.col(16).hidden = True

        fp = StringIO()
        workbook.save(fp)
        fp.seek(0)
        data = fp.read()
        fp.close()
        byte_arr = base64.b64encode(data)
        self.billing_file = byte_arr